<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RI.Utilities</name>
    </assembly>
    <members>
        <member name="T:RI.Utilities.Binary.BinaryReaderExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.IO.BinaryReader" /> type.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Binary.BinaryReaderExtensions.PeekByte(System.IO.BinaryReader)">
            <summary>
                Reads the next byte from the reader without advancing the read position.
            </summary>
            <param name="reader"> The reader. </param>
            <returns>
                The read byte or -1 if the end of the reader was reached.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
            <exception cref="T:System.NotSupportedException"> <paramref name="reader" /> does not support seeking. </exception>
        </member>
        <member name="M:RI.Utilities.Binary.BinaryReaderExtensions.Read(System.IO.BinaryReader,System.Char[])">
            <summary>
                Reads characters into an array.
            </summary>
            <param name="reader"> The reader. </param>
            <param name="data"> The array. </param>
            <returns>
                The number of characters read into the array, beginning at index zero.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Binary.BinaryReaderExtensions.Read(System.IO.BinaryReader,System.Byte[])">
            <summary>
                Reads bytes into an array.
            </summary>
            <param name="reader"> The reader. </param>
            <param name="data"> The array. </param>
            <returns>
                The number of bytes read into the array, beginning at index zero.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Binary.NamespaceDoc">
            <summary>
                Contains utilities and extensions for working with binary data and I/O.
            </summary>
        </member>
        <member name="T:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3">
            <summary>
                Implements a base class for request/response collections.
            </summary>
            <typeparam name="TRequest"> The type of the requests. </typeparam>
            <typeparam name="TResponse"> The type of the responses. </typeparam>
            <typeparam name="TItem"> The type used to wrap the requests when presenting them to consumers. </typeparam>
            <remarks>
                <para>
                    A request/response collection is a thread-safe, asynchronous, bidirectional producer/consumer collection.
                </para>
                <para>
                    On one side is one or more producers which can, from any thread, add requests to the collection.
                    After a request is added, a response is awaited.
                </para>
                <para>
                    On the other side is one or more consumers which can, from any thread, take requests from the collection.
                    A consumer then processes a request and issues the response, causing the awaiting request to continue with that response.
                </para>
                <para>
                    Therefore, requests and responses can be two different types (<typeparamref name="TRequest" /> and <typeparamref name="TResponse" />) to allow true bidirectional data flow from the producer to the consumer and back.
                </para>
                <para>
                    A consumer can only process one request at a time.
                    And one request is processed by exactly one consumer.
                </para>
                <para>
                    If there are consumers waiting for requests, a new request is issued to the consumer already waiting the longest.
                    If there are no consumers waiting for requests, a new request will be stored and issued to the next consumer which wants to take requests for processing.
                </para>
                <para>
                    Requests are presented to consumers using types deriving from <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" /> (<typeparamref name="TItem" />).
                    <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" /> wraps the request (available through the <see cref="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Request" /> property) and provides methods to finish the request processing and issue a response (such as <see cref="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Respond(`1)" />).
                </para>
            </remarks>
            <threadsafety static="true" instance="true" />
            TODO: Implement RequestResponsePriorityQueue
            TODO: Implement RequestResponseStack
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3" />.
            </summary>
            <remarks>
                <para>
                    <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously" /> is used as continuation creation options.
                </para>
                <para>
                    The current task scheduler is used for executing continuations.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.#ctor(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3" />.
            </summary>
            <param name="completionCreationOptions"> The options which are used for creating continuations. </param>
            <remarks>
                <para>
                    The current task scheduler is used for executing continuations.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3" />.
            </summary>
            <param name="completionScheduler"> The task scheduler which is used for executing continuations. Can be null to use the current task scheduler. </param>
            <remarks>
                <para>
                    <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously" /> is used as continuation creation options.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3" />.
            </summary>
            <param name="completionCreationOptions"> The options which are used for creating continuations. </param>
            <param name="completionScheduler"> The task scheduler which is used for executing continuations. Can be null to use the current task scheduler. </param>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.CompletionCreationOptions">
            <summary>
                Gets the options which are used for creating continuations.
            </summary>
            <value>
                The options which are used for creating continuations.
            </value>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.CompletionScheduler">
            <summary>
                Gets the task scheduler which is used for executing continuations.
            </summary>
            <value>
                The task scheduler which is used for executing continuations.
            </value>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.WaitingConsumers">
            <summary>
                Gets the number of currently waiting consumers.
            </summary>
            <value>
                The number of currently waiting consumers.
            </value>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.WaitingRequests">
            <summary>
                Gets the number of currently waiting requests.
            </summary>
            <value>
                The number of currently waiting requests.
            </value>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.AbortRequests(System.Exception)">
            <summary>
                Aborts all currently waiting requests with an exception.
            </summary>
            <param name="exception"> The exception. </param>
            <returns>
                The number of aborted requests.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exception" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.CancelRequests">
            <summary>
                Cancels all currently waiting requests.
            </summary>
            <returns>
                The number of canceled requests.
            </returns>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.DismissConsumers">
            <summary>
                Dismisses all currently waiting consumers.
            </summary>
            <returns>
                The number of dismissed consumers.
            </returns>
            <remarks>
                <para>
                    The tasks of all waiting consumers will be canceled.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.RespondRequests(`1)">
            <summary>
                Issues the same response to all currently waiting requests and finishes them.
            </summary>
            <param name="response"> The response. </param>
            <returns>
                The number of finished requests.
            </returns>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.RespondRequests">
            <summary>
                Finishes all currently waiting requests with no response.
            </summary>
            <returns>
                The number of finished requests.
            </returns>
            <remarks>
                <para>
                    This simply issues a response using the default value of <typeparamref name="TResponse" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.PutAsync(`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Puts a new request into the collection or issues it to an already waiting consumer.
            </summary>
            <param name="request"> The request. </param>
            <param name="timeout"> The timeout used to wait for the response. </param>
            <param name="ct"> The cancellation token which can be used to cancel the request processing. </param>
            <returns>
                The task used to await the response.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="request" /> is null. </exception>
            <exception cref="T:System.TimeoutException"> <paramref name="timeout" /> was reached without a response. </exception>
            <exception cref="T:System.OperationCanceledException"> <paramref name="ct" /> was triggered. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.TakeAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Takes the next request from the collection for processing or waits for a request if non is waiting to be processed.
            </summary>
            <param name="timeout"> The timeout used to wait for the next request. </param>
            <param name="ct"> The cancellation token which can be used to cancel the request awaiting. </param>
            <returns>
                The task used to await the next request.
            </returns>
            <exception cref="T:System.TimeoutException"> <paramref name="timeout" /> was reached without a response. </exception>
            <exception cref="T:System.OperationCanceledException"> <paramref name="ct" /> was triggered. </exception>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.ConsumerCount">
            <summary>
                Gets the number of consumers waiting to process requests.
            </summary>
            <value>
                The number of consumers waiting to process requests.
            </value>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.RequestCount">
            <summary>
                Gets the number of requests waiting to be processed.
            </summary>
            <value>
                The number of requests waiting to be processed.
            </value>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.AddConsumer(System.Threading.Tasks.TaskCompletionSource{`2})">
            <summary>
                Adds a waiting consumer to the collection.
            </summary>
            <param name="consumer"> The consumer. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.AddRequest(`2)">
            <summary>
                Adds a waiting request to the collection.
            </summary>
            <param name="request"> The request. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.ClearConsumers">
            <summary>
                Removes all waiting consumers from the collection.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.ClearRequests">
            <summary>
                Removes all waiting requests from the collection.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.GetAndRemoveNextConsumer">
            <summary>
                Gets and removes the next waiting consumer.
            </summary>
            <returns>
                The consumer waiting for request the longest or null if no consumer is waiting for processing requests.
            </returns>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.GetAndRemoveNextRequest">
            <summary>
                Gets and removes the next waiting request.
            </summary>
            <returns>
                The next request to be processed or null if no request is waiting.
            </returns>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.GetConsumers">
            <summary>
                Gets the sequence of all currently waiting consumers.
            </summary>
            <returns>
                The sequence of all currently waiting consumers.
            </returns>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.GetRequests">
            <summary>
                Gets the sequence of all currently waiting requests.
            </summary>
            <returns>
                The sequence of all currently waiting requests.
            </returns>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.Initialize">
            <summary>
                Initializes the collection.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.RemoveConsumer(System.Threading.Tasks.TaskCompletionSource{`2})">
            <summary>
                Removes a consumer from the collection.
            </summary>
            <param name="consumer"> The consumer. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.RemoveRequest(`2)">
            <summary>
                Removes a request from the collection.
            </summary>
            <param name="request"> The request. </param>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.RI#Utilities#ObjectModel#ISynchronizable#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3.SyncRoot">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2">
            <summary>
                Implements a wrapper around requests which are managed by request/response collections (<see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3" /> types and derivatives).
            </summary>
            <typeparam name="TRequest"> The type of the request. </typeparam>
            <typeparam name="TResponse"> The type of the response. </typeparam>
            <remarks>
                <para>
                    Besides wrapping the request to process (<see cref="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Request" />), <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" /> also provides methods to control and release the request processing, such as <see cref="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Respond(`1)" /> or <see cref="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Cancel" />.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3" /> for more details.
                </para>
            </remarks>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.CancellationToken">
            <summary>
                Gets the cancellation token which is triggered if a request/response is no longer needed (see <see cref="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.StillNeeded" />).
            </summary>
            <value>
                The cancellation token which is triggered if a request/response is no longer needed (see <see cref="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.StillNeeded" />).
            </value>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized. </exception>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.CompletionCreationOptions">
            <summary>
                Gets the options which are used for creating continuations.
            </summary>
            <value>
                T
                The options which are used for creating continuations.
            </value>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized. </exception>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.IsFinished">
            <summary>
                Gets whether the request is finished.
            </summary>
            <value>
                true if the request is finished, false otherwise.
            </value>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized. </exception>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.IsInitialized">
            <summary>
                Gets whether the item is initialized.
            </summary>
            <value>
                true if the item is initialized, false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Request">
            <summary>
                Gets the request to be processed.
            </summary>
            <value>
                The request to be processed.
            </value>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized. </exception>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Response">
            <summary>
                Gets the issued response.
            </summary>
            <value>
                The issued response, if any.
            </value>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized. </exception>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.StillNeeded">
            <summary>
                Gets whether the request is still required to be processed and a response is still being awaited.
            </summary>
            <value>
                true if the request is still required to be processed and a response is still being awaited, false otherwise.
            </value>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Abort(System.Exception)">
            <summary>
                Aborts the request with an exception.
            </summary>
            <param name="exception"> The exception. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="exception" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized or was already finished. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Cancel">
            <summary>
                Cancels the request.
            </summary>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized or was already finished. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Respond">
            <summary>
                Finishes the response without a response.
            </summary>
            <remarks>
                <para>
                    This simply issues a response using the default value of <typeparamref name="TResponse" />.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized or was already finished. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Respond(`1)">
            <summary>
                Finishes the response with a response.
            </summary>
            <param name="response"> The response. </param>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized or was already finished. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.VerifyInitialized">
            <summary>
                Verifies that the item is initialized and throws a <see cref="T:System.InvalidOperationException" /> if not.
            </summary>
            <exception cref="T:System.InvalidOperationException"> The item is not initialized. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.VerifyNotFinished">
            <summary>
                Verifies that the item is not finished and throws a <see cref="T:System.InvalidOperationException" /> otherwise.
            </summary>
            <exception cref="T:System.InvalidOperationException"> The item is finished. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.OnAbort(System.Exception)">
            <summary>
                Called when the request is being aborted.
            </summary>
            <param name="exception"> The exception. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.OnCancel">
            <summary>
                Called when the request is being canceled.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.OnInitialize(System.Threading.Tasks.TaskCreationOptions,`0)">
            <summary>
                Called when the item is initialized.
            </summary>
            <param name="completionCreationOptions"> The completion creation options. </param>
            <param name="request"> The request associated with this item. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.OnNoLongerNeeded">
            <summary>
                Called when the request/response is no longer needed (see <see cref="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.StillNeeded" />).
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.OnRespond(`1)">
            <summary>
                Called when the request is finished with a response.
            </summary>
            <param name="response"> The response. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.OnRespond">
            <summary>
                Called when the request is finished without a response.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.RI#Utilities#ObjectModel#ISynchronizable#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.SyncRoot">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2">
            <summary>
                Implements a request/response queue.
            </summary>
            <typeparam name="TRequest"> The type of the requests. </typeparam>
            <typeparam name="TResponse"> The type of the responses. </typeparam>
            <remarks>
                <para>
                    A request/response queue is a thread-safe, asynchronous, bidirectional producer/consumer queue.
                </para>
                <para>
                    Operations work like this:
                    A request is put into the queue by any thread and the response is then awaited.
                    A consumer on any thread takes requests out of the queue, processes it, and provides the response, causing the request to continue.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseCollection`3" /> and <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" /> for more details.
                </para>
            </remarks>
            <threadsafety static="true" instance="true" />
            TODO: Code example
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2" />.
            </summary>
            <remarks>
                <para>
                    <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously" /> is used as continuation creation options.
                </para>
                <para>
                    The current task scheduler is used for executing continuations.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.#ctor(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2" />.
            </summary>
            <param name="completionCreationOptions"> The options which are used for creating continuations. </param>
            <remarks>
                <para>
                    The current task scheduler is used for executing continuations.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.#ctor(System.Threading.Tasks.TaskScheduler)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2" />.
            </summary>
            <param name="completionScheduler"> The task scheduler which is used for executing continuations. Can be null to use the current task scheduler. </param>
            <remarks>
                <para>
                    <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously" /> is used as continuation creation options.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2" />.
            </summary>
            <param name="completionCreationOptions"> The options which are used for creating continuations. </param>
            <param name="completionScheduler"> The task scheduler which is used for executing continuations. Can be null to use the current task scheduler. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.DequeueAsync">
            <summary>
                Awaits the next request and returns it for processing.
            </summary>
            <returns>
                The task used to await the next request.
            </returns>
            <remarks>
                <para>
                    The returned request for processing is wrapped in a <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" />.
                    To finish the processing and issue the response, <see cref="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Respond(`1)" /> must be called.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.DequeueAsync(System.TimeSpan)">
            <summary>
                Awaits the next request and returns it for processing.
            </summary>
            <param name="timeout"> The timeout used to wait for the next request. </param>
            <returns>
                The task used to await the next request.
            </returns>
            <remarks>
                <para>
                    The returned request for processing is wrapped in a <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" />.
                    To finish the processing and issue the response, <see cref="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Respond(`1)" /> must be called.
                </para>
            </remarks>
            <exception cref="T:System.TimeoutException"> <paramref name="timeout" /> was reached without a response. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
                Awaits the next request and returns it for processing.
            </summary>
            <param name="ct"> The cancellation token which can be used to cancel the request awaiting. </param>
            <returns>
                The task used to await the next request.
            </returns>
            <remarks>
                <para>
                    The returned request for processing is wrapped in a <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" />.
                    To finish the processing and issue the response, <see cref="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Respond(`1)" /> must be called.
                </para>
            </remarks>
            <exception cref="T:System.OperationCanceledException"> <paramref name="ct" /> was triggered. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.DequeueAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Awaits the next request and returns it for processing.
            </summary>
            <param name="timeout"> The timeout used to wait for the next request. </param>
            <param name="ct"> The cancellation token which can be used to cancel the request awaiting. </param>
            <returns>
                The task used to await the next request.
            </returns>
            <remarks>
                <para>
                    The returned request for processing is wrapped in a <see cref="T:RI.Utilities.Collections.Concurrent.RequestResponseItem`2" />.
                    To finish the processing and issue the response, <see cref="M:RI.Utilities.Collections.Concurrent.RequestResponseItem`2.Respond(`1)" /> must be called.
                </para>
            </remarks>
            <exception cref="T:System.TimeoutException"> <paramref name="timeout" /> was reached without a response. </exception>
            <exception cref="T:System.OperationCanceledException"> <paramref name="ct" /> was triggered. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.EnqueueAsync(`0)">
            <summary>
                Enqueues a new request for processing and awaits the response.
            </summary>
            <param name="request"> The request. </param>
            <returns>
                The task used to await the response.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="request" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.EnqueueAsync(`0,System.TimeSpan)">
            <summary>
                Enqueues a new request for processing and awaits the response.
            </summary>
            <param name="request"> The request. </param>
            <param name="timeout"> The timeout used to wait for the response. </param>
            <returns>
                The task used to await the response.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="request" /> is null. </exception>
            <exception cref="T:System.TimeoutException"> <paramref name="timeout" /> was reached without a response. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.EnqueueAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Enqueues a new request for processing and awaits the response.
            </summary>
            <param name="request"> The request. </param>
            <param name="ct"> The cancellation token which can be used to cancel the request processing. </param>
            <returns>
                The task used to await the response.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="request" /> is null. </exception>
            <exception cref="T:System.OperationCanceledException"> <paramref name="ct" /> was triggered. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.EnqueueAsync(`0,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Enqueues a new request for processing and awaits the response.
            </summary>
            <param name="request"> The request. </param>
            <param name="timeout"> The timeout used to wait for the response. </param>
            <param name="ct"> The cancellation token which can be used to cancel the request processing. </param>
            <returns>
                The task used to await the response.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="request" /> is null. </exception>
            <exception cref="T:System.TimeoutException"> <paramref name="timeout" /> was reached without a response. </exception>
            <exception cref="T:System.OperationCanceledException"> <paramref name="ct" /> was triggered. </exception>
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.ConsumerCount">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.RequestCount">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.AddConsumer(System.Threading.Tasks.TaskCompletionSource{RI.Utilities.Collections.Concurrent.RequestResponseItem{`0,`1}})">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.AddRequest(RI.Utilities.Collections.Concurrent.RequestResponseItem{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.ClearConsumers">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.ClearRequests">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.GetAndRemoveNextConsumer">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.GetAndRemoveNextRequest">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.GetConsumers">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.GetRequests">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.Initialize">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.RemoveConsumer(System.Threading.Tasks.TaskCompletionSource{RI.Utilities.Collections.Concurrent.RequestResponseItem{`0,`1}})">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Concurrent.RequestResponseQueue`2.RemoveRequest(RI.Utilities.Collections.Concurrent.RequestResponseItem{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Collections.Concurrent.NamespaceDoc">
            <summary>
                Contains new collection types for asynchronous and multi-threading scenarios.
            </summary>
        </member>
        <member name="T:RI.Utilities.Collections.Generic.IPool`1">
            <summary>
                Defines a generic interface for pools which can be used to store and recycle objects.
            </summary>
            <typeparam name="T"> The type of objects which can be stored and recycled by the pool. </typeparam>
            <remarks>
                <para>
                    Pools are used when it is desired to re-use instances instead of destroy/dispose/garbage-collect them, followed by creation of new instances, e.g. for performance reasons.
                </para>
                <note type="implement">
                    Implementations of <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> should support <see cref="T:RI.Utilities.Collections.Generic.IPoolAware" /> if applicable.
                </note>
                <note type="implement">
                    Implementations of <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> must not track taken items until they are returned again.
                </note>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Collections.Generic.IPool`1.Count">
            <summary>
                Gets the number of free items in the pool.
            </summary>
            <value>
                The number of free items in the pool.
            </value>
        </member>
        <member name="P:RI.Utilities.Collections.Generic.IPool`1.FreeItems">
            <summary>
                Gets the sequence of free items in the pool.
            </summary>
            <value>
                The sequence of free items in the pool.
            </value>
            <remarks>
                <note type="implement">
                    <see cref="P:RI.Utilities.Collections.Generic.IPool`1.FreeItems" /> must not be null.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPool`1.Clear">
            <summary>
                Removes all free items from the pool.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPool`1.Contains(`0)">
            <summary>
                Determines whether an item is in the pool as a free item.
            </summary>
            <param name="item"> The item which is checked to be in the pool as a free item. </param>
            <returns>
                true if the specified item is in the pool as a free item, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPool`1.Ensure(System.Int32)">
            <summary>
                Ensures that a minimum number of free items are in the pool by creating new items if necessary.
            </summary>
            <param name="minItems"> The number of minimum required free items in the pool. </param>
            <returns>
                The number of newly created items.
                Zero if no items were created or the number of free items is already bigger than the specified minimum.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="minItems" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPool`1.Reduce(System.Int32)">
            <summary>
                Ensures that a maximum number of free items are in a pool by removing excess free items if necessary.
            </summary>
            <param name="maxItems"> The number of maximum allowed free items in the pool. </param>
            <returns>
                The number of removed items.
                Zero if no items were removed or the number of free items is already less than the specified maximum.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="maxItems" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPool`1.Return(`0)">
            <summary>
                Returns an item to the pool as a free item so that it can be recycled. />.
            </summary>
            <param name="item"> The item to return to the pool. </param>
            <remarks>
                <note type="note">
                    The behaviour when the same item is returned multiple times without being taken is defined by the <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> implementation.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPool`1.Take">
            <summary>
                Takes the next free item from the pool or creates a new one if there is no free item.
            </summary>
            <returns>
                The item taken from the pool or newly created.
            </returns>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPool`1.Take(System.Boolean@)">
            <summary>
                Takes the next free item from the pool or creates a new one if there is no free item.
            </summary>
            <param name="created"> Indicates whether the taken item was newly created (true) or was a free item (false). </param>
            <returns>
                The item taken from the pool or newly created.
            </returns>
        </member>
        <member name="T:RI.Utilities.Collections.Generic.IPoolAware">
            <summary>
                Supports pool awareness of items managed by an <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> implementation.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolAware.Created">
            <summary>
                Called after the object has been created by the pool.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolAware.Removed">
            <summary>
                Called after the object has been removed from the pool.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolAware.Returned">
            <summary>
                Called after the object has been returned to the pool.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolAware.Taking">
            <summary>
                Called before the object is taken from the pool.
            </summary>
        </member>
        <member name="T:RI.Utilities.Collections.Generic.IPoolExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> type and its implementations.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolExtensions.AsPriorityQueue``1(RI.Utilities.Collections.Generic.IPool{``0})">
            <summary>
                Converts any instance implementing <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> to an explicit <see cref="T:RI.Utilities.Collections.Generic.IPool`1" />.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The instance implementing <see cref="T:RI.Utilities.Collections.Generic.IPool`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:RI.Utilities.Collections.Generic.IPool`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> can be useful in cases where the utility/extension methods of <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolExtensions.ReduceEnsure``1(RI.Utilities.Collections.Generic.IPool{``0},System.Int32)">
            <summary>
                Changes a pool so that it contains a specified exact number of free items.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="numItems"> The number of free items the pool must have. </param>
            <returns>
                The change in free items which was necessary to get the specified number of free items.
                The value is positive if new items were created, negative if free items were removed, or zero if the pool already contained the specified number of free items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="numItems" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolExtensions.ReturnRange``1(RI.Utilities.Collections.Generic.IPool{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns multiple items to a pool for recycling.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="items"> The sequence of items to be returned to the pool. </param>
            <returns>
                The number of items returned to the pool.
                Zero if the sequence contained no elements.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
                <note type="note">
                    The behaviour when the same item is returned multiple times without being taken is defined by the <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> implementation.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolExtensions.ReturnSafe``1(RI.Utilities.Collections.Generic.IPool{``0},``0)">
            <summary>
                Returns an item to a pool as a free item so that it can be recycled.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="item"> The item to return to the pool. </param>
            <returns>
                true if the item was returned, false if it was already returned.
            </returns>
            <remarks>
                <note type="important">
                    This return operation does check whether the item to be returned has already been returned to ensure consistency of the free and taken items.
                    If a more performant return operation is required, use <see cref="M:RI.Utilities.Collections.Generic.IPool`1.Return(`0)" /> instead.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> or <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolExtensions.ReturnSafeRange``1(RI.Utilities.Collections.Generic.IPool{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Returns multiple items to a pool for recycling.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="items"> The sequence of items to be returned to the pool. </param>
            <returns>
                The number of items returned to the pool.
                Zero if the sequence contained no elements.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
                <note type="note">
                    This return operation does check whether the item to be returned has already been returned to ensure consistency of the free and taken items.
                    If a more performant return operation is required, use <see cref="M:RI.Utilities.Collections.Generic.IPoolExtensions.ReturnRange``1(RI.Utilities.Collections.Generic.IPool{``0},System.Collections.Generic.IEnumerable{``0})" /> instead.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPoolExtensions.TakeRange``1(RI.Utilities.Collections.Generic.IPool{``0},System.Int32)">
            <summary>
                Takes multiple items from a pool and creates as much new items as necessary.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="pool" />. </typeparam>
            <param name="pool"> The pool. </param>
            <param name="numItems"> The number of items to take. </param>
            <returns>
                The array of taken items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="pool" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="numItems" /> is less than zero. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.Generic.IPriorityQueue`1">
            <summary>
                Defines a generic interface for priority queues.
            </summary>
            <typeparam name="T"> The type of items stored in the priority queue. </typeparam>
            <remarks>
                <para>
                    A priority queue stores items sorted by their assigned priority.
                    The priority is assigned to an item when the item is added to the priority queue using <see cref="M:RI.Utilities.Collections.Generic.IPriorityQueue`1.Enqueue(`0,System.Int32)" />.
                    The higher the priority, the earlier the item is dequeued (highest priority, first out).
                    For items of the same priority, the order in which they are added is maintained (first in, first out).
                </para>
                <para>
                    null are valid item values if <typeparamref name="T" /> is a reference type.
                </para>
            </remarks>
            TODO: Add support for IPriorityQueueAware
        </member>
        <member name="P:RI.Utilities.Collections.Generic.IPriorityQueue`1.HighestPriority">
            <summary>
                Gets the highest priority currently in the queue.
            </summary>
            <value>
                The highest priority currently in the queue or -1 if the queue is empty.
            </value>
        </member>
        <member name="P:RI.Utilities.Collections.Generic.IPriorityQueue`1.LowestPriority">
            <summary>
                Gets the lowest priority currently in the queue.
            </summary>
            <value>
                The lowest priority currently in the queue or -1 if the queue is empty.
            </value>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueue`1.Clear">
            <summary>
                Removes all items from the priority queue.
            </summary>
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueue`1.Dequeue">
            <summary>
                Gets the next item in the queue and removes it.
            </summary>
            <returns>
                The item.
            </returns>
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The priority queue is empty. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueue`1.Dequeue(System.Int32@)">
            <summary>
                Gets the next item in the queue and removes it.
            </summary>
            <param name="priority"> The priority of the item. </param>
            <returns>
                The item.
            </returns>
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The priority queue is empty. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueue`1.Enqueue(`0)">
            <summary>
                Adds an item to the queue.
            </summary>
            <param name="item"> The item. </param>
            <remarks>
                <para>
                    The item is added to the queue using the lowest current priority (similar to <see cref="P:RI.Utilities.Collections.Generic.IPriorityQueue`1.LowestPriority" />) or with a priority of 0 if the queue is empty.
                    This ensures the item is inserted truly at the end of the queue.
                </para>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueue`1.Enqueue(`0,System.Int32)">
            <summary>
                Adds an item to the queue.
            </summary>
            <param name="item"> The item. </param>
            <param name="priority"> The priority of the item. </param>
            <remarks>
                <para>
                    This is a O(x) operation, where x is the number of priorities currently in use, if <paramref name="priority" /> is currently not yet in use, or a O(1) operation if there are already other items of the same priority.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="priority" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueue`1.MoveTo(RI.Utilities.Collections.Generic.PriorityQueue{`0})">
            <summary>
                Moves all items of this queue to another queue while keeping the assigned priorities.
            </summary>
            <param name="queue"> The other queue the items are moved to. </param>
            <returns>
                The number of moved items.
            </returns>
            <remarks>
                <note type="important">
                    As the name of this method implies, the items are moved to the other queue, dequeueing all items from this queue.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queue" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueue`1.Peek">
            <summary>
                Gets the next item in the queue without removing it.
            </summary>
            <returns>
                The item.
            </returns>
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The priority queue is empty. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueue`1.Peek(System.Int32@)">
            <summary>
                Gets the next item in the queue without removing it.
            </summary>
            <param name="priority"> The priority of the item. </param>
            <returns>
                The item.
            </returns>
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The priority queue is empty. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.Generic.IPriorityQueueExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:RI.Utilities.Collections.Generic.IPriorityQueue`1" /> type and its implementations.
            </summary>
            <threadsafety static="false" instance="false" />
            TODO: EnqueueRange
            TODO: DequeueAll
            TODO: PeekAll
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueueExtensions.AsPriorityQueue``1(RI.Utilities.Collections.Generic.IPriorityQueue{``0})">
            <summary>
                Converts any instance implementing <see cref="T:RI.Utilities.Collections.Generic.IPriorityQueue`1" /> to an explicit <see cref="T:RI.Utilities.Collections.Generic.IPriorityQueue`1" />.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="priorityQueue" />. </typeparam>
            <param name="priorityQueue"> The instance implementing <see cref="T:RI.Utilities.Collections.Generic.IPriorityQueue`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:RI.Utilities.Collections.Generic.IPriorityQueue`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:RI.Utilities.Collections.Generic.IPriorityQueue`1" /> can be useful in cases where the utility/extension methods of <see cref="T:RI.Utilities.Collections.Generic.IPriorityQueue`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="priorityQueue" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueueExtensions.Remove``1(RI.Utilities.Collections.Generic.IPriorityQueue{``0},``0)">
            <summary>
                Removes all occurences of an item from the priority queue.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="priorityQueue" />. </typeparam>
            <param name="priorityQueue"> The priority queue. </param>
            <param name="item"> The item to remove. </param>
            <returns>
                The number of times the item was removed from the priority queue.
            </returns>
            <remarks>
                <para>
                    All matching items are removed, regardless of the priorities and the order in which they are in the queue.
                </para>
                <note type="important">
                    This method is considered very slow as it needs to rebuild the whole internal structure of the priority queue.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="priorityQueue" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueueExtensions.Remove``1(RI.Utilities.Collections.Generic.IPriorityQueue{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Removes all occurences of an item from the priority queue.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="priorityQueue" />. </typeparam>
            <param name="priorityQueue"> The priority queue. </param>
            <param name="item"> The item to remove. </param>
            <param name="comparer"> The comparer to use to test which items to remove. </param>
            <returns>
                The number of times the item was removed from the priority queue.
            </returns>
            <remarks>
                <para>
                    All matching items are removed, regardless of the priorities and the order in which they are in the queue.
                </para>
                <note type="important">
                    This method is considered very slow as it needs to rebuild the whole internal structure of the priority queue.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="priorityQueue" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueueExtensions.Remove``1(RI.Utilities.Collections.Generic.IPriorityQueue{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
                Removes all occurences of an item from the priority queue.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="priorityQueue" />. </typeparam>
            <param name="priorityQueue"> The priority queue. </param>
            <param name="item"> The item to remove. </param>
            <param name="comparer"> The function to use to test which items to remove. </param>
            <returns>
                The number of times the item was removed from the priority queue.
            </returns>
            <remarks>
                <para>
                    All matching items are removed, regardless of the priorities and the order in which they are in the queue.
                </para>
                <note type="important">
                    This method is considered very slow as it needs to rebuild the whole internal structure of the priority queue.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="priorityQueue" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.IPriorityQueueExtensions.RemoveWhere``1(RI.Utilities.Collections.Generic.IPriorityQueue{``0},RI.Utilities.Collections.Generic.PriorityQueueRemovePredicate{``0})">
            <summary>
                Removes items from the queue based on a predicate.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="priorityQueue" />. </typeparam>
            <param name="priorityQueue"> The priority queue. </param>
            <param name="predicate"> The predicate. </param>
            <returns>
                The list of removed items.
            </returns>
            <remarks>
                <para>
                    All items for which the predicate returns true are removed, regardless of the priorities and the order in which they are in the queue.
                </para>
                <note type="important">
                    This method is considered very slow as it needs to rebuild the whole internal structure of the priority queue.
                </note>
                <note type="important">
                    The priority queue is left in an undefined, most probably empty, state if an exception is thrown by <paramref name="predicate" />.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="priorityQueue" /> or <paramref name="predicate" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.Generic.Pool`1">
            <summary>
                Implements a simple pool which supports events for taking and returning.
            </summary>
            <typeparam name="T"> The type of objects which can be stored and recycled by the pool. </typeparam>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.Collections.Generic.PoolBase`1" /> for more details.
                </para>
                <para>
                    This pool implementation supports <see cref="T:RI.Utilities.Collections.Generic.IPoolAware" />.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
            <![CDATA[
            // create a pool
            var pool = new Pool<MyObject>();
            
            // get an item from the pool (needs to be created as the pool is empty)
            var item1 = pool.Take();
            
            // get another item from the pool (needs to be created as the pool is empty)
            var item2 = pool.Take();
            
            // ... do something ...
            
            // return one of the items
            pool.Return(item2);
            
            // ... do something ...
            
            // get another item (the former item2 is recycled)
            var item3 = pool.Take();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.Pool`1.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Generic.Pool`1" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.Pool`1.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Generic.Pool`1" />.
            </summary>
            <param name="capacity"> The initial capacity of free items in the pool. </param>
            <remarks>
                <para>
                    <paramref name="capacity" /> is only a hint of the expected number of free items.
                    No free items are created so the initial count of free items in the pool is zero, regardless of the value of <paramref name="capacity" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.Pool`1.Create">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Collections.Generic.PoolBase`1">
            <summary>
                Implements a base class which can be used for <see cref="T:RI.Utilities.Collections.Generic.IPool`1" /> implementations.
            </summary>
            <typeparam name="T"> The type of objects which can be stored and recycled by the pool. </typeparam>
            <remarks>
                <para>
                    All pools derived from <see cref="T:RI.Utilities.Collections.Generic.PoolBase`1" /> support the <see cref="T:RI.Utilities.Collections.Generic.IPoolAware" /> interface.
                    See <see cref="T:RI.Utilities.Collections.Generic.IPoolAware" /> for more details about support of <see cref="T:RI.Utilities.Collections.Generic.IPoolAware" />.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Generic.PoolBase`1" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Generic.PoolBase`1" />.
            </summary>
            <param name="capacity"> The initial capacity of free items in the pool. </param>
            <remarks>
                <para>
                    <paramref name="capacity" /> is only a hint of the expected number of free items.
                    No free items are created so the initial count of free items in the pool is zero, regardless of the value of <paramref name="capacity" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.Create">
            <summary>
                Called when a new item needs to be created.
            </summary>
            <returns>
                The instance of the newly created item.
            </returns>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.OnCreated(`0)">
            <summary>
                Called when an item is created.
            </summary>
            <param name="item"> The item which is created. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.OnRemoved(`0)">
            <summary>
                Called when a free item is removed from the pool.
            </summary>
            <param name="item"> The free item which is removed from the pool. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.OnReturned(`0)">
            <summary>
                Called when an item is returned to the pool.
            </summary>
            <param name="item"> The item which is returned to the pool. </param>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.OnTaking(`0)">
            <summary>
                Called when an item is taken from the pool.
            </summary>
            <param name="item"> The item which is taken from the pool. </param>
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PoolBase`1.Count">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PoolBase`1.FreeItems">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.Clear">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of free items in the pool.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.Contains(`0)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of free items in the pool.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.Ensure(System.Int32)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of items which need to be created.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.Reduce(System.Int32)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of free items which need to be removed.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.Return(`0)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
                <note type="important">
                    To increase performance, this return operation does not check whether the item to be returned has already been returned previously.
                    Returning an item which is already been returned leads to unpredictable behaviour.
                    If a safe return operation, checking whether an item has already been returned or not, at the cost of performance, is required, use <see cref="M:RI.Utilities.Collections.Generic.IPoolExtensions.ReturnSafe``1(RI.Utilities.Collections.Generic.IPool{``0},``0)" /> instead.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="item" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.Take">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PoolBase`1.Take(System.Boolean@)">
            <inheritdoc />
            <remarks>
                <para>
                    This is a O(1) operation.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PoolBase`1.RI#Utilities#ObjectModel#ISynchronizable#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PoolBase`1.RI#Utilities#ObjectModel#ISynchronizable#SyncRoot">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Collections.Generic.PriorityQueue`1">
            <summary>
                Implements a simple priority queue.
            </summary>
            <typeparam name="T"> The type of items stored in the priority queue. </typeparam>
            <remarks>
                <para>
                    The performance of the priority queue degrades with the number of different priorities used.
                    Regardless of the actual numeric priority values or the distribution of the priority values respectively, a priority queue with, for example, 10 used priorities is on average 10 times faster than a priority queue with 100 used priorities.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.Collections.Generic.IPriorityQueue`1" /> for more details.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
             <![CDATA[
             // create a priority queue
             var queue = new PriorityQueue<string>();
             
             // add some items with different priorities
             queue.Enqueue("queue", 0);
             queue.Enqueue("this", 101);
             queue.Enqueue("a", 10);
             queue.Enqueue("is", 100);
             
             // dequeue items, we get: this, is, a, queue
             while(queue.Count > 0)
             {
            		string value = queue.Dequeue();
             }
             ]]>
             </code>
            </example>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Generic.PriorityQueue`1" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.CopyTo(`0[],System.Int32)">
            <inheritdoc cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PriorityQueue`1.Count">
            <inheritdoc />
            <value>
            The number of items contained in the priority queue.
            </value>
            <remarks>
                <para>
                    This is a O(x) operation where x is the number of priorities currently in use.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PriorityQueue`1.HighestPriority">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PriorityQueue`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PriorityQueue`1.LowestPriority">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PriorityQueue`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.Dequeue">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.Dequeue(System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.Enqueue(`0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.Enqueue(`0,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.MoveTo(RI.Utilities.Collections.Generic.PriorityQueue{`0})">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.Peek">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Generic.PriorityQueue`1.Peek(System.Int32@)">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PriorityQueue`1.RI#Utilities#ObjectModel#ISynchronizable#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Generic.PriorityQueue`1.RI#Utilities#ObjectModel#ISynchronizable#SyncRoot">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Collections.Generic.PriorityQueueRemovePredicate`1">
            <summary>
                Defines a delegate which can be used for priority queue removals using <see cref="M:RI.Utilities.Collections.Generic.IPriorityQueueExtensions.RemoveWhere``1(RI.Utilities.Collections.Generic.IPriorityQueue{``0},RI.Utilities.Collections.Generic.PriorityQueueRemovePredicate{``0})" />.
            </summary>
            <typeparam name="T"> The type of the items in the priority queue. </typeparam>
            <param name="item"> The item. </param>
            <param name="priority"> The priority of the item. </param>
            <returns>
                true if the item is to be removed, false otherwise.
            </returns>
        </member>
        <member name="T:RI.Utilities.Collections.Generic.NamespaceDoc">
            <summary>
                Contains new generic collection types.
            </summary>
        </member>
        <member name="T:RI.Utilities.Collections.ICollectionExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.ICollection`1" /> type and its implementations.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.ICollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds multiple items to a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="items"> The sequence of items to add to the collection. </param>
            <returns>
                The number of items added to the collection.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.ICollectionExtensions.AsCollection``1(System.Collections.Generic.ICollection{``0})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.ICollection`1" /> to an explicit <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The instance implementing <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.ICollection`1" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.ICollection`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.ICollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                Removes all occurences of an item from a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="item"> The item to remove from the collection. </param>
            <returns>
                The number of items removed from the collection.
            </returns>
            <remarks>
                <para>
                    <see cref="M:RI.Utilities.Collections.ICollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},``0)" /> is useful in situations where a collection can contain the same item multiple times and <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" /> only removes the first occurence.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.ICollectionExtensions.RemoveAllRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes all occurences of multiple items from a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="items"> The sequence of items to remove from the collection. </param>
            <returns>
                The number of items removed from the collection.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
                <para>
                    <see cref="M:RI.Utilities.Collections.ICollectionExtensions.RemoveAllRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})" /> is useful in situations where a collection can contain the same item multiple times and <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" /> only removes the first occurence.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.ICollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes multiple items from a collection.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="items"> The sequence of items to remove from the collection. </param>
            <returns>
                The number of items removed from the collection.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.ICollectionExtensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
                Removes all items from a collection which satisfy a condition.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="condition"> The function which tests each item for a condition, providing the item itself. </param>
            <returns>
                The list of removed items.
                The list is empty if no elements were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.ICollectionExtensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
                Removes all items from a collection which satisfy a condition.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="collection" />. </typeparam>
            <param name="collection"> The collection. </param>
            <param name="condition"> The function which tests each item for a condition, providing the items index and the item itself. </param>
            <returns>
                The list of removed items.
                The list is empty if no elements were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="collection" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.IDictionaryExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.IDictionary`2" /> type and its implementations.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.AddOrReplace``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds a new value to or replaces an existing value in a dictionary, based on the specified key.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key corresponding to the value to add or replace. </param>
            <param name="value"> The value to add or replace. </param>
            <returns>
                true if the key did not already exist in the dictionary and was added, false if the key already existed and the existing value was overwritten.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
                Adds multiple items to a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="keys"> The sequence of keys to add to the dictionary. </param>
            <param name="values"> The sequence of values to add to the dictionary. </param>
            <returns>
                The number of items added to the dictionary.
            </returns>
            <remarks>
                <para>
                    <paramref name="keys" /> and <paramref name="values" /> are enumerated and the first item in <paramref name="keys" /> is used as the key for the first item in <paramref name="values" /> and so forth.
                </para>
                <para>
                    The number of items in <paramref name="keys" /> and <paramref name="values" /> can be different.
                    If so, adding of items stops when the first of the two is done enumerating.
                </para>
                <para>
                    <paramref name="keys" /> and <paramref name="values" /> are enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" />, <paramref name="keys" />, or <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.AddRangeExact``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
                Adds multiple items to a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="keys"> The sequence of keys to add to the dictionary. </param>
            <param name="values"> The sequence of values to add to the dictionary. </param>
            <returns>
                The number of items added to the dictionary.
            </returns>
            <remarks>
                <para>
                    <paramref name="keys" /> and <paramref name="values" /> are enumerated and the first item in <paramref name="keys" /> is used as the key for the first item in <paramref name="values" /> and so forth.
                </para>
                <para>
                    The number of items in <paramref name="keys" /> and <paramref name="values" /> must match, otherwise an <see cref="T:System.ArgumentException" /> is thrown.
                </para>
                <para>
                    <paramref name="keys" /> and <paramref name="values" /> are enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" />, <paramref name="keys" />, or <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="keys" /> and <paramref name="values" /> do not contain the same amount of items. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.AsDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.IDictionary`2" /> to an explicit <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The instance implementing <see cref="T:System.Collections.Generic.IDictionary`2" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.IDictionary`2" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.IDictionary`2" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether a dictionary contains a specified key.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to find in the dictionary. </param>
            <param name="comparer"> The equality comparer used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the key, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
                Determines whether a dictionary contains a specified key.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to find in the dictionary. </param>
            <param name="comparer"> The function used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the key, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.ContainsValue``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
                Determines whether a dictionary contains a specified value.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="value"> The value to find in the dictionary. </param>
            <returns>
                true if the dictionary contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.ContainsValue``2(System.Collections.Generic.IDictionary{``0,``1},``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Determines whether a dictionary contains a specified value.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="value"> The value to find in the dictionary. </param>
            <param name="comparer"> The equality comparer used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.ContainsValue``2(System.Collections.Generic.IDictionary{``0,``1},``1,System.Func{``1,``1,System.Boolean})">
            <summary>
                Determines whether a dictionary contains a specified value.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="value"> The value to find in the dictionary. </param>
            <param name="comparer"> The function used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.GetKeys``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Gets all keys of a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <returns>
                The list which contains all the keys of the dictionary.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.GetKeys``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Gets all keys of a dictionary where the key-value-pair satisfy a specified condition.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="condition"> The function which tests each key-value-pair for a condition. </param>
            <returns>
                The list which contains all the keys of the dictionary where the corresponding key-value-pair satisfied the specified condition.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
                Gets a value from a dictionary or the default value if the key does not exist in the dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to get its value of. </param>
            <returns>
                The value or default value of <typeparamref name="TValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Gets a value from a dictionary or a default value if the key does not exist in the dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to get its value of. </param>
            <param name="defaultValue"> The default value to use if the key does not exist in the dictionary. </param>
            <returns>
                The value or <paramref name="defaultValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.GetValues``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
                Gets all values of a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <returns>
                The list which contains all the values of the dictionary.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.GetValues``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Gets all values of a dictionary where the key-value-pair satisfy a specified condition.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="condition"> The function which tests each key-value-pair for a condition. </param>
            <returns>
                The list which contains all the values of the dictionary where the corresponding key-value-pair satisfied the specified condition.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.RemoveRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes multiple key-value-pairs based on multiple keys from a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="keys"> The sequence of keys to remove from the dictionary. </param>
            <returns>
                The number of key-value-pairs removed from the dictionary.
            </returns>
            <remarks>
                <para>
                    <paramref name="keys" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="keys" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.RemoveWhere``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Removes all key-value-pairs from a dictionary which satisfy a specified condition.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="condition"> The function which tests each key-value-pair for a condition. </param>
            <returns>
                The list of key-value-pairs removed from the dictionary.
                The list is empty if no key-value-pairs were removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.Transform``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``1})">
            <summary>
                Transforms the value of each key-value-pair in a dictionary according to a specified transform function.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="transform"> The transform function which determines a new value for each key-value-pair in the dictionary. </param>
            <returns>
                The number of transformed key-value-pairs.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="transform" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IDictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
                Adds a new value to a dictionary if the specified key does not already exist in the dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to add. </param>
            <param name="value"> The value to add. </param>
            <returns>
                true if the key did not already exist in the dictionary and was added, false if the key already existed and the existing value was not overwritten.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.IEnumerableExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1" /> type and its implementations.
            </summary>
            <remarks>
                    <note type="important">
                        The complexity stated for the operations provided by this class are under the assumption that enumerating an <see cref="T:System.Collections.Generic.IEnumerable`1" /> has a complexity of O(n) where n is the number of elements in the sequence.
                    </note>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: ToListList
            TODO: ToListSet
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.IEnumerable`1" /> to an explicit <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The instance implementing <see cref="T:System.Collections.Generic.IEnumerable`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.IEnumerable`1" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.IEnumerable`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Executes a specified action on each element of a sequence.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="action"> The action to execute for each element, providing the element itself. </param>
            <returns>
                The number of processed elements.
                Zero if the sequence is empty.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="action" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
                Executes a specified action on each element of a sequence.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="action"> The action to execute for each element, providing the elements index and the element itself. </param>
            <returns>
                The number of processed elements.
                Zero if the sequence is empty.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="action" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n+m) operation, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" /> or <paramref name="y" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},RI.Utilities.Comparison.CollectionComparerFlags)">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="options"> The options which specify comparison options. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" /> or <paramref name="y" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequences to look for matches. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" />, <paramref name="y" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="comparer"> The function used to compare the elements in the sequences to look for matches. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" />, <paramref name="y" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},RI.Utilities.Comparison.CollectionComparerFlags,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="options"> The options which specify comparison options. </param>
            <param name="comparer"> The equality comparer used to compare the elements in the sequences to look for matches. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" />, <paramref name="y" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},RI.Utilities.Comparison.CollectionComparerFlags,System.Func{``0,``0,System.Boolean})">
            <summary>
                Compares two sequences and determines whether they contain the same elements.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="x" /> and <paramref name="y" />. </typeparam>
            <param name="x"> The first of the two sequences whose elements are compared against the elements of <paramref name="y" />. </param>
            <param name="y"> The second of the two sequences whose elements are compared against the elements of <paramref name="x" />. </param>
            <param name="options"> The options which specify comparison options. </param>
            <param name="comparer"> The function used to compare the elements in the sequences to look for matches. </param>
            <returns>
                true if both sequences are equal or contain the same elements respectively.
            </returns>
            <remarks>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="x" />, <paramref name="y" />, or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Converts a sequence to a new array, starting at a specified index.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index from which the elements are copied to the array. </param>
            <returns>
                An array which contains all elements of the sequence, starting at the specified index, in the order they were enumerated.
                The array has a length of zero if the sequence contains no elements or the specified index is outside the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
                Converts a sequence to a new array, starting at a specified index for a specified number of elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index from which the elements are copied to the array. </param>
            <param name="count"> The number of elements to copy to the array, starting at the specified index. </param>
            <returns>
                An array which contains the specified number of elements of the sequence, starting at the specified index, in the order they were enumerated.
                The array has a length of zero if the sequence contains no elements, the specified index is outside the sequence, or <paramref name="count" /> is zero.
                If the range specified by <paramref name="index" /> and <paramref name="count" /> reaches outside the sequence, the array stops at the last element of the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the last element in the range specified by <paramref name="index" /> and <paramref name="count" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ToDictionaryList``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can be assigned to one or more elements.
                Key equality is checked using the default equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs where each value is a list of values derived from the elements which have the same key derived/assigned.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="mapper" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ToDictionaryList``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can be assigned to one or more elements.
                Key equality is checked using the specified equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="keyComparer"> The equality comparer for the keys, used by the returned dictionary. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs where each value is a list of values derived from the elements which have the same key derived/assigned.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" />, <paramref name="keyComparer" />, or <paramref name="mapper" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ToDictionarySet``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can be assigned to one or more elements.
                Key equality is checked using the default equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs where each value is a set of values derived from the elements which have the same key derived/assigned.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> or <paramref name="mapper" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ToDictionarySet``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2},System.Func{``0,System.Collections.Generic.KeyValuePair{``1,``2}})">
            <summary>
                Converts a sequence to a dictionary by deriving a key from each element.
                Each key can be assigned to one or more elements.
                Key equality is checked using the specified equality comparer for the key type.
            </summary>
            <typeparam name="TIn"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <typeparam name="TKey"> The type of the derived keys in the dictionary. </typeparam>
            <typeparam name="TValue"> The type of the values in the dictionary. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="keyComparer"> The equality comparer for the keys, used by the returned dictionary. </param>
            <param name="setComparer"> The equality comparer for the values, used by the sets in the returned dictionary. </param>
            <param name="mapper"> The function which derives a key and a value for each element in the sequence. </param>
            <returns>
                The dictionary which contains the key-value-pairs where each value is a set of values derived from the elements which have the same key derived/assigned.
                The dictionary is empty if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n^2) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" />, <paramref name="keyComparer" />, <paramref name="setComparer" />, or <paramref name="mapper" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ToGenericList(System.Collections.IEnumerable)">
            <summary>
                Converts a non-generic sequence to a new list.
            </summary>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <returns>
                A list which contains all elements of the sequence in the order they were enumerated.
                The list has a length of zero if the sequence contains no elements.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Converts a sequence to a new list, starting at a specified index.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index from which the elements are copied to the list. </param>
            <returns>
                A list which contains all elements of the sequence, starting at the specified index, in the order they were enumerated.
                The list has a length of zero if the sequence contains no elements or the specified index is outside the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IEnumerableExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
                Converts a sequence to a new list, starting at a specified index for a specified number of elements.
            </summary>
            <typeparam name="T"> The type of the elements of <paramref name="enumerable" />. </typeparam>
            <param name="enumerable"> The sequence which contains the elements. </param>
            <param name="index"> The index from which the elements are copied to the list. </param>
            <param name="count"> The number of elements to copy to the list, starting at the specified index. </param>
            <returns>
                A list which contains the specified number of elements of the sequence in the order they were enumerated.
                The list has a length of zero if the sequence contains no elements, the specified index is outside the sequence, or <paramref name="count" /> is zero.
                If the range specified by <paramref name="index" /> and <paramref name="count" /> reaches outside the sequence, the list stops at the last element of the sequence.
            </returns>
            <remarks>
                <para>
                    This is a O(n) operation where n is the number of elements in the sequence.
                </para>
                <para>
                    <paramref name="enumerable" /> is enumerated only once and only up to the last element in the range specified by <paramref name="index" /> and <paramref name="count" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="enumerable" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> or <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.IListExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.IList`1" /> type and its implementations.
            </summary>
            <threadsafety static="false" instance="false" />
            TODO: ShuffleRange
            TODO: ReverseRange
            TODO: SortRange
            TODO: TransformRange
            TODO: InsertRandom
            TODO: Add overloads for all random methods with default randomizer
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.AsList``1(System.Collections.Generic.IList{``0})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.IList`1" /> to an explicit <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The instance implementing <see cref="T:System.Collections.Generic.IList`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.IList`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.IList`1" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.IList`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.GetIndexOrDefault``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Gets the item at the specified index or the default value if the index is outside the range of the list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <returns>
                The value or default value of <typeparamref name="T" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.GetIndexOrDefault``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
                Gets the item at the specified index or a default value if the index is outside the range of the list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <param name="defaultValue"> The default value to use if the index is outside the range of the list. </param>
            <returns>
                The value or <paramref name="defaultValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.InsertRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Inserts multiple items into a list at the specified index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index at which the items are inserted. </param>
            <param name="items"> The sequence of items to insert into the list. </param>
            <returns>
                The number of items inserted into the list.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="items" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero or bigger than the size of the list. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Peek``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Gets the item at the specified index without removing it.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <returns>
                The item at the specified index.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="list" /> contains no elements. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.PeekClamp``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Gets the item at the specified index without removing it after clamping the index to the size of the list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <returns>
                The item at the specified index.
            </returns>
            <remarks>
                <para>
                    Before used to access the list, <paramref name="index" /> is clamped between zero and the size of the list minus one.
                    If the list does not contain any elements, <see cref="T:System.InvalidOperationException" /> is thrown.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="list" /> contains no elements. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.PeekRandom``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
                Gets an item at a random position without removing it.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="randomizer"> The randomizer which is used for generating the random position. </param>
            <returns>
                An item at a random index.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="list" /> contains no elements. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Pop``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Gets and removes the item at the specified index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <returns>
                The item at the specified index.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="list" /> contains no elements. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.PopClamp``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Gets and removes the item at the specified index after clamping the index to the size of the list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <returns>
                The item at the specified index.
            </returns>
            <remarks>
                <para>
                    Before used to access the list, <paramref name="index" /> is clamped between zero and the size of the list minus one.
                    If the list does not contain any elements, <see cref="T:System.InvalidOperationException" /> is thrown.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="list" /> contains no elements. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.PopRandom``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
                Gets and removes an item at a random position.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="randomizer"> The randomizer which is used for generating the random position. </param>
            <returns>
                An item at a random index.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="list" /> contains no elements. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.RemoveAtRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Removes a defined amount of items from a list at the specified index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index at which the remove of the items start. </param>
            <param name="count"> The number of items to remove beginning at the specified index. </param>
            <returns>
                The number of items removed from the list.
            </returns>
            <remarks>
                <para>
                    If the range defined by <paramref name="index" /> and <paramref name="count" /> reaches outside the size of the list, all items from <paramref name="index" /> to the end of the list are removed.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero or bigger or equal than the size of the list, or <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.RemoveAtRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Removes multiple items at specified indices from a list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indices"> The sequence of indices to be removed from the list. </param>
            <returns>
                The number of items removed from the list.
                Zero if the sequence of indices contains no elements.
            </returns>
            <remarks>
                <para>
                    Before the indices are removed, they need to be de-duplicated and sorted, adding non-obvious overhead.
                    This is done by automatically.
                </para>
                <para>
                    <paramref name="indices" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="indices" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> At least one index in <paramref name="indices" /> is invalid. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
                Reverses the order of the items of a list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <returns>
                The number of reversed items.
            </returns>
            <remarks>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the reversing is not done in-place.
                    Instead, all items are copied and then reversed, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
                Puts all items in a list in random order.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="randomizer"> The randomizer which is used for randomizing the indices of the items. </param>
            <returns>
                The number of items put into random order.
            </returns>
            <remarks>
                <para>
                    The list is completely shuffled.
                </para>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the shuffling is not done in-place.
                    Instead, all items are copied and then shuffled, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random,System.Int32)">
            <summary>
                Puts all items in a list in random order.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="randomizer"> The randomizer which is used for randomizing the indices of the items. </param>
            <param name="shakes"> The number of times the list is &quot;shaked&quot;. </param>
            <returns>
                The number of items put into random order.
            </returns>
            <remarks>
                <para>
                    The list is partially shuffled.
                    That means that each item is moved randomly away from its original index.
                    The more <paramref name="shakes" />, the farther away an item might move from its original position.
                    A <paramref name="shakes" /> of zero means that the list remains the same and no items are shuffled.
                </para>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the shuffling is not done in-place.
                    Instead, all items are copied and then shuffled, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="shakes" /> is below zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
                Sorts the items of a list.
                Comparison is done using the default order comparison.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="ascending"> Specifies whether the sorting is done in ascending order (descending order otherwise). </param>
            <returns>
                The number of sorted items.
            </returns>
            <remarks>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the sorting is not done in-place.
                    Instead, all items are copied and then sorted, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Boolean,System.Collections.Generic.IComparer{``0})">
            <summary>
                Sorts the items of a list.
                Comparison is done using the specified order comparer.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="ascending"> Specifies whether the sorting is done in ascending order (descending order otherwise). </param>
            <param name="comparer"> The order comparer used to compare two items. </param>
            <returns>
                The number of sorted items.
            </returns>
            <remarks>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the sorting is not done in-place.
                    Instead, all items are copied and then sorted, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Sort``1(System.Collections.Generic.IList{``0},System.Boolean,System.Func{``0,``0,System.Int32})">
            <summary>
                Sorts the items of a list.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="ascending"> Specifies whether the sorting is done in ascending order (descending order otherwise). </param>
            <param name="comparer"> The function used to compare two items. </param>
            <returns>
                The number of sorted items.
            </returns>
            <remarks>
                <para>
                    Since the behaviour of the actual type of <paramref name="list" /> is not known, the sorting is not done in-place.
                    Instead, all items are copied and then sorted, the list cleared, and then all sorted items are added again.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.SwapDefault``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Swaps two items in a list specified by their index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indexA"> The index of the first item to swap. </param>
            <param name="indexB"> The index of the second item to swap. </param>
            <remarks>
                <para>
                    The swapping is done by copying the first and second item, then replacing the first and second item with default(<typeparamref name="T" />), and then replacing the first and second item with the swapped and copied items.
                    Therefore, briefly during the swapping, the list does not contain the first and second item but twice default(<typeparamref name="T" />) in their place.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="indexA" /> or <paramref name="indexB" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.SwapDefault``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
                Swaps two items in a list specified by their index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indexA"> The index of the first item to swap. </param>
            <param name="indexB"> The index of the second item to swap. </param>
            <param name="defaultValue"> The default value which is used as a placeholder during the swapping. </param>
            <remarks>
                <para>
                    The swapping is done by copying the first and second item, then replacing the first and second item with the value of <paramref name="defaultValue" />, and then replacing the first and second item with the swapped and copied items.
                    Therefore, briefly during the swapping, the list does not contain the first and second item but twice the value of <paramref name="defaultValue" /> in their place.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="indexA" /> or <paramref name="indexB" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.SwapInPlace``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Swaps two items in a list specified by their index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indexA"> The index of the first item to swap. </param>
            <param name="indexB"> The index of the second item to swap. </param>
            <remarks>
                <para>
                    The swapping is done by copying the first item, then replacing the first item with the second item, and then replacing the second item with the copied first item.
                    Therefore, briefly during the swapping, the list does not contain the first item but twice the second item.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="indexA" /> or <paramref name="indexB" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.SwapInsert``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Swaps two items in a list specified by their index.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="indexA"> The index of the first item to swap. </param>
            <param name="indexB"> The index of the second item to swap. </param>
            <remarks>
                <para>
                    The swapping is done by copying the first and second item, then removing the first and second item, and then inserting the first and second item at their swapped indices.
                    Therefore, briefly during the swapping, the list does not contain the first and second item and the list therefore changes size during the swapping.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="indexA" /> or <paramref name="indexB" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Transform``1(System.Collections.Generic.IList{``0},System.Func{``0,``0})">
            <summary>
                Transforms each item in a list according to a specified transform function.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="transform"> The transform function which determines a new value for each item in the list, providing the item itself. </param>
            <returns>
                The number of transformed items.
            </returns>
            <remarks>
                <para>
                    The transformation is done in-place where the new transformed value replaces the existing value at the same index.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="transform" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.Transform``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,``0,``0})">
            <summary>
                Transforms each item in a list according to a specified transform function.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="transform"> The transform function which determines a new value for each item in the list, providing the items index and the item itself. </param>
            <returns>
                The number of transformed items.
            </returns>
            <remarks>
                <para>
                    The transformation is done in-place where the new transformed value replaces the existing value at the same index.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> or <paramref name="transform" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IListExtensions.TryGetIndex``1(System.Collections.Generic.IList{``0},System.Int32,``0@)">
            <summary>
                Gets the item at the specified index if that index exists.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <param name="item"> Receives the item if the index is valid, default(<typeparamref name="T" />) otherwise. </param>
            <returns>
                true if the index is valid, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.IReadOnlyDictionaryExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> type and its implementations.
            </summary>
            <remarks>
                <para>
                    The <c> Ro </c> prefix is added to some extension methods to avoid ambiguity with extension methods from <see cref="T:RI.Utilities.Collections.IDictionaryExtensions" />.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.AsReadOnlyDictionary``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> to an explicit <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The instance implementing <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
                Determines whether a dictionary contains a specified key.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to find in the dictionary. </param>
            <param name="comparer"> The equality comparer used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the key, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
                Determines whether a dictionary contains a specified key.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to find in the dictionary. </param>
            <param name="comparer"> The function used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the key, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoContainsValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``1)">
            <summary>
                Determines whether a dictionary contains a specified value.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="value"> The value to find in the dictionary. </param>
            <returns>
                true if the dictionary contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoContainsValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Determines whether a dictionary contains a specified value.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="value"> The value to find in the dictionary. </param>
            <param name="comparer"> The equality comparer used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoContainsValue``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``1,System.Func{``1,``1,System.Boolean})">
            <summary>
                Determines whether a dictionary contains a specified value.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="value"> The value to find in the dictionary. </param>
            <param name="comparer"> The function used to compare the specified key and the keys in the dictionary to look for a match. </param>
            <returns>
                true if the dictionary contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoGetKeys``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
                Gets all keys of a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <returns>
                The list which contains all the keys of the dictionary.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoGetKeys``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Gets all keys of a dictionary where the key-value-pair satisfy a specified condition.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="condition"> The function which tests each key-value-pair for a condition. </param>
            <returns>
                The list which contains all the keys of the dictionary where the corresponding key-value-pair satisfied the specified condition.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoGetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
                Gets a value from a dictionary or the default value if the key does not exist in the dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to get its value of. </param>
            <returns>
                The value or default value of <typeparamref name="TValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoGetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
                Gets a value from a dictionary or a default value if the key does not exist in the dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="key"> The key to get its value of. </param>
            <param name="defaultValue"> The default value to use if the key does not exist in the dictionary. </param>
            <returns>
                The value or <paramref name="defaultValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoGetValues``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <summary>
                Gets all values of a dictionary.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <returns>
                The list which contains all the values of the dictionary.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadOnlyDictionaryExtensions.RoGetValues``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
                Gets all values of a dictionary where the key-value-pair satisfy a specified condition.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="dictionary" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="dictionary" />. </typeparam>
            <param name="dictionary"> The dictionary. </param>
            <param name="condition"> The function which tests each key-value-pair for a condition. </param>
            <returns>
                The list which contains all the values of the dictionary where the corresponding key-value-pair satisfied the specified condition.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dictionary" /> or <paramref name="condition" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.IReadonlyListExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> type and its implementations.
            </summary>
            <remarks>
                <para>
                    The <c> Ro </c> prefix is added to some extension methods to avoid ambiguity with extension methods from <see cref="T:RI.Utilities.Collections.IListExtensions" />.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Add overloads for all random methods with default randomizer
        </member>
        <member name="M:RI.Utilities.Collections.IReadonlyListExtensions.AsReadOnlyList``1(System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> to an explicit <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The instance implementing <see cref="T:System.Collections.Generic.IReadOnlyList`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadonlyListExtensions.RoGetIndexOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
                Gets the item at the specified index or the default value if the index is outside the range of the list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <returns>
                The value or default value of <typeparamref name="T" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadonlyListExtensions.RoGetIndexOrDefault``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,``0)">
            <summary>
                Gets the item at the specified index or a default value if the index is outside the range of the list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <param name="defaultValue"> The default value to use if the index is outside the range of the list. </param>
            <returns>
                The value or <paramref name="defaultValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadonlyListExtensions.RoPeek``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
                Gets the item at the specified index without removing it.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <returns>
                The item at the specified index.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="list" /> contains no elements. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero or bigger or equal to the size of the list. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadonlyListExtensions.RoPeekClamp``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32)">
            <summary>
                Gets the item at the specified index without removing it after clamping the index to the size of the list.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <returns>
                The item at the specified index.
            </returns>
            <remarks>
                <para>
                    Before used to access the list, <paramref name="index" /> is clamped between zero and the size of the list minus one.
                    If the list does not contain any elements, <see cref="T:System.InvalidOperationException" /> is thrown.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="list" /> contains no elements. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadonlyListExtensions.RoPeekRandom``1(System.Collections.Generic.IReadOnlyList{``0},System.Random)">
            <summary>
                Gets an item at a random position without removing it.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="randomizer"> The randomizer which is used for generating the random position. </param>
            <returns>
                An item at a random index.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="list" /> contains no elements. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.IReadonlyListExtensions.RoTryGetIndex``1(System.Collections.Generic.IReadOnlyList{``0},System.Int32,``0@)">
            <summary>
                Gets the item at the specified index if that index exists.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The list. </param>
            <param name="index"> The index of the item to retrieve. </param>
            <param name="item"> Receives the item if the index is valid, default(<typeparamref name="T" />) otherwise. </param>
            <returns>
                true if the index is valid, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.ISetExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.ISet`1" /> type and its implementations.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.ISetExtensions.AddRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Adds multiple items to a set.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="set" />. </typeparam>
            <param name="set"> The set. </param>
            <param name="items"> The sequence of items to add to the set. </param>
            <returns>
                The number of items added to the set.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="set" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.ISetExtensions.AsSet``1(System.Collections.Generic.ISet{``0})">
            <summary>
                Converts any instance implementing <see cref="T:System.Collections.Generic.ISet`1" /> to an explicit <see cref="T:System.Collections.Generic.ISet`1" />.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="set" />. </typeparam>
            <param name="set"> The instance implementing <see cref="T:System.Collections.Generic.ISet`1" />. </param>
            <returns>
                The instance as explicit <see cref="T:System.Collections.Generic.ISet`1" />.
            </returns>
            <remarks>
                <para>
                    A conversion to an explicit <see cref="T:System.Collections.Generic.ISet`1" /> can be useful in cases where the utility/extension methods of <see cref="T:System.Collections.Generic.ISet`1" /> shall be used instead of the ones implemented by the instance itself.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="set" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.ISetExtensions.RemoveRange``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes multiple items from a set.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="set" />. </typeparam>
            <param name="set"> The set. </param>
            <param name="items"> The sequence of items to remove from the set. </param>
            <returns>
                The number of items removed from hash set.
            </returns>
            <remarks>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="set" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.KeyedCollectionExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> type.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.KeyedCollectionExtensions.ContainsKey``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``0)">
            <summary>
                Determines whether a keyed collection contains a specified key.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="keyedCollection" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="keyedCollection" />. </typeparam>
            <param name="keyedCollection"> The keyed collection. </param>
            <param name="key"> The key to find in the keyed collection. </param>
            <returns>
                true if the keyed collection contains the key, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="keyedCollection" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.KeyedCollectionExtensions.ContainsValue``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``1)">
            <summary>
                Determines whether a keyed collection contains a specified value.
                Comparison is done using the default equality comparison.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="keyedCollection" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="keyedCollection" />. </typeparam>
            <param name="keyedCollection"> The keyed collection. </param>
            <param name="value"> The value to find in the keyed collection. </param>
            <returns>
                true if the keyed collection contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="keyedCollection" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.KeyedCollectionExtensions.ContainsValue``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
                Determines whether a keyed collection contains a specified value.
                Comparison is done using the specified equality comparer.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="keyedCollection" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="keyedCollection" />. </typeparam>
            <param name="keyedCollection"> The keyed collection. </param>
            <param name="value"> The value to find in the keyed collection. </param>
            <param name="comparer"> The equality comparer used to compare the specified key and the keys in the keyed collection to look for a match. </param>
            <returns>
                true if the keyed collection contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="keyedCollection" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.KeyedCollectionExtensions.ContainsValue``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``1,System.Func{``1,``1,System.Boolean})">
            <summary>
                Determines whether a keyed collection contains a specified value.
                Comparison is done using the specified function.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="keyedCollection" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="keyedCollection" />. </typeparam>
            <param name="keyedCollection"> The keyed collection. </param>
            <param name="value"> The value to find in the keyed collection. </param>
            <param name="comparer"> The function used to compare the specified key and the keys in the keyed collection to look for a match. </param>
            <returns>
                true if the keyed collection contains the value at least once, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="keyedCollection" /> or <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.KeyedCollectionExtensions.GetValueOrDefault``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``0)">
            <summary>
                Gets a value from a keyed collection or the default value if the key does not exist in the keyed collection.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="keyedCollection" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="keyedCollection" />. </typeparam>
            <param name="keyedCollection"> The keyed collection. </param>
            <param name="key"> The key to get its value of. </param>
            <returns>
                The value or default value of <typeparamref name="TValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="keyedCollection" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.KeyedCollectionExtensions.GetValueOrDefault``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``0,``1)">
            <summary>
                Gets a value from a keyed collection or a default value if the key does not exist in the keyed collection.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="keyedCollection" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="keyedCollection" />. </typeparam>
            <param name="keyedCollection"> The keyed collection. </param>
            <param name="key"> The key to get its value of. </param>
            <param name="defaultValue"> The default value to use if the key does not exist in the keyed collection. </param>
            <returns>
                The value or <paramref name="defaultValue" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="keyedCollection" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.KeyedCollectionExtensions.RemoveRange``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Removes multiple key-value-pairs based on multiple keys from a keyed collection.
            </summary>
            <typeparam name="TKey"> The type of the keys in <paramref name="keyedCollection" />. </typeparam>
            <typeparam name="TValue"> The type of the values in <paramref name="keyedCollection" />. </typeparam>
            <param name="keyedCollection"> The keyed collection. </param>
            <param name="keys"> The sequence of keys to remove from the keyed collection. </param>
            <returns>
                The number of key-value-pairs removed from the keyed collection.
            </returns>
            <remarks>
                <para>
                    <paramref name="keys" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="keyedCollection" /> or <paramref name="keys" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.LinkedListExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.LinkedList`1" /> type.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.LinkedListExtensions.AsItemsBackward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Enumerates the items of a linked list backwards.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> which enumerates the linked list items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.LinkedListExtensions.AsItemsForward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Enumerates the items of a linked list forwards.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> which enumerates the linked list nodes.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.LinkedListExtensions.AsNodesBackward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Allows a linked list to be enumerated as its nodes, starting at the last node, rather than its values.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> which enumerates the linked list nodes.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.LinkedListExtensions.AsNodesForward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Allows a linked list to be enumerated as its nodes, starting at the first node, rather than its values.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" /> which enumerates the linked list nodes.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.LinkedListExtensions.ToItemsBackward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Creates a list of items from a linked list when enumerated backward.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The list of items when enumerated backward.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.LinkedListExtensions.ToItemsForward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Creates a list of items from a linked list when enumerated forward.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The list of items when enumerated forward.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.LinkedListExtensions.ToNodesBackward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Creates a list of nodes from a linked list when enumerated backward.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The list of nodes when enumerated backward.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.LinkedListExtensions.ToNodesForward``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
                Creates a list of nodes from a linked list when enumerated forward.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="list" />. </typeparam>
            <param name="list"> The linked list. </param>
            <returns>
                The list of nodes when enumerated forward.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="list" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.QueueExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.Queue`1" /> type.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.QueueExtensions.DequeueAll``1(System.Collections.Generic.Queue{``0})">
            <summary>
                Gets all the items from a queue in the order they are dequeue'ed and removes them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="queue" />. </typeparam>
            <param name="queue"> The queue. </param>
            <returns>
                The list which contains all the items of the queue in the order they are dequeue'ed.
                The list is empty if the queue contains no items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queue" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.QueueExtensions.DequeueInto``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
                Gets all the items from a queue in the order they are dequeue'ed and removes them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="queue" />. </typeparam>
            <param name="queue"> The queue. </param>
            <param name="collection"> The collection the dequeued items are put into. </param>
            <returns>
                The number of dequeued items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queue" /> or <paramref name="collection" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.QueueExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Enqueues multiple items to a queue.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="queue" />. </typeparam>
            <param name="queue"> The queue. </param>
            <param name="items"> The sequence of items to enqueue to the queue. </param>
            <returns>
                The number of items enqueued to the queue.
            </returns>
            <remarks>
                <para>
                    The items in <paramref name="items" /> are enqueued in the order they are enumerated.
                </para>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queue" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.QueueExtensions.PeekAll``1(System.Collections.Generic.Queue{``0})">
            <summary>
                Gets all the items from a queue in the order they would be dequeue'ed without removing them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="queue" />. </typeparam>
            <param name="queue"> The queue. </param>
            <returns>
                The list which contains all the items of the queue in the order they would be dequeue'ed.
                The list is empty if the queue contains no items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="queue" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.Specialized.ClonePool`1">
            <summary>
                Implements a pool which creates items by cloning from a prototype.
            </summary>
            <typeparam name="T"> The type of objects which can be stored and recycled by the pool. </typeparam>
            <remarks>
                <para>
                    The prototype can be any object which implements <see cref="T:System.ICloneable" /> or <see cref="T:RI.Utilities.ObjectModel.ICloneable`1" />.
                    <see cref="M:System.ICloneable.Clone" /> or <see cref="M:RI.Utilities.ObjectModel.ICloneable`1.Clone" /> is used to create new items from the prototype.
                </para>
                <para>
                    The prototype itself is never used as an item or taken from the pool respectively, it is only used for cloning.
                </para>
                <para>
                    This pool implementation supports <see cref="T:RI.Utilities.Collections.Generic.IPoolAware" />.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.Collections.Generic.PoolBase`1" /> for more details.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
            <![CDATA[
            // create a pool with a cloneable prototype (which must implement ICloneable)
            var pool = new ClonePool<MyObject>(new MyObject(some, constructor, parameters));
            
            // get some cloned items
            var item1 = pool.Take();
            var item2 = pool.Take();
            var item3 = pool.Take();
            
            // ... do something ...
            
            // return one of the items
            pool.Return(item2);
            
            // ... do something ...
            
            // get another item (the former item2 is recycled)
            var item4 = pool.Take();
            ]]>
            </code>
            </example>
        </member>
        <member name="M:RI.Utilities.Collections.Specialized.ClonePool`1.#ctor(`0)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Specialized.ClonePool`1" />.
            </summary>
            <param name="prototype"> The prototype object the items of this pool are cloned from. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="prototype" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Specialized.ClonePool`1.#ctor(`0,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Specialized.ClonePool`1" />.
            </summary>
            <param name="prototype"> The prototype object the items of this pool are cloned from. </param>
            <param name="count"> The amount of initial free items in the pool. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="prototype" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="P:RI.Utilities.Collections.Specialized.ClonePool`1.Prototype">
            <summary>
                Gets the original prototype from which all the items of this pool are cloned from.
            </summary>
            <value>
                The original prototype from which all the items of this pool are cloned from.
            </value>
            <remarks>
                <note type="important">
                    Be careful when manipulating the prototype.
                    Already cloned items are not affected, only items made after the manipulation.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Specialized.ClonePool`1.Create">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Collections.Specialized.NamespaceDoc">
            <summary>
                Contains new typed collection types of generic collections.
            </summary>
        </member>
        <member name="T:RI.Utilities.Collections.StackExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Collections.Generic.Stack`1" /> type.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Collections.StackExtensions.PeekAll``1(System.Collections.Generic.Stack{``0})">
            <summary>
                Gets all the items from a stack in the order they would be pop'ed without removing them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="stack" />. </typeparam>
            <param name="stack"> The stack. </param>
            <returns>
                The list which contains all the items of the stack in the order they would be pop'ed.
                The list is empty if the stack contains no items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stack" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.StackExtensions.PopAll``1(System.Collections.Generic.Stack{``0})">
            <summary>
                Gets all the items from a stack in the order they are pop'ed and removes them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="stack" />. </typeparam>
            <param name="stack"> The stack. </param>
            <returns>
                The list which contains all the items of the stack in the order they are pop'ed.
                The list is empty if the stack contains no items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stack" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.StackExtensions.PopInto``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
                Gets all the items from a stack in the order they are pop'ed and removes them.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="stack" />. </typeparam>
            <param name="stack"> The stack. </param>
            <param name="collection"> The collection the popped items are put into. </param>
            <returns>
                The number of popped items.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stack" /> or <paramref name="collection" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.StackExtensions.PushRange``1(System.Collections.Generic.Stack{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Pushes multiple items to a stack.
            </summary>
            <typeparam name="T"> The type of the items in <paramref name="stack" />. </typeparam>
            <param name="stack"> The stack. </param>
            <param name="items"> The sequence of items to push to the stack. </param>
            <returns>
                The number of items pushed to the stack.
            </returns>
            <remarks>
                <para>
                    The items in <paramref name="items" /> are pushed in the order they are enumerated.
                </para>
                <para>
                    <paramref name="items" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stack" /> or <paramref name="items" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Collections.Virtualization.IItemsProvider`1">
            <summary>
                Defines the interface for a data source which provides data or items respectively to a <see cref="T:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1" />.
            </summary>
            <typeparam name="T"> The type of items loaded by this data source. </typeparam>
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.IItemsProvider`1.GetCount">
            <summary>
                Gets the total number of items.
            </summary>
            <returns>
                The total number of items.
            </returns>
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.IItemsProvider`1.GetItems(System.Int32,System.Int32)">
            <summary>
                Gets the items in the specified range.
            </summary>
            <param name="start"> The start index of the first item. </param>
            <param name="count"> The number of items to get. </param>
            <returns>
                A sequence which can be enumerated to actually load the items.
            </returns>
            <remarks>
                <note type="important">
                    The number of elements in the sequence is not necessarily <paramref name="count" /> but guaranteed to be less or equal.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.IItemsProvider`1.Search(`0)">
            <summary>
                Searches the data source for a specified item.
            </summary>
            <param name="item"> The item to search for. </param>
            <returns>
                The index of the item or -1 if the item could not be found.
            </returns>
        </member>
        <member name="T:RI.Utilities.Collections.Virtualization.INotifyItemsProvider`1">
            <summary>
                Defines the interface of an <see cref="T:RI.Utilities.Collections.Virtualization.IItemsProvider`1" /> which also supports notification when the items in the data source have changed.
            </summary>
            <typeparam name="T"> The type of items loaded by this data source. </typeparam>
        </member>
        <member name="E:RI.Utilities.Collections.Virtualization.INotifyItemsProvider`1.ItemsChanged">
            <summary>
                Raised when the data source detects that the items have changed.
            </summary>
        </member>
        <member name="T:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1">
            <summary>
                Implements a list which uses data virtualization to load data (the items in the collection) on demand.
            </summary>
            <typeparam name="T"> The type of items virtualized. </typeparam>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1" /> uses an <see cref="T:RI.Utilities.Collections.Virtualization.IItemsProvider`1" /> or <see cref="T:RI.Utilities.Collections.Virtualization.INotifyItemsProvider`1" /> to load items on-demand.
                    That means that items are only loaded when they are actually requested through <see cref="T:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1" /> (e.g. by using the collections indexer property).
                </para>
                <para>
                    Items are loaded in pages which size can be specified when constructing <see cref="T:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1" />.
                    The loaded pages will then stay in the cache for a specified amount of time.
                </para>
                <note type="note">
                    If <see cref="T:RI.Utilities.Collections.Virtualization.INotifyItemsProvider`1" /> is used, <see cref="E:RI.Utilities.Collections.Virtualization.INotifyItemsProvider`1.ItemsChanged" /> will clear the entire cache.
                </note>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Code example
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.#ctor(System.Int32,System.Nullable{System.TimeSpan},RI.Utilities.Collections.Virtualization.IItemsProvider{`0})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1" />
            </summary>
            <param name="pageSize"> The page size. </param>
            <param name="cacheTime"> The time pages stay in the cache or null if the pages stay in the cache indefinitely. </param>
            <param name="itemsProvider"> The provider which is used to load the items as needed. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="pageSize" /> is less than 1 or <paramref name="cacheTime" /> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="itemsProvider" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.#ctor(System.Int32,System.Int32,RI.Utilities.Collections.Virtualization.IItemsProvider{`0})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1" />
            </summary>
            <param name="pageSize"> The page size. </param>
            <param name="cacheTimeMilliseconds"> The time in milliseconds pages stay in the cache or zero if the pages stay in the cache indefinitely. </param>
            <param name="itemsProvider"> The provider which is used to load the items as needed. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="pageSize" /> is less than 1 or <paramref name="cacheTimeMilliseconds" /> is negative. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="itemsProvider" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.CacheTime">
            <summary>
                Gets the time in milliseconds pages stay in the cache.
            </summary>
            <value>
                The time in milliseconds pages stay in the cache or null if the pages stay in the cache indefinitely.
            </value>
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.PageSize">
            <summary>
                Gets the page size.
            </summary>
            <value>
                The page size.
            </value>
        </member>
        <member name="E:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.ItemsChanged">
            <summary>
                Raised when the used <see cref="T:RI.Utilities.Collections.Virtualization.IItemsProvider`1" /> signalled that items have changed.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.CleanupCache">
            <summary>
                Removes all outdated cached pages.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.ClearCache">
            <summary>
                Clears the cache by removing all cached pages.
            </summary>
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.Dispose">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IList#IsFixedSize">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#ICollection#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#ICollection#SyncRoot">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IList#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IList#Add(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IList#Clear">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IList#Contains(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IList#IndexOf(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IList#Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.Count">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#Generic#ICollection{T}#Clear">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.RI#Utilities#ObjectModel#ISynchronizable#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Collections.Virtualization.VirtualizationCollection`1.RI#Utilities#ObjectModel#ISynchronizable#SyncRoot">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Collections.Virtualization.NamespaceDoc">
            <summary>
                Contains new collection types for data virtualization and on-demand loading.
            </summary>
        </member>
        <member name="T:RI.Utilities.Collections.NamespaceDoc">
            <summary>
                Contains collection utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.Comparison.CollectionComparer`1">
            <summary>
                Implements an <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> for comparing collections and their elements.
            </summary>
            <typeparam name="T"> The type of the elements in the collections being compared for equality. </typeparam>
            <remarks>
                <note type="note">
                    Two collections are considered equal if they contain the same number of elements and each element in one collection has an equal element in the other collection.
                    The collections themselves are not compared for equality, only their elements.
                </note>
                <note type="important">
                    This implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is only intended for equality comparison of elements of collections.
                    It should not be used in scenarios where hash values of the collections themselves are used, e.g. used as a hash provider for the collections when storing the collections in another collection (e.g. storing collections in a <see cref="T:System.Collections.Generic.HashSet`1" /> or <see cref="T:System.Collections.Generic.Dictionary`2" />).
                </note>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
            <![CDATA[
            // create some collections of strings we want to compare
            var upperCaseAscending  = new List<string>    { "ANDREW", "BOB", "CHARLES" };
            var lowerCaseDescending = new List<string>    { "charles", "bob", "andrew" };
            var mixedCase           = new HashSet<string> { "Andrew", "Charles", "Bob" };
            
            // create collection comparer with case-insensitive string comparison
            var comparer = new CollectionComparer<string>(StringComparer.OrdinalIgnoreCase);
            
            comparer.Equals(upperCaseAscending, lowerCaseDescending); // returns "false"
            comparer.Equals(upperCaseAscending, mixedCase);           // undefined, HashSet<T> does not guarantee the order its elements are enumerated
            comparer.Equals(lowerCaseDescending, mixedCase);          // undefined, HashSet<T> does not guarantee the order its elements are enumerated
            
            // create collection comparer with case-insensitive string comparison and ignore order
            comparer = new CollectionComparer<string>(CollectionComparerFlags.IgnoreOrder, StringComparer.OrdinalIgnoreCase);
            
            comparer.Equals(upperCaseAscending, lowerCaseDescending); // returns "true"
            comparer.Equals(upperCaseAscending, mixedCase);           // returns "true"
            comparer.Equals(lowerCaseDescending, mixedCase);          // returns "true"
            ]]>
            </code>
            </example>
        </member>
        <member name="P:RI.Utilities.Comparison.CollectionComparer`1.Default">
            <summary>
                Provides default collection comparison behaviour: Element equality comparison is based on the type of <typeparamref name="T" /> (using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />) -and- order of elements matters.
            </summary>
            <value>
                The collection comparer.
            </value>
        </member>
        <member name="P:RI.Utilities.Comparison.CollectionComparer`1.DefaultIgnoreOrder">
            <summary>
                Provides default collection comparison behaviour: Element equality comparison is based on the type of <typeparamref name="T" /> (using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />) -and- order of elements is ignored.
            </summary>
            <value>
                The collection comparer.
            </value>
        </member>
        <member name="P:RI.Utilities.Comparison.CollectionComparer`1.ReferenceEquality">
            <summary>
                Provides specialized collection comparison behaviour: Only elements of the same reference are equal (using <see cref="T:System.Object" />.<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />) -and- order of elements matters.
            </summary>
            <value>
                The collection comparer.
            </value>
        </member>
        <member name="P:RI.Utilities.Comparison.CollectionComparer`1.ReferenceEqualityIgnoreOrder">
            <summary>
                Provides specialized collection comparison behaviour: Only elements of the same reference are equal (using <see cref="T:System.Object" />.<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />) -and- order of elements is ignored.
            </summary>
            <value>
                The collection comparer.
            </value>
        </member>
        <member name="M:RI.Utilities.Comparison.CollectionComparer`1.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" />.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.None" /> is used as comparison options.
                </para>
                <para>
                    Equality of elements is compared using the default equality comparer for the type of <typeparamref name="T" />, using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Comparison.CollectionComparer`1.#ctor(RI.Utilities.Comparison.CollectionComparerFlags)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="options"> The used comparison options. </param>
            <remarks>
                <para>
                    Equality of elements is compared using the default equality comparer for the type of <typeparamref name="T" />, using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Comparison.CollectionComparer`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="comparer"> The equality comparer used to compare elements for equality. Can be null to use the default equality comparer (<see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />). </param>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.None" /> is used as comparison options.
                </para>
                <para>
                    Equality of elements is compared using the specified equality comparer.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"> <paramref name="comparer" /> is not null and <see cref="T:RI.Utilities.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.ReferenceEquality" /> is specifiead as comparison options. </exception>
        </member>
        <member name="M:RI.Utilities.Comparison.CollectionComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="comparer"> The function used to compare elements for equality. Can be null to use the default equality comparer (<see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />). </param>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.None" /> is used as comparison options.
                </para>
                <para>
                    Equality of elements is compared using the specified function.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"> <paramref name="comparer" /> is not null and <see cref="T:RI.Utilities.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.ReferenceEquality" /> is specifiead as comparison options. </exception>
        </member>
        <member name="M:RI.Utilities.Comparison.CollectionComparer`1.#ctor(RI.Utilities.Comparison.CollectionComparerFlags,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="options"> The used comparison options. </param>
            <param name="comparer"> The equality comparer used to compare elements for equality. Can be null to use the default equality comparer (<see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />) or when reference equality is used (<see cref="T:RI.Utilities.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.ReferenceEquality" /> with <paramref name="options" />). </param>
            <remarks>
                <para>
                    Equality of elements is compared using the specified equality comparer.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"> <paramref name="comparer" /> is not null and <see cref="T:RI.Utilities.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.ReferenceEquality" /> is specifiead as comparison options. </exception>
        </member>
        <member name="M:RI.Utilities.Comparison.CollectionComparer`1.#ctor(RI.Utilities.Comparison.CollectionComparerFlags,System.Func{`0,`0,System.Boolean})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" />.
            </summary>
            <param name="options"> The used comparison options. </param>
            <param name="comparer"> The function used to compare elements for equality. Can be null to use the default equality comparer (<see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />) or when reference equality is used (<see cref="T:RI.Utilities.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.ReferenceEquality" /> with <paramref name="options" />). </param>
            <remarks>
                <para>
                    Equality of elements is compared using the specified function.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentException"> <paramref name="comparer" /> is not null and <see cref="T:RI.Utilities.Comparison.CollectionComparerFlags" />.<see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.ReferenceEquality" /> is specifiead as comparison options. </exception>
        </member>
        <member name="P:RI.Utilities.Comparison.CollectionComparer`1.Comparer">
            <summary>
                Gets the used function which compares elements for equality.
            </summary>
            <value>
                The used function which compares elements for equality.
            </value>
            <remarks>
                <para>
                    This delegate always points to the function which eventually does the comparison between two elements of the collections being compared.
                    If <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" /> is constructed using an <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> or is using default equality comparison (using <see cref="T:System.Collections.Generic.EqualityComparer`1" />.<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />), the delegate points to the <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" /> method of that equality comparer.
                    If <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" /> is constructed using a comparison function, the delegate points to that function.
                    If the <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" /> uses reference equality, the delegate points to an anonymous function which encapsulates <see cref="T:System.Object" />.<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Comparison.CollectionComparer`1.Options">
            <summary>
                Gets the used comparison options.
            </summary>
            <value>
                The used comparison options.
            </value>
        </member>
        <member name="M:RI.Utilities.Comparison.CollectionComparer`1.Equals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines whether two specified collections, or their elements respectively, are considered equal.
            </summary>
            <param name="x"> The first collection to compare with <paramref name="y" />. </param>
            <param name="y"> The second collection to compare with <paramref name="x" />. </param>
            <returns>
                true if the collections are considered equal, false otherwise.
                true is returned if both <paramref name="x" /> and <paramref name="y" /> are null.
                false is returned if only one of <paramref name="x" /> and <paramref name="y" /> is null.
            </returns>
            <remarks>
                <para>
                    <paramref name="x" /> and <paramref name="y" /> are each enumerated exactly once.
                    <paramref name="x" /> and <paramref name="y" /> are not enumerated if both are the same reference or either one is null.
                </para>
                <para>
                    This is a O(n*m) operation if order is ignored or a O(n+m) operation if order is not ignored, where n is the number of elements in <paramref name="x" /> and m is the number of elements in <paramref name="y" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Comparison.CollectionComparer`1.System#Collections#Generic#IEqualityComparer{System#Collections#Generic#IEnumerable{T}}#GetHashCode(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines the hash value of a specified collection.
            </summary>
            <param name="obj"> The collection. </param>
            <returns>
                The hash value of the collection.
            </returns>
            <remarks>
                <para>
                    The behaviour of this method is controlled by the presence or absence of the <see cref="F:RI.Utilities.Comparison.CollectionComparerFlags.DoNotGetHashFromElements" /> option.
                </para>
                <para>
                    <paramref name="obj" />is enumerated exactly once.
                    <paramref name="obj" /> is not enumerated if the hash code is taken from the collection itself.
                </para>
                <para>
                    This is a O(1) operation if the hash code is taken from the collection itself, O(n) otherwise where n is the number of items in <paramref name="obj" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="obj" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Comparison.CollectionComparerFlags">
            <summary>
                Specifies comparison options when using <see cref="T:RI.Utilities.Comparison.CollectionComparer`1" /> to compare two collections.
            </summary>
        </member>
        <member name="F:RI.Utilities.Comparison.CollectionComparerFlags.None">
            <summary>
                No options.
            </summary>
        </member>
        <member name="F:RI.Utilities.Comparison.CollectionComparerFlags.IgnoreOrder">
            <summary>
                Two collections are also considered equal if their elements are equal but in different orders.
            </summary>
        </member>
        <member name="F:RI.Utilities.Comparison.CollectionComparerFlags.ReferenceEquality">
            <summary>
                Two collections are only considered equal if their elements are of the same reference, regardless of the elements own behaviour regarding equality.
            </summary>
        </member>
        <member name="F:RI.Utilities.Comparison.CollectionComparerFlags.DoNotGetHashFromElements">
            <summary>
                The hash code of a collection is not based on the elements but rather on the collections own <see cref="M:System.Object.GetHashCode" /> method.
            </summary>
        </member>
        <member name="T:RI.Utilities.Comparison.EqualityComparison`1">
            <summary>
                Implements an equality comparer based on an equality comparison function.
            </summary>
            <typeparam name="T"> The type of objects to compare for equality. </typeparam>
            <remarks>
                <para>
                    This equality comparer can be used if an <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> or <see cref="T:System.Collections.IEqualityComparer" /> is required but equality comparison should be handled by a custom function or lambda expression.
                </para>
                <note type="important">
                    Be aware of the behaviour of <see cref="T:RI.Utilities.Comparison.EqualityComparison`1" /> regarding hash values.
                    See <see cref="M:RI.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean})" /> and <see cref="M:RI.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})" /> for more details.
                </note>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
             <![CDATA[
             // create a list of integers
             var numbers = new List<int> { 0, 1, 4, 5, 12 };
            
             // create the comparer, including a hash value calculation function
             // what we do: two integers are considered the same if they have the same remainder when divided by 5
             var comparer = new EqualityComparison<int>(
                 (x,y) => (x % 5) == (y % 5),
                 (obj) => obj % 5 );
             
             // lets use the comparer to check whether we have some numbers in the list or not
             numbers.Contains(0, comparer); //returns "true" because of 0 in the list
             numbers.Contains(1, comparer); //returns "true" because of 1 in the list
             numbers.Contains(2, comparer); //returns "true" because of 12 in the list
             numbers.Contains(3, comparer); //returns "false"
             numbers.Contains(4, comparer); //returns "true" because of 4 in the list
             numbers.Contains(5, comparer); //returns "true" because of 0 in the list
             ]]>
             </code>
            </example>
        </member>
        <member name="M:RI.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.EqualityComparison`1" />.
            </summary>
            <param name="comparer"> The function which is used to compare two objects of type <typeparamref name="T" />. </param>
            <remarks>
                <para>
                    The <see cref="T:RI.Utilities.Comparison.EqualityComparison`1" /> created with this constructor uses the objects (of type <typeparamref name="T" />) own <see cref="M:System.Object.GetHashCode" /> method for calculating hash values.
                </para>
                <para>
                    Therefore, the <see cref="T:RI.Utilities.Comparison.EqualityComparison`1" /> created with this constructor should not be used in scenarios where hash values are used, e.g. as the equality comparer of a <see cref="T:System.Collections.Generic.HashSet`1" /> or <see cref="T:System.Collections.Generic.Dictionary`2" />, if the hash value calculation of the objects own <see cref="M:System.Object.GetHashCode" /> method does not correspond to the equality comparison performed by <paramref name="comparer" />.
                    If those do not correspond but it is still used for hash values, performance might be severly impacted or, depending on the usage of the hash values, other strange side-effects might occur.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.EqualityComparison`1" />.
            </summary>
            <param name="comparer"> The function which is used to compare two objects of type <typeparamref name="T" />. </param>
            <param name="hasher"> The function which is used to get the hash value of an object of type <typeparamref name="T" />. Can be null to use the objects own <see cref="M:System.Object.GetHashCode" /> method. </param>
            <remarks>
                <para>
                    The <see cref="T:RI.Utilities.Comparison.EqualityComparison`1" /> created with this constructor uses the custom hash value function as specified by <paramref name="hasher" /> for calculating hash values.
                    This means that the hash value generated by <paramref name="hasher" /> must correspond to the equality comparison performed by <paramref name="comparer" />.
                </para>
                <para>
                    Therefore, the <see cref="T:RI.Utilities.Comparison.EqualityComparison`1" /> created with this constructor can be used in scenarios which uses hash values, e.g. as the equality comparer of a <see cref="T:System.Collections.Generic.HashSet`1" /> or <see cref="T:System.Collections.Generic.Dictionary`2" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="P:RI.Utilities.Comparison.EqualityComparison`1.Comparer">
            <summary>
                Gets the function used to compare two objects.
            </summary>
            <value>
                The function used to compare two objects.
            </value>
        </member>
        <member name="P:RI.Utilities.Comparison.EqualityComparison`1.Hasher">
            <summary>
                Gets the function used to calculate the hash value of an object.
            </summary>
            <value>
                The function used to calculate the hash value of an object.
            </value>
            <remarks>
                <para>
                    This delegate always points to the function which eventually does the calculation of the hash value.
                    If the <see cref="T:RI.Utilities.Comparison.EqualityComparison`1" /> was constructed specifying a hash function (using the <see cref="M:RI.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})" /> constructor) the delegate points to that function, otherwise it points to an anonymous function which encapsulates <typeparamref name="T" />.<see cref="M:System.Object.GetHashCode" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Comparison.EqualityComparison`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <inheritdoc cref="M:RI.Utilities.Comparison.EqualityComparison`1.Equals(`0,`0)" />
            <remarks>
                <note type="note">
                    The return value is always false if one or both of <paramref name="x" /> and <paramref name="y" /> is null or not of type <typeparamref name="T" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Comparison.EqualityComparison`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <inheritdoc cref="M:RI.Utilities.Comparison.EqualityComparison`1.GetHashCode(`0)" />
            <remarks>
                <note type="note">
                    The return value is always zero if <paramref name="obj" /> is null or not of type <typeparamref name="T" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Comparison.EqualityComparison`1.Equals(`0,`0)">
            <summary>
                Compares two objects.
            </summary>
            <param name="x"> The first object to compare. </param>
            <param name="y"> The second object to compare </param>
            <returns>
                true if both objects are considered equal, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Comparison.EqualityComparison`1.GetHashCode(`0)">
            <summary>
                Gets the hash value of an object.
            </summary>
            <param name="obj"> The object. </param>
            <returns>
                The hash value of an object.
            </returns>
            <remarks>
                The hash value is calculated depending on how the <see cref="T:RI.Utilities.Comparison.EqualityComparison`1" /> was constructed, see <see cref="M:RI.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean})" /> and <see cref="M:RI.Utilities.Comparison.EqualityComparison`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})" /> for more details.
            </remarks>
        </member>
        <member name="T:RI.Utilities.Comparison.OrderComparison`1">
            <summary>
                Implements an order comparer based on a order comparison function.
            </summary>
            <typeparam name="T"> The type of objects to compare for order. </typeparam>
            <remarks>
                <para>
                    This order comparer can be used if an <see cref="T:System.Collections.Generic.IComparer`1" /> or <see cref="T:System.Collections.IComparer" /> is required but order comparison should be handled by a custom function or lambda expression.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
              <![CDATA[
              // create a list of strings we want to sort
              var names = new List<string> { "Andrew", "Charles", "Bob" };
             
              // create the comparer
              // what we do: longer strings are always "greater than" shorter strings, strings of equal length use default case-insensitive comparison
              var comparer = new OrderComparison<string>((x,y) => x.Length != y.Length ? x.Length.CompareTo(y.Length) : StringComparer.OrdinalIgnoreCase.Compare(x, y));
              
              // sort the strings based on our customized comparison
              names.Sort(comparer);
              ]]>
              </code>
            </example>
        </member>
        <member name="M:RI.Utilities.Comparison.OrderComparison`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.OrderComparison`1" />.
            </summary>
            <param name="comparer"> The function which is used to compare two objects of type <typeparamref name="T" />. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Comparison.OrderComparison`1.#ctor(System.Boolean,System.Func{`0,`0,System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Comparison.OrderComparison`1" />.
            </summary>
            <param name="reverseOrder"> Specifies whether the comparison uses reversed order (multiplying the comparison result by -1) or not. </param>
            <param name="comparer"> The function which is used to compare two objects of type <typeparamref name="T" />. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="P:RI.Utilities.Comparison.OrderComparison`1.Comparer">
            <summary>
                Gets the function used to compare two objects.
            </summary>
            <value>
                The function used to compare two objects.
            </value>
        </member>
        <member name="P:RI.Utilities.Comparison.OrderComparison`1.ReverseOrder">
            <summary>
                Gets whether the comparison is done in reverse order (multiplying the comparison result by -1) or not.
            </summary>
            <value>
                true if the comparison is done in reverse order (multiplying the comparison result by -1), false otherwise.
            </value>
        </member>
        <member name="M:RI.Utilities.Comparison.OrderComparison`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <inheritdoc cref="M:RI.Utilities.Comparison.OrderComparison`1.Compare(`0,`0)" />
            <remarks>
                <note type="note">
                    The return value is always -1 if one or both of <paramref name="x" /> and <paramref name="y" /> is null or not of type <typeparamref name="T" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Comparison.OrderComparison`1.Compare(`0,`0)">
            <summary>
                Compares two objects.
            </summary>
            <param name="x"> The first object to compare. </param>
            <param name="y"> The second object to compare </param>
            <returns>
                The value which indicates wheter x is less than y (return value &lt; 0), equals y (return value = 0), or greater than y (return value &gt; 0).
            </returns>
        </member>
        <member name="T:RI.Utilities.Comparison.NamespaceDoc">
            <summary>
                Contains object and collection comparison utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.ComponentModel.DependencyResolverWrapper">
            <summary>
                Implements a wrapper for <see cref="T:RI.Utilities.ComponentModel.IDependencyResolver" /> and <see cref="T:System.IServiceProvider" /> which also allows modification/interception of resolved instances.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.ComponentModel.DependencyResolverWrapper" /> can also be used to wrap a <see cref="T:RI.Utilities.ComponentModel.IDependencyResolver" /> as a <see cref="T:System.IServiceProvider" /> and vice-versa.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Make thread-safe
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.#ctor(RI.Utilities.ComponentModel.IDependencyResolver)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.ComponentModel.DependencyResolverWrapper" />.
            </summary>
            <param name="dependencyResolver"> The dependency resolver. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="dependencyResolver" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.#ctor(System.IServiceProvider)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.ComponentModel.DependencyResolverWrapper" />.
            </summary>
            <param name="serviceProvider"> The service provider. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="serviceProvider" /> is null. </exception>
        </member>
        <member name="P:RI.Utilities.ComponentModel.DependencyResolverWrapper.DependencyResolver">
            <summary>
                Gets the used dependency resolver.
            </summary>
            <value>
                The used dependency resolver or null if no dependency resolver is used.
            </value>
        </member>
        <member name="P:RI.Utilities.ComponentModel.DependencyResolverWrapper.ServiceProvider">
            <summary>
                Gets the used service provider.
            </summary>
            <value>
                The used service provider or null if no service provider is used.
            </value>
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.Intercept(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
                Intercepts instance resolving by name.
            </summary>
            <param name="name"> The name to resolve. </param>
            <param name="instances"> The list of instances already resolved by <see cref="P:RI.Utilities.ComponentModel.DependencyResolverWrapper.DependencyResolver" /> or <see cref="P:RI.Utilities.ComponentModel.DependencyResolverWrapper.ServiceProvider" /> which can be modified to perform the interception. </param>
            <remarks>
                <para>
                    The default implementation does nothing and so passes through all instances already in <paramref name="instances" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.Intercept(System.Type,System.Collections.Generic.List{System.Object})">
            <summary>
                Intercepts instance resolving by type.
            </summary>
            <param name="type"> The type to resolve. </param>
            <param name="instances"> The list of instances already resolved by <see cref="P:RI.Utilities.ComponentModel.DependencyResolverWrapper.DependencyResolver" /> or <see cref="P:RI.Utilities.ComponentModel.DependencyResolverWrapper.ServiceProvider" /> which can be modified to perform the interception. </param>
            <remarks>
                <para>
                    The default implementation does nothing and so passes through all instances already in <paramref name="instances" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.GetInstance(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.GetInstance(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.GetInstance``1">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.GetInstances(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.GetInstances(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.GetInstances``1">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.ComponentModel.DependencyResolverWrapper.GetService(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.ComponentModel.IDependencyResolver">
            <summary>
                Defines the interface for a dependency resolver which can be used to obtain instances of required types.
            </summary>
        </member>
        <member name="M:RI.Utilities.ComponentModel.IDependencyResolver.GetInstance(System.Type)">
            <summary>
                Gets an instance of the specified type.
            </summary>
            <param name="type"> The type. </param>
            <returns>
                The instance of <paramref name="type" /> or null if no instance is available.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="type" /> is not a class type. </exception>
        </member>
        <member name="M:RI.Utilities.ComponentModel.IDependencyResolver.GetInstance(System.String)">
            <summary>
                Gets an instance of the specified name.
            </summary>
            <param name="name"> The name. </param>
            <returns>
                The instance associated with <paramref name="name" /> or null if no instance is available.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.ComponentModel.IDependencyResolver.GetInstance``1">
            <summary>
                Gets an instance of the specified type.
            </summary>
            <typeparam name="T"> The type. </typeparam>
            <returns>
                The instance of <typeparamref name="T" /> or null if no instance is available.
            </returns>
        </member>
        <member name="M:RI.Utilities.ComponentModel.IDependencyResolver.GetInstances(System.Type)">
            <summary>
                Gets all instances of a specified type.
            </summary>
            <param name="type"> The type. </param>
            <returns>
                The list which contains all instances of <paramref name="type" />.
                If no instances are available, an empty list is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="type" /> is not a class type. </exception>
        </member>
        <member name="M:RI.Utilities.ComponentModel.IDependencyResolver.GetInstances(System.String)">
            <summary>
                Gets all instances of a specified name.
            </summary>
            <param name="name"> The name. </param>
            <returns>
                The list which contains all instances associated with <paramref name="name" />.
                If no instances are available, an empty list is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.ComponentModel.IDependencyResolver.GetInstances``1">
            <summary>
                Gets all instances of a specified type.
            </summary>
            <typeparam name="T"> The type. </typeparam>
            <returns>
                The list which contains all instances of <typeparamref name="T" />.
                If no instances are available, an empty list is returned.
            </returns>
        </member>
        <member name="T:RI.Utilities.ComponentModel.NamespaceDoc">
            <summary>
                Contains new contracts and types for creating component models.
            </summary>
        </member>
        <member name="T:RI.Utilities.DataFormats.Csv.CsvDocument">
            <summary>
                Contains and manages structured CSV data.
            </summary>
            <remarks>
                <para>
                    CSV data in a <see cref="T:RI.Utilities.DataFormats.Csv.CsvDocument" /> is stored in the <see cref="P:RI.Utilities.DataFormats.Csv.CsvDocument.Data" /> property.
                    <see cref="P:RI.Utilities.DataFormats.Csv.CsvDocument.Data" /> is always kept up to date and all actions performed on an <see cref="T:RI.Utilities.DataFormats.Csv.CsvDocument" /> directly read from or modify <see cref="P:RI.Utilities.DataFormats.Csv.CsvDocument.Data" />.
                </para>
                <para>
                    <see cref="P:RI.Utilities.DataFormats.Csv.CsvDocument.Data" /> is organized as a list containing lists of strings in a sequential order (e.g. as they would appear in a CSV file).
                    The outer list represent rows while the inner lists represent columns (all columns of one row per inner list).
                </para>
                <para>
                    <see cref="P:RI.Utilities.DataFormats.Csv.CsvDocument.Data" /> can be modified arbitrarily by either using methods of <see cref="T:RI.Utilities.DataFormats.Csv.CsvDocument" /> or by modifying the list itself.
                    The list can contain or be modified to contain any sequence of strings.
                </para>
                <para>
                    <b> ANATOMY OF CSV DATA </b>
                </para>
                <para>
                    CSV data is organized in rows and columns where the data is usually used and organized row-by-row.
                    Each row can have an arbitrary length of columns, therefore the number of columns can vary from row to row.
                </para>
                <para>
                    There are zero, one, or more rows.
                    Empty data is interpreted as having no rows (and therefore no columns) while data consisting only of whitespaces is considered having one row with one column.
                </para>
                <para>
                    A row has zero, one, or more columns.
                    An empty line is interpreted as having no columns while a line consisting only of whitespaces is considered having one column.
                </para>
                <para>
                    A value is a specific column of a specific row (sometimes also called cells).
                </para>
                <para>
                    Values are sperated by a separator character (see <see cref="P:RI.Utilities.DataFormats.Csv.CsvSettings.Separator" />).
                </para>
                <para>
                    Rows are separated by carriage-returns (CR) and line-feeds (LF), depending on the environment.
                </para>
                <para>
                    <b> QUOTING </b>
                </para>
                <para>
                    A value are enclosed in quotes (<c> &quot; </c>) if the value itself consists of multiple lines or the value itslef contains quotes.
                </para>
                <para>
                    For multiline values, the carriage-return (CR) / line-feed (LF) does not represent a row separator.
                    It is merely the same logical CSV row which spans multiple textual rows where the quote is used to detect that the carriage-return/line-feed belongs to the value and is not a row separator (because it occurs inside a quoted block).
                </para>
                <para>
                    Each quote contained in a value is written using twice the quote character.
                    For example, the value <c> Test&quot;123 </c> is written as <c> &quot;Test&quot;&quot;123&quot; </c> and <c> &quot;&quot;Hello </c> is written as <c> &quot;&quot;&quot;&quot;&quot;Hello&quot; </c>.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
            <![CDATA[
            // create an empty CSV document
            var doc = new CsvDocument();
            
            // load a CSV file
            doc.Load("data.csv");
            
            // get column headers
            var headers = doc.Data[0];
            
            // iterate through all rows, except the column headers
            for (int index = 1; index < doc.Data.Count; index++)
            {
               ...
            }
            
            // save back into the CSV file
            doc.Save("data.csv");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvDocument" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvDocument.Data">
            <summary>
                Gets the CSV data.
            </summary>
            <value>
                The CSV data.
            </value>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.AsString">
            <summary>
                Converts this CSV document to a string.
            </summary>
            <returns>
                The string of CSV data created from this CSV document.
            </returns>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.AsString(RI.Utilities.DataFormats.Csv.CsvWriterSettings)">
            <summary>
                Converts this CSV document to a string.
            </summary>
            <param name="settings"> The used CSV writer settings or null if default values should be used. </param>
            <returns>
                The string of CSV data created from this CSV document.
            </returns>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Clear">
            <summary>
                Removes all CSV data from <see cref="P:RI.Utilities.DataFormats.Csv.CsvDocument.Data" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Load(RI.Utilities.DataFormats.Csv.CsvReader)">
            <summary>
                Loads CSV data from an existing CSV reader.
            </summary>
            <param name="reader"> The CSV reader from which the data is loaded. </param>
            <remarks>
                <para>
                    All existing CSV data will be discarded before the new data is loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException"> The CSV data read by <paramref name="reader" /> contains invalid data. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Load(System.String)">
            <summary>
                Loads CSV data from a string.
            </summary>
            <param name="data"> The CSV data to load. </param>
            <remarks>
                <para>
                    All existing CSV data will be discarded before the new ata is loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException"> The CSV data read from <paramref name="data" /> contains invalid data. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Load(System.String,RI.Utilities.DataFormats.Csv.CsvReaderSettings)">
            <summary>
                Loads CSV data from a string.
            </summary>
            <param name="data"> The CSV data to load. </param>
            <param name="settings"> The used CSV reader settings or null if default values should be used. </param>
            <remarks>
                <para>
                    All existing CSV data will be discarded before the new data is loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException"> The CSV data read from <paramref name="data" /> contains invalid data. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Load(System.String,System.Text.Encoding)">
            <summary>
                Loads CSV data from an existing CSV file.
            </summary>
            <param name="file"> The path of the CSV file to load. </param>
            <param name="encoding"> The encoding for reading the CSV file. </param>
            <remarks>
                <para>
                    All existing CSV data will be discarded before the new data is loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException"> The CSV data read from <paramref name="file" /> contains invalid data. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Load(System.String,System.Text.Encoding,RI.Utilities.DataFormats.Csv.CsvReaderSettings)">
            <summary>
                Loads CSV data from an existing CSV file.
            </summary>
            <param name="file"> The path of the CSV file to load. </param>
            <param name="encoding"> The encoding for reading the CSV file. </param>
            <param name="settings"> The used CSV reader settings or null if default values should be used. </param>
            <remarks>
                <para>
                    All existing CSV data will be discarded before the new data is loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException"> The CSV data read from <paramref name="file" /> contains invalid data. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Save(RI.Utilities.DataFormats.Csv.CsvWriter)">
            <summary>
                Saves all CSV data of this CSV document to an existing CSV writer.
            </summary>
            <param name="writer"> The CSV writer to which the data is saved. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Save(System.IO.TextWriter)">
            <summary>
                Saves all CSV data of this CSV document to an existing text writer.
            </summary>
            <param name="writer"> The text writer to which the data is saved. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Save(System.IO.TextWriter,RI.Utilities.DataFormats.Csv.CsvWriterSettings)">
            <summary>
                Saves all CSV data of this CSV document to an existing text writer.
            </summary>
            <param name="writer"> The text writer to which the data is saved. </param>
            <param name="settings"> The used CSV writer settings or null if default values should be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Save(System.String,System.Text.Encoding)">
            <summary>
                Saves all CSV data of this CSV document to a CSV file.
            </summary>
            <param name="file"> The path of the CSV file to save. </param>
            <param name="encoding"> The encoding for writing the CSV file. </param>
            <remarks>
                <para>
                    The CSV file will be overwritten with the CSV data from this CSV document.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Save(System.String,System.Text.Encoding,RI.Utilities.DataFormats.Csv.CsvWriterSettings)">
            <summary>
                Saves all CSV data of this CSV document to a CSV file.
            </summary>
            <param name="file"> The path of the CSV file to save. </param>
            <param name="encoding"> The encoding for writing the CSV file. </param>
            <param name="settings"> The used CSV writer settings or null if default values should be used. </param>
            <remarks>
                <para>
                    The CSV file will be overwritten with the CSV data from this CSV document.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvDocument.Clone">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Csv.CsvParsingException">
            <summary>
                The <see cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException" /> is thrown when invalid CSV data is encountered while parsing CSV data.
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvParsingException.#ctor(System.Int32,RI.Utilities.DataFormats.Csv.CsvReaderError)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException" />.
            </summary>
            <param name="lineNumber"> The line number where the parsing error ocurred. </param>
            <param name="readerError"> The parsing error which ocurred. </param>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvParsingException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvParsingException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvParsingException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvParsingException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.DataFormats.Csv.CsvReader">
            <summary>
                Implements a forward-only CSV reader which iteratively reads CSV data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Csv.CsvDocument" /> for more general and detailed information about working with CSV data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Add constructor with doNotOwn parameter
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvReader.#ctor(System.IO.TextReader)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvReader" />.
            </summary>
            <param name="reader"> The used <see cref="T:System.IO.TextReader" />. </param>
            <remarks>
                <para>
                    CSV reader settings with default values are used.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvReader.#ctor(System.IO.TextReader,RI.Utilities.DataFormats.Csv.CsvReaderSettings)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvReader" />.
            </summary>
            <param name="reader"> The used <see cref="T:System.IO.TextReader" />. </param>
            <param name="settings"> The used CSV reader settings or null if default values should be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvReader.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvReader" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvReader.BaseReader">
            <summary>
                Gets the <see cref="T:System.IO.TextReader" /> which is used by this CSV reader to read the CSV data.
            </summary>
            <value>
                The <see cref="T:System.IO.TextReader" /> which is used by this CSV reader to read the CSV data or null if the the CSV reader is closed/disposed.
            </value>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvReader.CurrentError">
            <summary>
                Gets the current error which ocurred during the last call to <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" />.
            </summary>
            <value>
                The current error.
            </value>
            <remarks>
                <para>
                    Before the first call to <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" />, this property is <see cref="F:RI.Utilities.DataFormats.Csv.CsvReaderError.None" />.
                </para>
                <para>
                    This property keeps its last value even if <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" /> returns false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvReader.CurrentLineNumber">
            <summary>
                Gets the current line number in the CSV data to which <see cref="P:RI.Utilities.DataFormats.Csv.CsvReader.CurrentRow" /> or <see cref="P:RI.Utilities.DataFormats.Csv.CsvReader.CurrentError" /> corresponds to.
            </summary>
            <value>
                The current line number.
            </value>
            <remarks>
                <para>
                    Before the first call to <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" />, this property is zero.
                </para>
                <para>
                    This property keeps its last value even if <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" /> returns false.
                </para>
                <note type="note">
                    This value always corresponds to the last line which belongs to the current row (relevant for multiline-values).
                </note>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvReader.CurrentRow">
            <summary>
                Gets the current CSV row values which was read during the last call to <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" />.
            </summary>
            <value>
                The current CSV row values or null if last call to <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" /> created an error (<see cref="P:RI.Utilities.DataFormats.Csv.CsvReader.CurrentError" />).
            </value>
            <remarks>
                <para>
                    Before the first call to <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" />, this property is null.
                </para>
                <para>
                    This property keeps its last value even if <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" /> returns false.
                </para>
                <para>
                    A new list instance is created for each row.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvReader.Settings">
            <summary>
                Gets the used reader settings for this CSV reader.
            </summary>
            <value>
                The used reader settings for this CSV reader.
            </value>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvReader.Close">
            <summary>
                Closes this CSV reader and its underlying <see cref="T:System.IO.TextReader" /> (<see cref="P:RI.Utilities.DataFormats.Csv.CsvReader.BaseReader" />).
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext">
            <summary>
                Reads the next CSV row from the CSV data.
            </summary>
            <returns>
                true if a row was read and <see cref="P:RI.Utilities.DataFormats.Csv.CsvReader.CurrentRow" /> was updated, false if there are no more CSV rows (<see cref="P:RI.Utilities.DataFormats.Csv.CsvReader.CurrentRow" /> keeps its last value).
            </returns>
            <remarks>
                <note type="note">
                    The CSV data is read line-by-line.
                    <see cref="M:RI.Utilities.DataFormats.Csv.CsvReader.ReadNext" /> reads logical CSV rows, which can result in reading multiple lines from the underlying <see cref="P:RI.Utilities.DataFormats.Csv.CsvReader.BaseReader" /> in case of multiline values.
                </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException"> The INI reader has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvReader.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Csv.CsvReaderError">
            <summary>
                Describes an error which ocurred during reading CSV data using an <see cref="T:RI.Utilities.DataFormats.Csv.CsvReader" />.
            </summary>
        </member>
        <member name="F:RI.Utilities.DataFormats.Csv.CsvReaderError.None">
            <summary>
                No error (no line read or the last line which was read is valid).
            </summary>
        </member>
        <member name="F:RI.Utilities.DataFormats.Csv.CsvReaderError.UnexpectedQuote">
            <summary>
                A quote was read unexpected, inside a value which was not started with a quote.
            </summary>
        </member>
        <member name="F:RI.Utilities.DataFormats.Csv.CsvReaderError.SeparatorExpected">
            <summary>
                A separator was expected but another unexpected character was read.
            </summary>
        </member>
        <member name="F:RI.Utilities.DataFormats.Csv.CsvReaderError.MultilineValueNotAllowed">
            <summary>
                A multiline value was read but is not allowed.
            </summary>
        </member>
        <member name="T:RI.Utilities.DataFormats.Csv.CsvReaderSettings">
            <summary>
                Provides CSV reader settings.
            </summary>
            <remarks>
                <para>
                    CSV reader settings can be used to customize how CSV data is read and processed.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Csv.CsvDocument" /> for more general and detailed information about working with CSV data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:RI.Utilities.DataFormats.Csv.CsvReaderSettings.DefaultAllowMultilineValues">
            <summary>
                The default whether multiline values are allowed.
            </summary>
            <remarks>
                <para>
                    The default value is true.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Utilities.DataFormats.Csv.CsvReaderSettings.DefaultWhitespaceTolerant">
            <summary>
                The default whether reading is whitespace-tolerant.
            </summary>
            <remarks>
                <para>
                    The default value is true.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvReaderSettings.AllowMultilineValues">
            <summary>
                Gets or sets whether multiline values are allowed.
            </summary>
            <value>
                true if multiline values are allowed, false otherwise.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Csv.CsvReaderSettings.DefaultAllowMultilineValues" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvReaderSettings.WhitespaceTolerant">
            <summary>
                Gets or sets whether reading is whitespace-tolerant.
            </summary>
            <value>
                true if reading is whitespace-tolerant, false otherwise.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Csv.CsvReaderSettings.DefaultWhitespaceTolerant" />.
                </para>
                <para>
                    Whitespace tolerance allows any whitesoace characters between a closing quote and the following next separator or line-feed.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Utilities.DataFormats.Csv.CsvSettings">
            <summary>
                Provides basic CSV data settings for both readers and writers.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Csv.CsvDocument" /> for more general and detailed information about working with CSV data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:RI.Utilities.DataFormats.Csv.CsvSettings.DefaultQuote">
            <summary>
                The default character which is used to quote values.
            </summary>
            <remarks>
                <para>
                    The default value is <c> &quot; </c>.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Utilities.DataFormats.Csv.CsvSettings.FallbackSeparator">
            <summary>
                The fallback character which is used to separate values if it cannot be determined from the system.
            </summary>
            <remarks>
                <para>
                    The default value is <c> , </c>.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvSettings.Quote">
            <summary>
                Gets or sets the character which is used to quote values.
            </summary>
            <value>
                The character which is used to quote values.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Csv.CsvSettings.DefaultQuote" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvSettings.Separator">
            <summary>
                Gets or sets the character which is used to separate values.
            </summary>
            <value>
                The character which is used to separate values.
            </value>
            <remarks>
                <para>
                    The default value is determined by <see cref="P:System.Globalization.TextInfo.ListSeparator" />.
                    However, if that separator is not exactly one character in length, <see cref="F:RI.Utilities.DataFormats.Csv.CsvSettings.FallbackSeparator" /> is used.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Utilities.DataFormats.Csv.CsvWriter">
            <summary>
                Implements a forward-only CSV writer which iteratively writes CSV data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Csv.CsvDocument" /> for more general and detailed information about working with CSV data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Add constructor with doNotOwn parameter
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvWriter.#ctor(System.IO.TextWriter)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvWriter" />.
            </summary>
            <param name="writer"> The used <see cref="T:System.IO.TextWriter" />. </param>
            <remarks>
                <para>
                    CSV writer settings with default values are used.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvWriter.#ctor(System.IO.TextWriter,RI.Utilities.DataFormats.Csv.CsvWriterSettings)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvWriter" />.
            </summary>
            <param name="writer"> The used <see cref="T:System.IO.TextWriter" />. </param>
            <param name="settings"> The used CSV writer settings or null if default values should be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvWriter.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.DataFormats.Csv.CsvWriter" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvWriter.BaseWriter">
            <summary>
                Gets the <see cref="T:System.IO.TextWriter" /> which is used by this CSV writer to write the CSV data.
            </summary>
            <value>
                The <see cref="T:System.IO.TextWriter" /> which is used by this CSV writer to write the CSV data or null if the the CSV writer is closed/disposed.
            </value>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvWriter.Settings">
            <summary>
                Gets the used writer settings for this CSV writer.
            </summary>
            <value>
                The used writer settings for this CSV writer.
            </value>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvWriter.Close">
            <summary>
                Closes this CSV writer and its underlying <see cref="T:System.IO.TextWriter" /> (<see cref="P:RI.Utilities.DataFormats.Csv.CsvWriter.BaseWriter" />).
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvWriter.Flush">
            <summary>
                Flushes all written data to the underlying <see cref="T:System.IO.TextWriter" /> (<see cref="P:RI.Utilities.DataFormats.Csv.CsvWriter.BaseWriter" />).
            </summary>
            <exception cref="T:System.ObjectDisposedException"> The CSV writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvWriter.NextRow">
            <summary>
                Completes the current row and starts a new row.
            </summary>
            <exception cref="T:System.ObjectDisposedException"> The CSV writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvWriter.WriteRow(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Writes an entire row and moves to the next row.
            </summary>
            <param name="row"> </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="row" /> is null. </exception>
            <exception cref="T:System.ObjectDisposedException"> The CSV writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvWriter.WriteValue(System.String)">
            <summary>
                Writes a value on the current row.
            </summary>
            <param name="value"> The value to write. </param>
            <exception cref="T:System.ObjectDisposedException"> The CSV writer has been closed/disposed. </exception>
            <remarks>
                <para>
                    If <paramref name="value" /> is null, no value is written.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Csv.CsvWriter.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Csv.CsvWriterSettings">
            <summary>
                Provides CSV writer settings.
            </summary>
            <remarks>
                <para>
                    CSV writer settings can be used to customize how CSV data is generated and formated.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Csv.CsvDocument" /> for more general and detailed information about working with CSV data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:RI.Utilities.DataFormats.Csv.CsvWriterSettings.DefaultAlwaysQuoteValues">
            <summary>
                The default whether values are always quoted.
            </summary>
            <remarks>
                <para>
                    The default value is false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Csv.CsvWriterSettings.AlwaysQuoteValues">
            <summary>
                Gets or sets whether values are always quoted.
            </summary>
            <value>
                true if values are always quoted, false if they are only quoted when necessary.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Csv.CsvWriterSettings.DefaultAlwaysQuoteValues" />.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Utilities.DataFormats.Csv.NamespaceDoc">
            <summary>
                Contains types to process CSV data.
            </summary>
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement">
            <summary>
                Represents a comment in INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement" />.
            </summary>
            <param name="comment"> The comment. </param>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement.Comment">
            <summary>
                Gets or sets the comment.
            </summary>
            <value>
                The comment.
            </value>
            <remarks>
                <note type="note">
                    The value returned by this property is never null.
                    If null is set, it is replaced with <see cref="F:System.String.Empty" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement.ToString">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement">
            <summary>
                Represents a section header in INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement" />.
            </summary>
            <param name="sectionName"> The section name. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sectionName" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement.SectionName">
            <summary>
                Gets or sets the section name.
            </summary>
            <value>
                The section name.
            </value>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="value" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement.ToString">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.Elements.TextIniElement">
            <summary>
                Represents arbitrary text in INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
                <para>
                    Arbitrary text is everything in an INI file which is not a section header, comment, or name-value-pair.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.Elements.TextIniElement.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.Elements.TextIniElement" />.
            </summary>
            <param name="text"> The arbitrary text. </param>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.Elements.TextIniElement.Text">
            <summary>
                Gets or sets the arbitrary text.
            </summary>
            <value>
                The arbitrary text.
            </value>
            <remarks>
                <note type="note">
                    The value returned by this property is never null.
                    If null is set, it is replaced with <see cref="F:System.String.Empty" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.Elements.TextIniElement.ToString">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement">
            <summary>
                Represents a name-value-pair in INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" />.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>
                The name.
            </value>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="value" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement.Value">
            <summary>
                Gets or sets the value.
            </summary>
            <value>
                The value.
            </value>
            <remarks>
                <note type="note">
                    The value returned by this property is never null.
                    If null is set, it is replaced with <see cref="F:System.String.Empty" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement.ToString">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.Elements.NamespaceDoc">
            <summary>
                Contains INI element types which represent INI data elements in a INI document.
            </summary>
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniDocument">
            <summary>
                Contains and manages structured INI data.
            </summary>
            <remarks>
                <para>
                    <b> GENERAL </b>
                </para>
                <para>
                    INI data in an <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> is stored in the <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" /> property.
                    <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" /> is always kept up to date and all actions performed on an <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> directly read from or modify <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />.
                </para>
                <para>
                    <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" /> is a list which contains all the INI elements of the INI data in a sequential order (e.g. as they would appear in an INI file).
                    The INI elements are all of the abstract base type <see cref="T:RI.Utilities.DataFormats.Ini.IniElement" />, the concrete type depending on the type of the element (<see cref="T:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement" />, <see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" />, <see cref="T:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement" />, <see cref="T:RI.Utilities.DataFormats.Ini.Elements.TextIniElement" />).
                </para>
                <para>
                    <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" /> can be modified arbitrarily by either using methods of <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> or by modifying the list itself.
                    The list can contain or be modified to contain any sequence of the four types of INI elements mentioned above.
                    Any sequence of INI elements will be valid as each instance of a derivate of <see cref="T:RI.Utilities.DataFormats.Ini.IniElement" /> is independent to any other type of INI element.
                </para>
                <note type="important">
                    Be aware that although each INI element is independent of each other, the sequence of INI elements has semantical meaning, depending of the data and its context stored in the INI data.
                    For example, a <see cref="T:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement" /> is technically independent from its following <see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" />s, but when processed the <see cref="T:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement" /> defines the section to which the following <see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" /> belong.
                </note>
                <note type="important">
                    Be careful when performing actions which insert, remove, or reorder INI elements as this might change the semantical meaning of one or several sections!
                </note>
                <para>
                    <b> ANATOMY OF INI DATA &amp; ELEMENTS </b>
                </para>
                <para>
                    INI data outside an <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> is organized as text line-by-line (e.g. a string or *.ini file containing the INI data).
                    Inside an <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" />, the INI data represented by <see cref="T:RI.Utilities.DataFormats.Ini.IniElement" />s, stored in <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />, is on a technical abstraction (reflecting the line-by-line organization), not a semantical abstraction.
                    This means that basically each line of INI data is represented by a seperate <see cref="T:RI.Utilities.DataFormats.Ini.IniElement" />, depending on the type of line.
                </para>
                <para>
                    There are four types of lines in INI data, each represented with their own derivate of <see cref="T:RI.Utilities.DataFormats.Ini.IniElement" />:
                    Sections (<see cref="T:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement" />), Name-Value-Pairs (<see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" />), Comments (<see cref="T:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement" />), and Text (<see cref="T:RI.Utilities.DataFormats.Ini.Elements.TextIniElement" />).
                    Any possible line in a set of INI data will fit into exactly one of those types.
                </para>
                <para>
                    <b> Sections: </b>
                    A section is started by a section header.
                    The section header contains the name of the section.
                    All elements following the section header belong to that section until the next section header appears.
                    So a section includes its section header and all elements following the section header.
                    A section header is a single line, in the form <c> [name of the section] </c>, and is represented using <see cref="T:RI.Utilities.DataFormats.Ini.Elements.SectionIniElement" />.
                    When INI data is parsed, leading and trailing whitespace of a line is ignored for section headers and the section name must be enclosed in <c> [ </c> and <c> ] </c>.
                    Leading and trailing whitespace of the section name itself is not ignored.
                    There can be multiple sections which have the same name.
                </para>
                <para>
                    <b> Name-Value-Pairs: </b>
                    Name-value-pairs are the actual data intended to be stored and transported by INI data.
                    A name-value-pair is a single line, in the form of <c> name=value </c>, and is represented using <see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" />.
                    When INI data is parsed, leading and trailing whitespace of both the name and the value is not ignored.
                    There can be multiple name-value-pairs inside the same (or another) section which have the same name.
                </para>
                <para>
                    <b> Comments: </b>
                    A comment is a text which is explicitly marked as a comment and is only intended for annotating the INI data when viewed directly (e.g. opening an *.ini file in a text editor).
                    Comments are not processed by <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> besides loading/saving them to/from <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />.
                    A comment is in the form <c> ;comment </c> and represented using <see cref="T:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement" />.
                    Note that consecutive comment lines will be combined into a single <see cref="T:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement" />.
                    When INI data is parsed, leading whitespace of a comment is ignored, up to <c> ; </c>, but not ignored in the comment itself.
                </para>
                <para>
                    <b> Text: </b>
                    A text is everything else which is not a section header, name-value-pair, or comment, and is represented using <see cref="T:RI.Utilities.DataFormats.Ini.Elements.TextIniElement" />
                    Therefore, technically speaking, text elements are actually invalid lines and should not be used in any processing.
                    Text is not processed by <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> besides loading/saving them to/from <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />.
                    Note that consecutive text lines will be combined into a single <see cref="T:RI.Utilities.DataFormats.Ini.Elements.TextIniElement" />.
                </para>
                <note type="note">
                    Note that elements always belong to a section.
                    This is either the section started by the last section header or the default section if no section header appeared before the element.
                    When &quot;outside a section&quot; is mentioned in the description of <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" />, that default section is meant.
                    The default section can be identified using null or <see cref="F:System.String.Empty" />.
                </note>
                <para>
                    <b> ESCAPING </b>
                </para>
                <para>
                    INI data uses characters with special meanings to structure elements: <c> [ </c>, <c> ] </c>, <c> = </c>, <c> ; </c>, and <c> CRLF </c> or <c> LF </c> respectively (depending on the used line-ending-style).
                    This means that those special characters cannot appear as-is within section names, names of name-value-pairs, or values of name-value-pairs.
                    Therefore, if such special characters are used in such a way, they need to be escaped (similar to escape sequences such as <c> \r\n </c>).
                </para>
                <para>
                    Another special character is used to start an escape sequence: <c> | </c>.
                    This means that the character after <c> | </c> defines which one of the special characters is to be represented by the escape sequence.
                    The following escape sequences are possible: <c> |[ </c>, <c> |] </c>, <c> |= </c>, <c> |; </c>, <c> |r </c>, <c> |n </c>, <c> || </c>.
                    <c> |r </c> is carriage-return (CR), <c> |n </c> new-line or line-feed (LF), and <c> || </c> is used to represent <c> | </c> itself.
                </para>
                <para>
                    This escaping mechanism makes it possible to have any text, including multi-line text, for names and values.
                    When INI data is read or written by <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" />, <see cref="T:RI.Utilities.DataFormats.Ini.IniReader" />, <see cref="T:RI.Utilities.DataFormats.Ini.IniWriter" />, the encoding and decoding of those escape sequences is performed automatically.
                </para>
                <para>
                    The <c> | </c> character was choosen to start escape sequences instead of the <c> \ </c> character so that name-value-pairs, which contain windows file or directory paths as their values, are more human-readable.
                    The used escape sequence character can be changed using <see cref="P:RI.Utilities.DataFormats.Ini.IniSettings.EscapeCharacter" />.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
            <![CDATA[
            // create an empty INI document
            var doc = new IniDocument();
            
            // load an INI file
            doc.Load("settings.ini");
            
            // get the value for the Difficulty key in the [GameSettings] section
            var difficulty = doc.GetValue("GameSettings", "Difficulty");
            
            // get all name-value-pairs under the [GraphicsSettings] section as a dictionary
            var graphics = doc.GetSection("GraphicsSettings");
            
            // set the value of the Difficulty key in the [GameSettings] section
            doc.SetValue("GameSettings", "Difficulty", "Princess");
            
            // save back into the INI file
            doc.Save("settings.ini");
            ]]>
            </code>
            </example>
            TODO: DeleteValues (deletes all values of a given name from all sections)
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" />.
            </summary>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used for name comparison of section names and name-value-pairs.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" />.
            </summary>
            <param name="nameComparer"> The comparer used to compare section names and names of name-value-pairs. </param>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used if <paramref name="nameComparer" /> is null.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" />.
            </summary>
            <param name="sectionNameComparer"> The comparer used to compare section names. </param>
            <param name="valueNameComparer"> The comparer used to compare names of name-value-pairs. </param>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used if <paramref name="sectionNameComparer" /> or <paramref name="valueNameComparer" /> is null.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniDocument.Count">
            <summary>
                Gets the number of INI elements in <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />.
            </summary>
            <value>
                The number of INI elements in <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />.
            </value>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements">
            <summary>
                Gets the list with all INI elements of this INI document.
            </summary>
            <value>
                The list with all INI elements of this INI document.
            </value>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniDocument.SectionNameComparer">
            <summary>
                Gets the comparer used to compare section names.
            </summary>
            <value>
                The comparer used to compare section names.
            </value>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniDocument.ValueNameComparer">
            <summary>
                Gets the comparer used to compare names of name-value-pairs.
            </summary>
            <value>
                The comparer used to compare names of name-value-pairs.
            </value>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.AddComment(System.String)">
            <summary>
                Adds a comment at the end of all elements.
            </summary>
            <param name="comment"> The comment. </param>
            <returns>
                The added comment element.
            </returns>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.AddSection(System.String,RI.Utilities.DataFormats.Ini.IniSectionAddMode,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Adds the values of a dictionary as a new section.
            </summary>
            <param name="sectionName"> The name of the new section (can be null). </param>
            <param name="mode"> Specifies how the section is added to the existing elements. </param>
            <param name="values"> The dictionary to add as a section. </param>
            <returns>
                The list of INI elements which were added to <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />.
                An empty list is returned if no elements were added.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, the values are added outside a section (that is: before the first section header or at the end if no section header exists).
                </para>
                <para>
                    <paramref name="mode" /> is ignored if <paramref name="sectionName" /> is null, the behavior of <see cref="F:RI.Utilities.DataFormats.Ini.IniSectionAddMode.AppendSame" /> is applied.
                </para>
                <para>
                    If <paramref name="values" /> is empty, an empty section is added anyways (consisting only of the section header).
                </para>
                <para>
                    All values in <paramref name="values" /> will be added, even if a name-value-pair with the same name already exists.
                </para>
                <para>
                    This method is used if the dictionary can have only one value per name-value-pair.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="values" /> contains name-value-pairs with invalid names. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.AddSection(System.String,RI.Utilities.DataFormats.Ini.IniSectionAddMode,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
                Adds the values of a dictionary as a new section.
            </summary>
            <param name="sectionName"> The name of the new section (can be null). </param>
            <param name="mode"> Specifies how the section is added to the existing elements. </param>
            <param name="values"> The dictionary to add as a section. </param>
            <returns>
                The list of INI elements which were added to <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />.
                An empty list is returned if no elements were added.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, the values are added outside a section (that is: before the first section header or at the end if no section header exists).
                </para>
                <para>
                    <paramref name="mode" /> is ignored if <paramref name="sectionName" /> is null, the behavior of <see cref="F:RI.Utilities.DataFormats.Ini.IniSectionAddMode.AppendSame" /> is applied.
                </para>
                <para>
                    If <paramref name="values" /> is empty, an empty section is added anyways (consisting only of the section header).
                </para>
                <para>
                    All values in <paramref name="values" /> will be added, even if a name-value-pair with the same name already exists.
                </para>
                <para>
                    This method is used if the dictionary can have one or multiple values per name-value-pair (using the inner list).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="values" /> contains name-value-pairs with invalid names. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.AddSectionHeader(System.String)">
            <summary>
                Adds a section header at the end of all elements.
            </summary>
            <param name="sectionName"> The section name. </param>
            <returns>
                The added section header element.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sectionName" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.AddText(System.String)">
            <summary>
                Adds a text at the end of all elements.
            </summary>
            <param name="text"> The text. </param>
            <returns>
                The added text element.
            </returns>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.AddValue(System.String,System.String)">
            <summary>
                Adds a name-value-pair at the end of all elements.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
            <returns>
                The added name-value-pair element.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.AsString">
            <summary>
                Converts this INI document to a string.
            </summary>
            <returns>
                The string of INI data created from this INI document.
            </returns>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.AsString(RI.Utilities.DataFormats.Ini.IniWriterSettings)">
            <summary>
                Converts this INI document to a string.
            </summary>
            <param name="settings"> The used INI writer settings or null if default values should be used. </param>
            <returns>
                The string of INI data created from this INI document.
            </returns>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Clear">
            <summary>
                Removes all INI elements from <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.DeleteValue(System.String,System.String)">
            <summary>
                Deletes the value of a specified name in a specified section.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="name"> The name of the value. </param>
            <returns>
                true if the value existed and has been deleted, false otherwise.
            </returns>
            <remarks>
                <para>
                    All matching values of all matching sections are deleted.
                    If <paramref name="section" /> is null, the value is searched and deleted outside any section.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.GetSection(System.String)">
            <summary>
                Gets the name-value-pairs of a section as a dictionary.
            </summary>
            <param name="sectionName"> The section name (can be null). </param>
            <returns>
                The dictionary which contains the name-value-pairs of the specified section or null if the specified section does not exist.
                An empty dictionary is returned if the section exists but does not contain any name-value-pairs.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are returned (that is: before the first section header or all if no section header exists).
                </para>
                <para>
                    The returned dictionary uses <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    If the specified section exists multiple times, only the first section is returned as a dictionary.
                    If the same name-value-pair exists multiple times in a section, only the first pair is returned in the dictionary.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.GetSectionAll(System.String)">
            <summary>
                Gets the name-value-pairs of a section as a dictionary.
            </summary>
            <param name="sectionName"> The section name (can be null). </param>
            <returns>
                The dictionary which contains the name-value-pairs of the specified section or null if the specified section does not exist.
                An empty dictionary is returned if the section exists but does not contain any name-value-pairs.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are returned (that is: before the first section header or all if no section header exists).
                </para>
                <para>
                    The returned dictionary uses <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    If the specified section exists multiple times, only the first section is returned as a dictionary.
                    If the same name-value-pair exists multiple times in a section, all pairs are returned in the dictionary (using the inner list).
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.GetSectionNames">
            <summary>
                Gets a set of the names of all available sections.
            </summary>
            <returns>
                The set with the names of all available sections.
                An empty set is returned if no sections are available.
            </returns>
            <remarks>
                <para>
                    If values exist outside a section, the returned set also contains null.
                </para>
                <para>
                    The returned set uses <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.SectionNameComparer" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.GetSections(System.String)">
            <summary>
                Gets the name-value-pairs of a section as dictionaries.
            </summary>
            <param name="sectionName"> The section name (can be null). </param>
            <returns>
                The list which contains all the dictionaries which contain the name-value-pairs of the specified section or null if the specified section does not exist.
                An empty list is returned if the section exists but does not contain any name-value-pairs.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are returned (that is: before the first section header or all if no section header exists).
                    In that case, the returned list contains only one dictionary.
                </para>
                <para>
                    The returned dictionary uses <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    The returned list contains a separate dictionary for each separate section of the specified name.
                    If the same name-value-pair exists multiple times in a section, only the first pair is returned in the corresponding dictionary.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.GetSectionsAll(System.String)">
            <summary>
                Gets the name-value-pairs of a section as dictionaries.
            </summary>
            <param name="sectionName"> The section name (can be null). </param>
            <returns>
                The list which contains all the dictionaries which contain the name-value-pairs of the specified section or null if the specified section does not exist.
                An empty list is returned if the section exists but does not contain any name-value-pairs.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are returned (that is: before the first section header or all if no section header exists).
                    In that case, the returned list contains only one dictionary.
                </para>
                <para>
                    The returned dictionary uses <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    The returned list contains a separate dictionary for each separate section of the specified name.
                    If the same name-value-pair exists multiple times in a section, all pairs are returned in the corresponding dictionary.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.GetValue(System.String,System.String)">
            <summary>
                Gets the value of a specified name in a specified section.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="name"> The name of the value. </param>
            <returns>
                The value or null if the value does not exist.
            </returns>
            <remarks>
                <para>
                    The first matching value of the first matching section is returned.
                    If <paramref name="section" /> is null, the value is searched outside any section.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.GetValueAll(System.String,System.String)">
            <summary>
                Gets the values of a specified name in a specified section.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="name"> The name of the value. </param>
            <returns>
                The values or an empty list if the value does not exist.
            </returns>
            <remarks>
                <para>
                    All matching values of all matching sections are returned.
                    If <paramref name="section" /> is null, the value is searched outside any section.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.GetValues">
            <summary>
                Gets the name-value-pairs of all sections as a dictionary.
            </summary>
            <returns>
                The dictionary which contains dictionaries (one for each section) which contain the name-value-pairs.
                An empty dictionary is returned if no name-value-pairs exist.
            </returns>
            <remarks>
                <para>
                    The returned outer dictionary uses <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.SectionNameComparer" /> and the inner dictionaries use <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    An inner dictionary can be empty if the section exists but has no name-value-pairs.
                </para>
                <para>
                    If a section exists multiple times, all the sections are merged and returned as an inner dictionary.
                    If the same name-value-pair exists multiple times in a section, only the first pair is returned in an inner dictionary.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.GetValuesAll">
            <summary>
                Gets the name-value-pairs of all sections as a dictionary.
            </summary>
            <returns>
                The dictionary which contains dictionaries (one for each section) which contain the name-value-pairs.
                An empty dictionary is returned if no name-value-pairs exist.
            </returns>
            <remarks>
                <para>
                    The returned outer dictionary uses <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.SectionNameComparer" /> and the inner dictionaries use <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.ValueNameComparer" />.
                </para>
                <para>
                    An inner dictionary can be empty if the section exists but has no name-value-pairs.
                </para>
                <para>
                    If a section exists multiple times, all the sections are merged and returned as an inner dictionary.
                    If the same name-value-pair exists multiple times in a section, all values returned in an inner dictionary (using the list).
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Load(RI.Utilities.DataFormats.Ini.IniReader)">
            <summary>
                Loads INI elements from an existing INI reader.
            </summary>
            <param name="reader"> The INI reader from which the elements are loaded. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Ini.IniParsingException"> The INI data read by <paramref name="reader" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Load(System.String)">
            <summary>
                Loads INI elements from a string.
            </summary>
            <param name="data"> The INI data to load. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Ini.IniParsingException"> The INI data read from <paramref name="data" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Load(System.String,RI.Utilities.DataFormats.Ini.IniReaderSettings)">
            <summary>
                Loads INI elements from a string.
            </summary>
            <param name="data"> The INI data to load. </param>
            <param name="settings"> The used INI reader settings or null if default values should be used. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="data" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Ini.IniParsingException"> The INI data read from <paramref name="data" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Load(System.String,System.Text.Encoding)">
            <summary>
                Loads INI elements from an existing INI file.
            </summary>
            <param name="file"> The path of the INI file to load. </param>
            <param name="encoding"> The encoding for reading the INI file. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Ini.IniParsingException"> The INI data read from <paramref name="file" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Load(System.String,System.Text.Encoding,RI.Utilities.DataFormats.Ini.IniReaderSettings)">
            <summary>
                Loads INI elements from an existing INI file.
            </summary>
            <param name="file"> The path of the INI file to load. </param>
            <param name="encoding"> The encoding for reading the INI file. </param>
            <param name="settings"> The used INI reader settings or null if default values should be used. </param>
            <remarks>
                <para>
                    All existing INI elements will be discarded before the new sections are loaded.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
            <exception cref="T:RI.Utilities.DataFormats.Ini.IniParsingException"> The INI data read from <paramref name="file" /> contains invalid elements. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.MergeSections">
            <summary>
                Merges all sections with the same name into one section.
            </summary>
            <remarks>
                <para>
                    <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.SectionNameComparer" /> is used for comparison.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.RemoveComments">
            <summary>
                Removes all comment INI elements from this document.
            </summary>
            <returns>
                true if any comment INI elements were removed, false otherwise.
            </returns>
            <remarks>
                <para>
                    This removes all <see cref="T:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement" />s from all sections.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.RemoveEmptySections">
            <summary>
                Removes all sections which do not have any name-value-pairs.
            </summary>
            <returns>
                A set of section names which were removed.
                An empty set is returned if no sections were removed.
            </returns>
            <remarks>
                <para>
                    The returned set uses <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.SectionNameComparer" />.
                </para>
                <para>
                    If a section only contains text or comment INI elements, the section is considered empty and is removed.
                    Use <see cref="M:RI.Utilities.DataFormats.Ini.IniDocument.RemoveEmptySections(System.Boolean,System.Boolean)" /> if such elements should count as not-empty.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.RemoveEmptySections(System.Boolean,System.Boolean)">
            <summary>
                Removes all sections which are empty.
            </summary>
            <param name="keepIfText"> Specifies whether sections with text INI elements (<see cref="T:RI.Utilities.DataFormats.Ini.Elements.TextIniElement" />) are considered not empty. </param>
            <param name="keepIfComments"> Specifies whether sections with comment INI elements (<see cref="T:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement" />) are considered not empty. </param>
            <returns>
                A set of section names which were removed.
                An empty set is returned if no sections were removed.
            </returns>
            <remarks>
                <para>
                    The returned set uses <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.SectionNameComparer" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.RemoveSections(System.String)">
            <summary>
                Removes all sections of a specified name.
            </summary>
            <param name="sectionName"> The name of the sections to remove (can be null). </param>
            <returns>
                The list of INI elements which were removed from <see cref="P:RI.Utilities.DataFormats.Ini.IniDocument.Elements" />.
                An empty list is returned if no elements were removed.
            </returns>
            <remarks>
                <para>
                    If <paramref name="sectionName" /> is null, all values outside a section are removed (that is: before the first section header or all if no section header exists).
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.RemoveText">
            <summary>
                Removes all text INI elements from this document.
            </summary>
            <returns>
                true if any text INI elements were removed, false otherwise.
            </returns>
            <remarks>
                <para>
                    This removes all <see cref="T:RI.Utilities.DataFormats.Ini.Elements.TextIniElement" />s from all sections.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.RemoveTextAndComments">
            <summary>
                Removes all text and comment INI elements from this document.
            </summary>
            <returns>
                true if any text or comment INI elements were removed, false otherwise.
            </returns>
            <remarks>
                <para>
                    This removes all <see cref="T:RI.Utilities.DataFormats.Ini.Elements.TextIniElement" />s and <see cref="T:RI.Utilities.DataFormats.Ini.Elements.CommentIniElement" />s from all sections.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Save(RI.Utilities.DataFormats.Ini.IniWriter)">
            <summary>
                Saves all INI elements of this INI document to an existing INI writer.
            </summary>
            <param name="writer"> The INI writer to which the elements are saved. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Save(System.IO.TextWriter)">
            <summary>
                Saves all INI elements of this INI document to an existing text writer.
            </summary>
            <param name="writer"> The text writer to which the data is saved. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Save(System.IO.TextWriter,RI.Utilities.DataFormats.Ini.IniWriterSettings)">
            <summary>
                Saves all INI elements of this INI document to an existing text writer.
            </summary>
            <param name="writer"> The text writer to which the data is saved. </param>
            <param name="settings"> The used CSV writer settings or null if default values should be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Save(System.String,System.Text.Encoding)">
            <summary>
                Saves all INI elements of this INI document to an INI file.
            </summary>
            <param name="file"> The path of the INI file to save. </param>
            <param name="encoding"> The encoding for writing the INI file. </param>
            <remarks>
                <para>
                    The INI file will be overwritten with the INI elements from this INI document.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Save(System.String,System.Text.Encoding,RI.Utilities.DataFormats.Ini.IniWriterSettings)">
            <summary>
                Saves all INI elements of this INI document to an INI file.
            </summary>
            <param name="file"> The path of the INI file to save. </param>
            <param name="encoding"> The encoding for writing the INI file. </param>
            <param name="settings"> The used INI writer settings or null if default values should be used. </param>
            <remarks>
                <para>
                    The INI file will be overwritten with the INI elements from this INI document.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> or <paramref name="encoding" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SetValue(System.String,System.String,System.String)">
            <summary>
                Sets the value of a specified name in a specified section.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="name"> The name of the value. </param>
            <param name="value"> The value or null if the value should be removed (similar to <see cref="M:RI.Utilities.DataFormats.Ini.IniDocument.DeleteValue(System.String,System.String)" />). </param>
            <returns>
                true if the value existed before, false otherwise.
            </returns>
            <remarks>
                <para>
                    The first matching value of the first matching section is set, all other matching values are removed.
                    If <paramref name="section" /> is null, the value is set outside any section.
                </para>
                <para>
                    If the section does not yet exist, a new section is created and the value added at its end.
                    If the section exists but not the value, the value is added at the end of the first matching section.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SetValueAll(System.String,System.String,System.Collections.Generic.IList{System.String})">
            <summary>
                Sets the values of a specified name in a specified section.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="name"> The name of the value. </param>
            <param name="values"> The values or null or an empty list if the value should be removed (similar to <see cref="M:RI.Utilities.DataFormats.Ini.IniDocument.DeleteValue(System.String,System.String)" />). </param>
            <returns>
                true if the value existed before, false otherwise.
            </returns>
            <remarks>
                <para>
                    All matching values of all matching sections are set, all other matching values are removed.
                    If <paramref name="section" /> is null, the value is set outside any section.
                </para>
                <para>
                    If the section does not yet exist, a new section is created and the value added at its end.
                    If the section exists but not the value, the value is added at the end of the first matching section.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SetValues(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Sets the name-value-pairs of a section specified by a dictionary.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="values"> The dictionary with the name-value-pairs of the section. </param>
            <remarks>
                <para>
                    If <paramref name="section" /> is null, the value is set outside any section.
                </para>
                <para>
                    All existing sections and their name-value-pairs which are specified by <paramref name="section" /> will be replaced by the specified values.
                    Sections not specified by <paramref name="section" /> will remain unchanged.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="values" /> contains name-value-pairs with invalid names. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SetValues(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
                Sets the name-value-pairs of all sections specified by a dictionary.
            </summary>
            <param name="values"> The dictionary with sections and inner dictionaries for their name-value-pairs. </param>
            <remarks>
                <para>
                    All existing sections and their name-value-pairs which are specified in the outer dictionary will be replaced by the specified values.
                    Sections not specified in the outer dictionary will remain unchanged.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="values" /> contains invalid section names or name-value-pairs with invalid names. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SetValuesAll(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
                Sets the name-value-pairs of a section specified by a dictionary.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="values"> The dictionary with the name-value-pairs of the section. </param>
            <remarks>
                <para>
                    If <paramref name="section" /> is null, the value is set outside any section.
                </para>
                <para>
                    All existing sections and their name-value-pairs which are specified by <paramref name="section" /> will be replaced by the specified values.
                    Sections not specified by <paramref name="section" /> will remain unchanged.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="values" /> contains name-value-pairs with invalid names. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SetValuesAll(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}})">
            <summary>
                Sets the name-value-pairs of all sections specified by a dictionary.
            </summary>
            <param name="values"> The dictionary with sections and inner dictionaries for their name-value-pairs. </param>
            <remarks>
                <para>
                    All existing sections and their name-value-pairs which are specified in the outer dictionary will be replaced by the specified values.
                    Sections not specified in the outer dictionary will remain unchanged.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="values" /> contains invalid section names or name-value-pairs with invalid names. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SortElements">
            <summary>
                Sorts the INI elements in all sections based on their names.
            </summary>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used for comparison.
                </para>
                <note type="important">
                    Sorting of INI elements in a section does only work reliable if a section only contains <see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" />s.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SortElements(System.Collections.Generic.IComparer{System.String})">
            <summary>
                Sorts the INI elements in all sections based on their names.
            </summary>
            <param name="comparer"> The comparer used to compare the names of name-value-pairs. </param>
            <remarks>
                <note type="important">
                    Sorting of INI elements in a section does only work reliable if a section only contains <see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" />s.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SortElements(System.Collections.Generic.IComparer{RI.Utilities.DataFormats.Ini.IniElement})">
            <summary>
                Sorts the INI elements in all sections.
            </summary>
            <param name="comparer"> The comparer used to compare INI elements. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SortElements(System.String)">
            <summary>
                Sorts the INI elements in a specified section based on their names.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used for comparison.
                </para>
                <para>
                    All elements in all sections matching the specified section name are sorted.
                    If <paramref name="section" /> is null, the elements outside any sections are sorted.
                </para>
                <note type="important">
                    Sorting of INI elements in a section does only work reliable if a section only contains <see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" />s.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SortElements(System.String,System.Collections.Generic.IComparer{System.String})">
            <summary>
                Sorts the INI elements in a specified section based on their names.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="comparer"> The comparer used to compare the names of name-value-pairs. </param>
            <remarks>
                <para>
                    All elements in all sections matching the specified section name are sorted.
                    If <paramref name="section" /> is null, the elements outside any sections are sorted.
                </para>
                <note type="important">
                    Sorting of INI elements in a section does only work reliable if a section only contains <see cref="T:RI.Utilities.DataFormats.Ini.Elements.ValueIniElement" />s.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SortElements(System.String,System.Collections.Generic.IComparer{RI.Utilities.DataFormats.Ini.IniElement})">
            <summary>
                Sorts the INI elements in a specified section.
            </summary>
            <param name="section"> The name of the section (can be null). </param>
            <param name="comparer"> The comparer used to compare INI elements. </param>
            <remarks>
                <para>
                    All elements in all sections matching the specified section name are sorted.
                    If <paramref name="section" /> is null, the elements outside any sections are sorted.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="comparer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SortSections">
            <summary>
                Sorts the sections based on their names.
            </summary>
            <remarks>
                <para>
                    <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used for comparison.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.SortSections(System.Collections.Generic.IComparer{System.String})">
            <summary>
                Sorts the sections.
            </summary>
            <param name="comparer"> The comparer used to compare the region names. </param>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniDocument.Clone">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniElement">
            <summary>
                The base class for all INI elements.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniParsingException">
            <summary>
                The <see cref="T:RI.Utilities.DataFormats.Ini.IniParsingException" /> is thrown when invalid INI elements are encountered while parsing INI data.
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniParsingException.#ctor(System.Int32,RI.Utilities.DataFormats.Ini.IniReaderError)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniParsingException" />.
            </summary>
            <param name="lineNumber"> The line number where the parsing error ocurred. </param>
            <param name="readerError"> The parsing error which ocurred. </param>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniParsingException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniParsingException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniParsingException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniParsingException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniParsingException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniParsingException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniParsingException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniReader">
            <summary>
                Implements a forward-only INI reader which iteratively reads INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Add constructor with doNotOwn parameter
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniReader.#ctor(System.IO.TextReader)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniReader" />.
            </summary>
            <param name="reader"> The used <see cref="T:System.IO.TextReader" />. </param>
            <remarks>
                <para>
                    INI reader settings with default values are used.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniReader.#ctor(System.IO.TextReader,RI.Utilities.DataFormats.Ini.IniReaderSettings)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniReader" />.
            </summary>
            <param name="reader"> The used <see cref="T:System.IO.TextReader" />. </param>
            <param name="settings"> The used INI reader settings or null if default values should be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniReader.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniReader" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniReader.BaseReader">
            <summary>
                Gets the <see cref="T:System.IO.TextReader" /> which is used by this INI reader to read the INI data.
            </summary>
            <value>
                The <see cref="T:System.IO.TextReader" /> which is used by this INI reader to read the INI data or null if the the INI reader is closed/disposed.
            </value>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniReader.CurrentElement">
            <summary>
                Gets the current INI element which was read during the last call to <see cref="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext" />.
            </summary>
            <value>
                The current INI element or null if last call to <see cref="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext" /> created an error (<see cref="P:RI.Utilities.DataFormats.Ini.IniReader.CurrentError" />).
            </value>
            <remarks>
                <para>
                    Before the first call to <see cref="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext" />, this property is null.
                </para>
                <para>
                    This property keeps its last value even if <see cref="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext" /> returns false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniReader.CurrentError">
            <summary>
                Gets the current error which ocurred during the last call to <see cref="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext" />.
            </summary>
            <value>
                The current error.
            </value>
            <remarks>
                <para>
                    Before the first call to <see cref="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext" />, this property is <see cref="F:RI.Utilities.DataFormats.Ini.IniReaderError.None" />.
                </para>
                <para>
                    This property keeps its last value even if <see cref="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext" /> returns false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniReader.CurrentLineNumber">
            <summary>
                Gets the current line number in the INI data to which <see cref="P:RI.Utilities.DataFormats.Ini.IniReader.CurrentElement" /> or <see cref="P:RI.Utilities.DataFormats.Ini.IniReader.CurrentError" /> corresponds to.
            </summary>
            <value>
                The current line number.
            </value>
            <remarks>
                <para>
                    Before the first call to <see cref="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext" />, this property is zero.
                </para>
                <para>
                    This property keeps its last value even if <see cref="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext" /> returns false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniReader.Settings">
            <summary>
                Gets the used reader settings for this INI reader.
            </summary>
            <value>
                The used reader settings for this INI reader.
            </value>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniReader.Close">
            <summary>
                Closes this INI reader and its underlying <see cref="T:System.IO.TextReader" /> (<see cref="P:RI.Utilities.DataFormats.Ini.IniReader.BaseReader" />).
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniReader.ReadNext">
            <summary>
                Reads the next INI element from the INI data.
            </summary>
            <returns>
                true if an element was read and <see cref="P:RI.Utilities.DataFormats.Ini.IniReader.CurrentElement" /> was updated, false if there are no more INI elements (<see cref="P:RI.Utilities.DataFormats.Ini.IniReader.CurrentElement" /> keeps its last value).
            </returns>
            <remarks>
                <note type="note">
                    The INI data is read line-by-line.
                    Multiple consecutive comment or text lines are combined into a single comment or text line.
                </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException"> The INI reader has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniReader.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniReaderError">
            <summary>
                Describes an error which ocurred during reading INI data using an <see cref="T:RI.Utilities.DataFormats.Ini.IniReader" />.
            </summary>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniReaderError.None">
            <summary>
                No error (no line read or the last line which was read is valid).
            </summary>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniReaderError.InvalidSectionName">
            <summary>
                The last line read is a section header containing an invalid section name.
            </summary>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniReaderError.InvalidValueName">
            <summary>
                The last line read is a name-value-pair with an invalid name.
            </summary>
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniReaderSettings">
            <summary>
                Provides INI reader settings.
            </summary>
            <remarks>
                <para>
                    INI reader settings can be used to customize how INI data is read and processed.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniSectionAddMode">
            <summary>
                Defines how sections are added to an <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> using <see cref="M:RI.Utilities.DataFormats.Ini.IniDocument.AddSection(System.String,RI.Utilities.DataFormats.Ini.IniSectionAddMode,System.Collections.Generic.IDictionary{System.String,System.String})" /> and <see cref="M:RI.Utilities.DataFormats.Ini.IniDocument.AddSection(System.String,RI.Utilities.DataFormats.Ini.IniSectionAddMode,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})" />.
            </summary>
            <remarks>
                <para>
                    <see cref="F:RI.Utilities.DataFormats.Ini.IniSectionAddMode.AppendSame" />: If no other section with the same name exists, the behaviour is the same as <see cref="F:RI.Utilities.DataFormats.Ini.IniSectionAddMode.AppendEnd" />.
                </para>
                <para>
                    <see cref="F:RI.Utilities.DataFormats.Ini.IniSectionAddMode.MergeSame" />: If no other section with the same name exists, the behaviour is the same as <see cref="F:RI.Utilities.DataFormats.Ini.IniSectionAddMode.AppendEnd" />.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniSectionAddMode.AppendEnd">
            <summary>
                Appends the section, including a new section header, at the end of the <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" />.
            </summary>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniSectionAddMode.AppendSame">
            <summary>
                Appends the section, including a new section header, after the last section of the same name.
            </summary>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniSectionAddMode.MergeSame">
            <summary>
                Adds the elements of the section at the end of the first already existing section with the same name.
            </summary>
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniSettings">
            <summary>
                Provides basic INI data settings for both readers and writers.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultCommentStart">
            <summary>
                The default character which starts a comment.
            </summary>
            <remarks>
                <para>
                    The default value is <c> ; </c>.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultEscapeCharacter">
            <summary>
                The default character which is used to escape certain characters.
            </summary>
            <remarks>
                <para>
                    The default value is <c> | </c>.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultNameValueSeparator">
            <summary>
                The default separator between a name and its value.
            </summary>
            <remarks>
                <para>
                    The default value is <c> = </c>.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultSectionEnd">
            <summary>
                The default character which ends a section name.
            </summary>
            <remarks>
                <para>
                    The default value is <c> ] </c>.
                </para>
            </remarks>
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultSectionStart">
            <summary>
                The default character which starts a section name.
            </summary>
            <remarks>
                <para>
                    The default value is <c> [ </c>.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniSettings.CommentStart">
            <summary>
                Gets or sets the character which starts a comment.
            </summary>
            <value>
                The character which starts a comment.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultCommentStart" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniSettings.EscapeCharacter">
            <summary>
                Gets or sets the character which is used to escape certain characters.
            </summary>
            <value>
                The character which is used to escape certain characters.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultEscapeCharacter" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniSettings.NameValueSeparator">
            <summary>
                Gets or sets the separator between a name and its value.
            </summary>
            <value>
                The separator between a name and its value.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultNameValueSeparator" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniSettings.SectionEnd">
            <summary>
                Gets or sets the character which ends a section name.
            </summary>
            <value>
                The character which ends a section name.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultSectionEnd" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniSettings.SectionStart">
            <summary>
                Gets or sets the character which starts a section name.
            </summary>
            <value>
                The character which starts a section name.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Ini.IniSettings.DefaultSectionStart" />.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniWriter">
            <summary>
                Implements a forward-only INI writer which iteratively writes INI data.
            </summary>
            <remarks>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Add constructor with doNotOwn parameter
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.#ctor(System.IO.TextWriter)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniWriter" />.
            </summary>
            <param name="writer"> The used <see cref="T:System.IO.TextWriter" />. </param>
            <remarks>
                <para>
                    INI writer settings with default values are used.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.#ctor(System.IO.TextWriter,RI.Utilities.DataFormats.Ini.IniWriterSettings)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniWriter" />.
            </summary>
            <param name="writer"> The used <see cref="T:System.IO.TextWriter" />. </param>
            <param name="settings"> The used INI writer settings or null if default values should be used. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.DataFormats.Ini.IniWriter" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniWriter.BaseWriter">
            <summary>
                Gets the <see cref="T:System.IO.TextWriter" /> which is used by this INI writer to write the INI data.
            </summary>
            <value>
                The <see cref="T:System.IO.TextWriter" /> which is used by this INI writer to write the INI data or null if the the INI writer is closed/disposed.
            </value>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniWriter.Settings">
            <summary>
                Gets the used writer settings for this INI writer.
            </summary>
            <value>
                The used writer settings for this INI writer.
            </value>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.Close">
            <summary>
                Closes this INI writer and its underlying <see cref="T:System.IO.TextWriter" /> (<see cref="P:RI.Utilities.DataFormats.Ini.IniWriter.BaseWriter" />).
            </summary>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.Flush">
            <summary>
                Flushes all written data to the underlying <see cref="T:System.IO.TextWriter" /> (<see cref="P:RI.Utilities.DataFormats.Ini.IniWriter.BaseWriter" />).
            </summary>
            <exception cref="T:System.ObjectDisposedException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.WriteComment(System.String)">
            <summary>
                Writes a comment.
            </summary>
            <param name="comment"> The comment. </param>
            <remarks>
                <para>
                    The comment will not be encoded but if it contains multiple lines, multiple actual comments will be written (one per line).
                </para>
                <para>
                    If <paramref name="comment" /> is null or an empty string, an empty string is written as comment.
                </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.WriteElement(RI.Utilities.DataFormats.Ini.IniElement)">
            <summary>
                Writes an INI element.
            </summary>
            <param name="element"> The element to write. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="element" /> is null. </exception>
            <exception cref="T:System.ObjectDisposedException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.WriteSection(System.String)">
            <summary>
                Writes a section header.
            </summary>
            <param name="sectionName"> The name of the section. </param>
            <remarks>
                <para>
                    The written section name will be encoded which means that certain special characters used in INI files will be replaced with escape sequences.
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more details.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sectionName" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="sectionName" /> is an empty string. </exception>
            <exception cref="T:System.ObjectDisposedException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.WriteText(System.String)">
            <summary>
                Writes arbitrary text.
            </summary>
            <param name="text"> The text. </param>
            <remarks>
                <para>
                    The text will not be encoded but if it contains multiple lines, multiple actual text lines will be written.
                </para>
                <para>
                    If <paramref name="text" /> is null or an empty string, an empty string is written as text.
                </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.WriteValue(System.String,System.String)">
            <summary>
                Writes a name-value-pair.
            </summary>
            <param name="name"> The name. </param>
            <param name="value"> The value. </param>
            <remarks>
                <para>
                    The written name and value will be encoded which means that certain special characters used in INI files will be replaced with escape sequences.
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more details.
                </para>
                <para>
                    If <paramref name="value" /> is null or an empty string, an empty string is written as value.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="name" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="name" /> is an empty string. </exception>
            <exception cref="T:System.ObjectDisposedException"> The INI writer has been closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.DataFormats.Ini.IniWriter.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.IniWriterSettings">
            <summary>
                Provides INI writer settings.
            </summary>
            <remarks>
                <para>
                    INI writer settings can be used to customize how INI data is generated and formated.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.DataFormats.Ini.IniDocument" /> for more general and detailed information about working with INI data.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:RI.Utilities.DataFormats.Ini.IniWriterSettings.DefaultEmptyLineBeforeSectionHeader">
            <summary>
                The default whether an additional new line is written before a section header.
            </summary>
            <remarks>
                <para>
                    The default value is false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.DataFormats.Ini.IniWriterSettings.EmptyLineBeforeSectionHeader">
            <summary>
                Gets or sets whether an additional new line is written before a section header.
            </summary>
            <value>
                true if an additional new line is written before a section header, false otherwise.
            </value>
            <remarks>
                <para>
                    The default value is <see cref="F:RI.Utilities.DataFormats.Ini.IniWriterSettings.DefaultEmptyLineBeforeSectionHeader" />.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Utilities.DataFormats.Ini.NamespaceDoc">
            <summary>
                Contains types to process INI data.
            </summary>
        </member>
        <member name="T:RI.Utilities.DataFormats.NamespaceDoc">
            <summary>
                Contains new types for handling various data formats.
            </summary>
        </member>
        <member name="T:RI.Utilities.Dates.DateTimeExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> types.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Dates.DateTimeExtensions.ToIso8601String(System.DateTime)">
            <summary>
                Converts a date and time to an ISO8601 round-trip compatible string.
            </summary>
            <param name="dateTime"> The date and time. </param>
            <returns>
                The date and time as an ISO8601 round-trip compatible string.
                Example: <c> 2016-02-01T14:30:50.3330000 </c>
            </returns>
        </member>
        <member name="M:RI.Utilities.Dates.DateTimeExtensions.ToIso8601String(System.DateTimeOffset)">
            <summary>
                Converts a date and time with UTC offset to an ISO8601 round-trip compatible string.
            </summary>
            <param name="dateTimeOffset"> The date and time with UTC offset. </param>
            <returns>
                The date and time with UTC offset as an ISO8601 round-trip compatible string.
                Example: <c> 2016-02-01T14:30:50.3330000+02:00 </c>
            </returns>
        </member>
        <member name="M:RI.Utilities.Dates.DateTimeExtensions.ToSortableString(System.DateTime)">
            <summary>
                Converts a date and time into a sortable string.
            </summary>
            <param name="dateTime"> The date and time. </param>
            <returns>
                The date and time as a sortable string in the following format yyyyMMddHHmmssfff with no separator between the units.
                Example: <c> 20160201143050333 </c>
            </returns>
        </member>
        <member name="M:RI.Utilities.Dates.DateTimeExtensions.ToSortableString(System.DateTime,System.Char)">
            <summary>
                Converts a date and time into a sortable string.
            </summary>
            <param name="dateTime"> The date and time. </param>
            <param name="separator"> The separator between each unit of the date and time. </param>
            <returns>
                The date and time as a sortable string in the following format yyyy-MM-dd-HH-mm-ss-fff where the dash is the used separator.
                Example: <c> 2016_02_01_14_30_50_333 </c> when used with the underscore as a separator.
            </returns>
        </member>
        <member name="M:RI.Utilities.Dates.DateTimeExtensions.ToSortableString(System.DateTime,System.String)">
            <summary>
                Converts a date and time into a sortable string.
            </summary>
            <param name="dateTime"> The date and time. </param>
            <param name="separator"> The separator between each unit of the date and time. Can be null to use no separator. </param>
            <returns>
                The date and time as a sortable string in the following format yyyy-MM-dd-HH-mm-ss-fff where the dash is the used separator.
                Example: <c> 2016_02_01_14_30_50_333 </c> when used with the underscore as a separator.
            </returns>
        </member>
        <member name="T:RI.Utilities.Dates.TimeSpanExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.TimeSpan" /> type.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:RI.Utilities.Dates.TimeSpanExtensions.EarliestValidTimeOfDay">
            <summary>
                The time span value which represents the earliest valid time of day.
            </summary>
            <value>
                The time span value which represents the earliest valid time of day.
            </value>
            <remarks>
                <para>
                    The value is 00:00:00:00:000 (days, hours, minutes, seconds, milliseconds).
                </para>
            </remarks>
        </member>
        <member name="F:RI.Utilities.Dates.TimeSpanExtensions.LatestValidTimeOfDay">
            <summary>
                The time span value which represents the earliest valid time of day.
            </summary>
            <value>
                The time span value which represents the earliest valid time of day.
            </value>
            <remarks>
                <para>
                    The value is 00:23:59:59:999 (days, hours, minutes, seconds, milliseconds).
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Dates.TimeSpanExtensions.IsNegative(System.TimeSpan)">
            <summary>
                Determines whether a time span is negative.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <returns>
                true if the time span is negative, false otherwise.
            </returns>
            <remarks>
                <note type="note">
                    Zero is considered not negative.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Dates.TimeSpanExtensions.IsPositive(System.TimeSpan)">
            <summary>
                Determines whether a time span is positive.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <returns>
                true if the time span is positive, false otherwise.
            </returns>
            <remarks>
                <note type="note">
                    Zero is considered positive.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Dates.TimeSpanExtensions.IsValidTimeOfDay(System.TimeSpan)">
            <summary>
                Checks whether a time span represents a valid time of day.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <returns>
                true if the time span represents a valid time of day, false otherwise.
            </returns>
            <remarks>
                <para>
                    A valid time of day is between <see cref="F:RI.Utilities.Dates.TimeSpanExtensions.EarliestValidTimeOfDay" /> (inclusive) and <see cref="F:RI.Utilities.Dates.TimeSpanExtensions.LatestValidTimeOfDay" /> (inclusive).
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Dates.TimeSpanExtensions.IsZero(System.TimeSpan)">
            <summary>
                Determines whether a time span is zero.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <returns>
                true if the time span is zero, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Dates.TimeSpanExtensions.ToSortableString(System.TimeSpan)">
            <summary>
                Converts a time span into a sortable string.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <returns>
                The time span as a sortable string in the following format %dhhmmssfff with no separator between the units.
                Example: <c> 1143050333 </c>
            </returns>
        </member>
        <member name="M:RI.Utilities.Dates.TimeSpanExtensions.ToSortableString(System.TimeSpan,System.Char)">
            <summary>
                Converts a time span into a sortable string.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <param name="separator"> The separator between each unit of the time span. </param>
            <returns>
                The time span as a sortable string in the following format %d-hh-mm-ss-fff where the dash is the used separator.
                Example: <c> 1_14_30_50_333 </c> when used with the underscore as a separator.
            </returns>
        </member>
        <member name="M:RI.Utilities.Dates.TimeSpanExtensions.ToSortableString(System.TimeSpan,System.String)">
            <summary>
                Converts a time span into a sortable string.
            </summary>
            <param name="timeSpan"> The time span. </param>
            <param name="separator"> The separator between each unit of the time span. Can be null to use no separator. </param>
            <returns>
                The time span as a sortable string in the following format %d-hh-mm-ss-fff where the dash is the used separator.
                Example: <c> 1_14_30_50_333 </c> when used with the underscore as a separator.
            </returns>
        </member>
        <member name="T:RI.Utilities.Dates.NamespaceDoc">
            <summary>
                Contains date and time utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.Exceptions.EmptyStringArgumentException">
            <summary>
                The <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" /> is thrown when a string argument is empty (has a length of zero or only whitespaces).
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.EmptyStringArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.EmptyStringArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which has an empty string. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.EmptyStringArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which has an empty string. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.EmptyStringArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.EmptyStringArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which has an empty string. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.EmptyStringArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Exceptions.ExceptionExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Exception" /> type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.ExceptionExtensions.ToDetailedString(System.Exception)">
            <summary>
                Creates a detailed string representation of an exception.
            </summary>
            <param name="exception"> The exception. </param>
            <returns>
                The detailed string representation of the exception.
            </returns>
            <remarks>
                <note type="note">
                    The created string representation is not intented for serializing or storing an exception, it is only used for logging and debugging purposes.
                </note>
                <para>
                    A single space character is used as an indentation string for inner exceptions.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Exceptions.ExceptionExtensions.ToDetailedString(System.Exception,System.String)">
            <summary>
                Creates a detailed string representation of an exception.
            </summary>
            <param name="exception"> The exception. </param>
            <param name="indentString"> An indentation string which is used to indent inner exceptions in the string. </param>
            <returns>
                The detailed string representation of the exception.
            </returns>
            <remarks>
                <note type="note">
                    The created string representation is not intented for serializing or storing an exception, it is only used for logging and debugging purposes.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Exceptions.ExceptionExtensions.ToDetailedString(System.Exception,System.Char)">
            <summary>
                Creates a detailed string representation of an exception.
            </summary>
            <param name="exception"> The exception. </param>
            <param name="indentChar"> An indentation character which is used to indent inner exceptions in the string. </param>
            <returns>
                The detailed string representation of the exception.
            </returns>
            <remarks>
                <note type="note">
                    The created string representation is not intented for serializing or storing an exception, it is only used for logging and debugging purposes.
                </note>
            </remarks>
        </member>
        <member name="T:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException">
            <summary>
                The <see cref="T:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException" /> is thrown when a generic argument is not of an expected or compatible type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose type is invalid. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException.#ctor(System.String,System.Type,System.Type)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose type is invalid. </param>
            <param name="expectedType"> The expected type of the argument. </param>
            <param name="actualType"> The actually provided type of the argument. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter whose type is invalid. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter whose type is invalid. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidGenericTypeArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Exceptions.InvalidPathArgumentException">
            <summary>
                The <see cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException" /> is thrown when an argument is not a valid path or a path of an unexpected type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidPathArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose path is invalid. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.String,RI.Utilities.Paths.PathError)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose path is invalid. </param>
            <param name="error"> The path error as analyzed by <see cref="T:RI.Utilities.Paths.PathProperties" />. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter whose path is invalid. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter whose path is invalid. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidPathArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Exceptions.InvalidTypeArgumentException">
            <summary>
                The <see cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException" /> is thrown when an argument is not of an expected or compatible type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidTypeArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose type is invalid. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.String,System.Type,System.Type)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
            <param name="paramName"> The parameter whose type is invalid. </param>
            <param name="expectedType"> The expected type of the argument. </param>
            <param name="actualType"> The actually provided type of the argument. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter whose type is invalid. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter whose type is invalid. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.InvalidTypeArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException">
            <summary>
                The <see cref="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException" /> is thrown when an argument is not of an enumeration type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is not an enumeration. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which is not an enumeration. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which is not an enumeration. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotAnEnumerationArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Exceptions.NotFiniteArgumentException">
            <summary>
                The <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" /> is thrown when a floating point argument is not a finite number (means: it is "NaN"/"Not-a-Number" or infinity (either positive or negative)).
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotFiniteArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotFiniteArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which has a not-finite number. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotFiniteArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which has a not-finite number. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotFiniteArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotFiniteArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which has a not-finite number. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotFiniteArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException">
            <summary>
                The <see cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException" /> is thrown when a <see cref="T:System.IO.Stream" /> argument cannot be read.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is a not readable <see cref="T:System.IO.Stream" />. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which is a not readable <see cref="T:System.IO.Stream" />. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which is a not readable <see cref="T:System.IO.Stream" />. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotReadableStreamArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Exceptions.NotSeekableStreamArgumentException">
            <summary>
                The <see cref="T:RI.Utilities.Exceptions.NotSeekableStreamArgumentException" /> is thrown when a <see cref="T:System.IO.Stream" /> argument cannot be accessed randomly.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is a not randomly accessible <see cref="T:System.IO.Stream" />. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which is a not randomly accessible <see cref="T:System.IO.Stream" />. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which is a not randomly accessible <see cref="T:System.IO.Stream" />. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotSeekableStreamArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotSeekableStreamArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException">
            <summary>
                The <see cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException" /> is thrown when a <see cref="T:System.IO.Stream" /> argument cannot be written.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
            <param name="paramName"> The parameter which is a not writeable <see cref="T:System.IO.Stream" />. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor(System.String,System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which is a not writeable <see cref="T:System.IO.Stream" />. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="paramName"> The parameter which is a not writeable <see cref="T:System.IO.Stream" />. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Exceptions.NotWriteableStreamArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Exceptions.NamespaceDoc">
            <summary>
                Contains new general exception types and exception utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.Globalization.CultureInfoExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Globalization.CultureInfo" /> type.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Globalization.CultureInfoExtensions.EqualsLanguage(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
                Determines whether two cultures have the same language.
            </summary>
            <param name="culture"> The first culture. </param>
            <param name="other"> The second culture. </param>
            <returns>
                true if the two cultures have the same language, false otherwise.
            </returns>
            <remarks>
                <para>
                    Two cultures are considered language-equal if the have the same language part.
                    For example, <c> en-US </c> is language-equal to <c> en </c> or <c> en-GB </c>, but not to <c> de-DE </c> or <c> fr </c>.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="culture" /> or <paramref name="other" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Globalization.NamespaceDoc">
            <summary>
                Contains globalization utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.Numbers.DoubleExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Double" /> type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Numbers.DoubleExtensions.GetValueOrDefault(System.Double)">
            <summary>
                Gets the number or the default value (0.0) if a double precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns>
                Zero if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), <paramref name="value" /> otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.DoubleExtensions.GetValueOrDefault(System.Double,System.Double)">
            <summary>
                Gets the number or a specified default value if a double precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <param name="valueIfNanOrInfinity"> The value to return when <paramref name="value" /> is "NaN"/"Not-a-Number" or infinity. </param>
            <returns>
                <paramref name="valueIfNanOrInfinity" /> if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), <paramref name="value" /> otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.DoubleExtensions.IsInfinity(System.Double)">
            <summary>
                Determines whether a double precision floating point number is infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns>
                true if the number is infinity (either positive or negative), false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.DoubleExtensions.IsNan(System.Double)">
            <summary>
                Determines whether a double precision floating point number is "NaN"/"Not-a-Number".
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns>
                true if the number is "NaN"/"Not-a-Number", false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.DoubleExtensions.IsNanOrInfinity(System.Double)">
            <summary>
                Determines whether a double precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns>
                true if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.DoubleExtensions.IsNumber(System.Double)">
            <summary>
                Determines whether a double precision floating point number is neither "NaN"/"Not-a-Number" nor infinity (positive or negative).
            </summary>
            <param name="value"> The double precision floating point number. </param>
            <returns>
                true if the number is neither "NaN"/"Not-a-Number" nor infinity (either positive or negative) but rather a real number, false otherwise.
            </returns>
        </member>
        <member name="T:RI.Utilities.Numbers.FloatExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Single" /> type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Numbers.FloatExtensions.GetValueOrDefault(System.Single)">
            <summary>
                Gets the number or the default value (0.0f) if a single precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns>
                Zero if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), <paramref name="value" /> otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.FloatExtensions.GetValueOrDefault(System.Single,System.Single)">
            <summary>
                Gets the number or a specified default value if a single precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <param name="valueIfNanOrInfinity"> The value to return when <paramref name="value" /> is "NaN"/"Not-a-Number" or infinity. </param>
            <returns>
                <paramref name="valueIfNanOrInfinity" /> if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), <paramref name="value" /> otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.FloatExtensions.IsInfinity(System.Single)">
            <summary>
                Determines whether a single precision floating point number is infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns>
                true if the number is infinity (either positive or negative), false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.FloatExtensions.IsNan(System.Single)">
            <summary>
                Determines whether a single precision floating point number is "NaN"/"Not-a-Number".
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns>
                true if the number is "NaN"/"Not-a-Number", false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.FloatExtensions.IsNanOrInfinity(System.Single)">
            <summary>
                Determines whether a single precision floating point number is "NaN"/"Not-a-Number" or infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns>
                true if the number is "NaN"/"Not-a-Number" or infinity (either positive or negative), false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.FloatExtensions.IsNumber(System.Single)">
            <summary>
                Determines whether a single precision floating point number is neither "NaN"/"Not-a-Number" nor infinity (positive or negative).
            </summary>
            <param name="value"> The single precision floating point number. </param>
            <returns>
                true if the number is neither "NaN"/"Not-a-Number" nor infinity (either positive or negative) but rather a real number, false otherwise.
            </returns>
        </member>
        <member name="T:RI.Utilities.Numbers.MathConstD">
            <summary>
                Mathematical and physical constants as <see cref="T:System.Double" />s.
            </summary>
            TODO: Add more from https://en.wikipedia.org/wiki/List_of_physical_constants and https://en.wikipedia.org/wiki/Mathematical_constant
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.DefaultAccuracy">
            <summary>
                The default accuracy value used for zero and almost-zero comparisons.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.DegToRad">
            <summary>
                The factor used to convert a degree value to a radians value.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.E">
            <summary>
                The Euler number e.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.EarthAcceleration">
            <summary>
                The average earths acceleration/gravity on its surface in [m/s^2].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.Pi">
            <summary>
                The Archimedes constant Pi.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.RadToDeg">
            <summary>
                The factor used to convert a radians value to a degree value.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.Root2">
            <summary>
                The Pythagoras constant square-root of 2.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.SpeedOfLight">
            <summary>
                The speed of light in vacuum in [m/s].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.ElementaryCharge">
            <summary>
                The elementary charge in [C].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.GravitationalConstant">
            <summary>
                The universal gravitational constant in [m^3kg^-1s^-2].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.Root3">
            <summary>
                The Theodorus constant square-root of 3.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.Root5">
            <summary>
                The square-root of 5.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.GoldenRatio">
            <summary>
                The golden ratio.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.PlanckConstant">
            <summary>
                The Planck constant in [Js].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.VacuumElectricPermittivity">
            <summary>
                The electric permittivity of the vacuum in [Fm^-1].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.VacuumMagneticPermeability">
            <summary>
                The magnetic permeability of the vacuum in [NA^-2].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstD.VacuumImpedance">
            <summary>
                The characteristic impedance of the vacuum in [Ohm].
            </summary>
        </member>
        <member name="T:RI.Utilities.Numbers.MathConstF">
            <summary>
                Mathematical and physical constants as <see cref="T:System.Single" />s.
            </summary>
            TODO: Add more from https://en.wikipedia.org/wiki/List_of_physical_constants and https://en.wikipedia.org/wiki/Mathematical_constant
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.DefaultAccuracy">
            <summary>
                The default accuracy value used for zero and almost-zero comparisons.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.DegToRad">
            <summary>
                The factor used to convert a degree value to a radians value.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.E">
            <summary>
                The Euler number e.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.EarthAcceleration">
            <summary>
                The average earths acceleration/gravity on its surface in [m/s^2].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.Pi">
            <summary>
                The Archimedes constant Pi.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.RadToDeg">
            <summary>
                The factor used to convert a radians value to a degree value.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.Root2">
            <summary>
                The Pythagoras constant square-root of 2.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.SpeedOfLight">
            <summary>
                The speed of light in vacuum in [m/s].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.ElementaryCharge">
            <summary>
                The elementary charge in [C].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.GravitationalConstant">
            <summary>
                The universal gravitational constant in [m^3kg^-1s^-2].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.Root3">
            <summary>
                The Theodorus constant square-root of 3.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.Root5">
            <summary>
                The square-root of 5.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.GoldenRatio">
            <summary>
                The golden ratio.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.PlanckConstant">
            <summary>
                The Planck constant in [Js].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.VacuumElectricPermittivity">
            <summary>
                The electric permittivity of the vacuum in [Fm^-1].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.VacuumMagneticPermeability">
            <summary>
                The magnetic permeability of the vacuum in [NA^-2].
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.MathConstF.VacuumImpedance">
            <summary>
                The characteristic impedance of the vacuum in [Ohm].
            </summary>
        </member>
        <member name="T:RI.Utilities.Numbers.MathUtils">
            <summary>
            Provides various mathematical utility methods.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.SByte,System.SByte)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.SByte,System.SByte)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.Byte,System.Byte)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.Byte,System.Byte)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.Int16,System.Int16)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.Int16,System.Int16)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.UInt16,System.UInt16)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.UInt16,System.UInt16)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.Int32,System.Int32)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.Int32,System.Int32)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.UInt32,System.UInt32)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.UInt32,System.UInt32)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.Int64,System.Int64)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.Int64,System.Int64)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.UInt64,System.UInt64)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.UInt64,System.UInt64)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.Single,System.Single)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.Single,System.Single)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.Double,System.Double)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.Double,System.Double)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Gcd(System.Decimal,System.Decimal)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.MathUtils.Lcm(System.Decimal,System.Decimal)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="T:RI.Utilities.Numbers.NumberExtensions">
            <summary>
                Provides utility/extension methods for numerical types.
            </summary>
            <remarks>
            <para>
            Numerical types are: <see cref="T:System.SByte"/>, <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.
            </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.SByte,System.SByte)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.SByte,System.SByte)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.SByte,System.SByte)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.SByte,System.SByte,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.SByte,System.SByte)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.SByte,System.SByte)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetDigits(System.SByte)">
            <summary>
            Gets each digit of a value as separate integers.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The list of digits.
            The most-significant digit comes first, the least-significant digit comes last.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.Byte,System.Byte)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.Byte,System.Byte)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Byte,System.Byte)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Byte,System.Byte,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.Byte,System.Byte)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.Byte,System.Byte)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetDigits(System.Byte)">
            <summary>
            Gets each digit of a value as separate integers.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The list of digits.
            The most-significant digit comes first, the least-significant digit comes last.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.Int16,System.Int16)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.Int16,System.Int16)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Int16,System.Int16)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Int16,System.Int16,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.Int16,System.Int16)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.Int16,System.Int16)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetDigits(System.Int16)">
            <summary>
            Gets each digit of a value as separate integers.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The list of digits.
            The most-significant digit comes first, the least-significant digit comes last.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.UInt16,System.UInt16)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.UInt16,System.UInt16)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.UInt16,System.UInt16)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.UInt16,System.UInt16,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.UInt16,System.UInt16)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.UInt16,System.UInt16)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.UInt16})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetDigits(System.UInt16)">
            <summary>
            Gets each digit of a value as separate integers.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The list of digits.
            The most-significant digit comes first, the least-significant digit comes last.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.Int32,System.Int32)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.Int32,System.Int32)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Int32,System.Int32)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Int32,System.Int32,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.Int32,System.Int32)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.Int32,System.Int32)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetDigits(System.Int32)">
            <summary>
            Gets each digit of a value as separate integers.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The list of digits.
            The most-significant digit comes first, the least-significant digit comes last.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.UInt32,System.UInt32)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.UInt32,System.UInt32)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.UInt32,System.UInt32)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.UInt32,System.UInt32,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.UInt32,System.UInt32)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.UInt32,System.UInt32)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetDigits(System.UInt32)">
            <summary>
            Gets each digit of a value as separate integers.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The list of digits.
            The most-significant digit comes first, the least-significant digit comes last.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.Int64,System.Int64)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.Int64,System.Int64)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Int64,System.Int64)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Int64,System.Int64,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.Int64,System.Int64)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.Int64,System.Int64)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetDigits(System.Int64)">
            <summary>
            Gets each digit of a value as separate integers.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The list of digits.
            The most-significant digit comes first, the least-significant digit comes last.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.UInt64,System.UInt64)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.UInt64,System.UInt64)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.UInt64,System.UInt64)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.UInt64,System.UInt64,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.UInt64,System.UInt64)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.UInt64,System.UInt64)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.UInt64})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetDigits(System.UInt64)">
            <summary>
            Gets each digit of a value as separate integers.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The list of digits.
            The most-significant digit comes first, the least-significant digit comes last.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.Single,System.Single)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.Single,System.Single)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Single,System.Single)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Single,System.Single,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.Single,System.Single)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.Single,System.Single)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.Double,System.Double)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.Double,System.Double)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Double,System.Double)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Double,System.Double,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.Double,System.Double)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.Double,System.Double)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Clamp(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamps a value between an inclusive minimum and maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMin(System.Decimal,System.Decimal)">
            <summary>
            Clamps a value to an inclusive minimum value.
            </summary>
            <param name="value">The value.</param>
            <param name="min">The lowest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ClampMax(System.Decimal,System.Decimal)">
            <summary>
            Clamps a value to an inclusive maximum value.
            </summary>
            <param name="value">The value.</param>
            <param name="max">The highest possible value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Decimal,System.Decimal)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>
            The quantized value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Quantize(System.Decimal,System.Decimal,System.MidpointRounding)">
            <summary>
            Quantizes a value to the nearest value of a multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The quantized value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Gcd(System.Decimal,System.Decimal)">
            <summary>
            Finds the greatest common divisor (GCD) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Lcm(System.Decimal,System.Decimal)">
            <summary>
            Finds the least common multiple (LCM) of two values.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            The clamped value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Gets the sum from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Gets the minimum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The minimum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Gets the maximum value from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The maximum value of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsFloat(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Converts a sequence of values to floats.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as floats.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AsDouble(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Converts a sequence of values to doubles.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The list of values as doubles.
            An empty list is returned if the sequence is empty.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetStatistics(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Gets statistics for a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The statistics for the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Abs(System.SByte)">
            <summary>
            Gets the absolute number of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The absolute number.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sign(System.SByte)">
            <summary>
            Gets the sign of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            1 if the number is positive, 0 if the number is zero, -1 if the number is negative.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Magnitude(System.SByte)">
            <summary>
            Calculates the magnitude of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The magnitude.
            </returns>
            <remarks>
            <para>
            The magnitude expresses the order of magnitude of a number.
            Simply said, it calculates the number of significant digits on the left side of the decimal point.
            </para>
            <para>
            If <paramref name="value"/> is positive, the result is positive.
            If <paramref name="value"/> is negative, the result is negative.
            If <paramref name="value"/> is zero, the result is zero.
            </para>
            <para>
            Examples: 0 -> 0; 1 -> 1; -1 -> -1; 5 -> 1; -5 -> -1; 10 -> 2; 100 -> 3; 1234 -> 4; -1234 -> -4; 9999 -> 4; 10000 -> 5; 10001 -> 5
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Abs(System.Int16)">
            <summary>
            Gets the absolute number of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The absolute number.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sign(System.Int16)">
            <summary>
            Gets the sign of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            1 if the number is positive, 0 if the number is zero, -1 if the number is negative.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Magnitude(System.Int16)">
            <summary>
            Calculates the magnitude of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The magnitude.
            </returns>
            <remarks>
            <para>
            The magnitude expresses the order of magnitude of a number.
            Simply said, it calculates the number of significant digits on the left side of the decimal point.
            </para>
            <para>
            If <paramref name="value"/> is positive, the result is positive.
            If <paramref name="value"/> is negative, the result is negative.
            If <paramref name="value"/> is zero, the result is zero.
            </para>
            <para>
            Examples: 0 -> 0; 1 -> 1; -1 -> -1; 5 -> 1; -5 -> -1; 10 -> 2; 100 -> 3; 1234 -> 4; -1234 -> -4; 9999 -> 4; 10000 -> 5; 10001 -> 5
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Abs(System.Int32)">
            <summary>
            Gets the absolute number of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The absolute number.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sign(System.Int32)">
            <summary>
            Gets the sign of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            1 if the number is positive, 0 if the number is zero, -1 if the number is negative.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Magnitude(System.Int32)">
            <summary>
            Calculates the magnitude of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The magnitude.
            </returns>
            <remarks>
            <para>
            The magnitude expresses the order of magnitude of a number.
            Simply said, it calculates the number of significant digits on the left side of the decimal point.
            </para>
            <para>
            If <paramref name="value"/> is positive, the result is positive.
            If <paramref name="value"/> is negative, the result is negative.
            If <paramref name="value"/> is zero, the result is zero.
            </para>
            <para>
            Examples: 0 -> 0; 1 -> 1; -1 -> -1; 5 -> 1; -5 -> -1; 10 -> 2; 100 -> 3; 1234 -> 4; -1234 -> -4; 9999 -> 4; 10000 -> 5; 10001 -> 5
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Abs(System.Int64)">
            <summary>
            Gets the absolute number of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The absolute number.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sign(System.Int64)">
            <summary>
            Gets the sign of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            1 if the number is positive, 0 if the number is zero, -1 if the number is negative.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Magnitude(System.Int64)">
            <summary>
            Calculates the magnitude of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The magnitude.
            </returns>
            <remarks>
            <para>
            The magnitude expresses the order of magnitude of a number.
            Simply said, it calculates the number of significant digits on the left side of the decimal point.
            </para>
            <para>
            If <paramref name="value"/> is positive, the result is positive.
            If <paramref name="value"/> is negative, the result is negative.
            If <paramref name="value"/> is zero, the result is zero.
            </para>
            <para>
            Examples: 0 -> 0; 1 -> 1; -1 -> -1; 5 -> 1; -5 -> -1; 10 -> 2; 100 -> 3; 1234 -> 4; -1234 -> -4; 9999 -> 4; 10000 -> 5; 10001 -> 5
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Abs(System.Single)">
            <summary>
            Gets the absolute number of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The absolute number.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sign(System.Single)">
            <summary>
            Gets the sign of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            1 if the number is positive, 0 if the number is zero, -1 if the number is negative.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Magnitude(System.Single)">
            <summary>
            Calculates the magnitude of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The magnitude.
            </returns>
            <remarks>
            <para>
            The magnitude expresses the order of magnitude of a number.
            Simply said, it calculates the number of significant digits on the left side of the decimal point.
            </para>
            <para>
            If <paramref name="value"/> is positive, the result is positive.
            If <paramref name="value"/> is negative, the result is negative.
            If <paramref name="value"/> is zero, the result is zero.
            </para>
            <para>
            Examples: 0 -> 0; 1 -> 1; -1 -> -1; 5 -> 1; -5 -> -1; 10 -> 2; 100 -> 3; 1234 -> 4; -1234 -> -4; 9999 -> 4; 10000 -> 5; 10001 -> 5
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Abs(System.Double)">
            <summary>
            Gets the absolute number of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The absolute number.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sign(System.Double)">
            <summary>
            Gets the sign of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            1 if the number is positive, 0 if the number is zero, -1 if the number is negative.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Magnitude(System.Double)">
            <summary>
            Calculates the magnitude of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The magnitude.
            </returns>
            <remarks>
            <para>
            The magnitude expresses the order of magnitude of a number.
            Simply said, it calculates the number of significant digits on the left side of the decimal point.
            </para>
            <para>
            If <paramref name="value"/> is positive, the result is positive.
            If <paramref name="value"/> is negative, the result is negative.
            If <paramref name="value"/> is zero, the result is zero.
            </para>
            <para>
            Examples: 0 -> 0; 1 -> 1; -1 -> -1; 5 -> 1; -5 -> -1; 10 -> 2; 100 -> 3; 1234 -> 4; -1234 -> -4; 9999 -> 4; 10000 -> 5; 10001 -> 5
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Abs(System.Decimal)">
            <summary>
            Gets the absolute number of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The absolute number.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sign(System.Decimal)">
            <summary>
            Gets the sign of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            1 if the number is positive, 0 if the number is zero, -1 if the number is negative.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Magnitude(System.Decimal)">
            <summary>
            Calculates the magnitude of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The magnitude.
            </returns>
            <remarks>
            <para>
            The magnitude expresses the order of magnitude of a number.
            Simply said, it calculates the number of significant digits on the left side of the decimal point.
            </para>
            <para>
            If <paramref name="value"/> is positive, the result is positive.
            If <paramref name="value"/> is negative, the result is negative.
            If <paramref name="value"/> is zero, the result is zero.
            </para>
            <para>
            Examples: 0 -> 0; 1 -> 1; -1 -> -1; 5 -> 1; -5 -> -1; 10 -> 2; 100 -> 3; 1234 -> 4; -1234 -> -4; 9999 -> 4; 10000 -> 5; 10001 -> 5
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.DivRem(System.Single,System.Single)">
            <summary>
            Gets the remainder of a division.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>
            The remainder of  dividend / divisor.
            </returns>
            <remarks>
            <note type="important">
            This is not the same as simply applying the module operator.
            The remainder is calculated, allowing the operation for floating point values.
            </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AlmostEqual(System.Single,System.Single)">
            <summary>
            Determines whether a value is almost equal to another value.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other value to compare with.</param>
            <returns>
            true if the value is within the default accuracy for equality, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AlmostEqual(System.Single,System.Single,System.Single)">
            <summary>
            Determines whether a value is almost equal to another value.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other value to compare with.</param>
            <param name="accuracy">The accuracy within the two values are considered equal.</param>
            <returns>
            true if the value is within the specified accuracy for equality, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AlmostZero(System.Single)">
            <summary>
            Determines whether a value is almost zero.
            </summary>
            <param name="value">The value.</param>
            <returns>
            true if the value is within the default accuracy to zero, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AlmostZero(System.Single,System.Single)">
            <summary>
            Determines whether a value is almost zero.
            </summary>
            <param name="value">The value.</param>
            <param name="accuracy">The accuracy within the value is considered zero.</param>
            <returns>
            true if the value is within the specified accuracy to zero, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Ceiling(System.Single)">
            <summary>
            Gets the smallest integer that is greater than or equal to a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The smallest integer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Floor(System.Single)">
            <summary>
            Gets the largest integer less than or equal to a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The largest integer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Integer(System.Single)">
            <summary>
            Gets the integer part of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The integer part.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Fraction(System.Single)">
            <summary>
            Gets the fraction part of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The fraction part.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.RoundInteger(System.Single)">
            <summary>
            Rounds a value to the nearest integer.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The rounded value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.RoundInteger(System.Single,System.MidpointRounding)">
            <summary>
            Rounds a value to the nearest integer.
            </summary>
            <param name="value">The value.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.RoundDigits(System.Single,System.Int32)">
            <summary>
            Rounds a value to a specified amount of fractional digits.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The number of digits.</param>
            <returns>
            The rounded value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.RoundDigits(System.Single,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds a value to a specified amount of fractional digits.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The number of digits.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Pow(System.Single,System.Double)">
            <summary>
            Calculates value^power.
            </summary>
            <param name="value">The value.</param>
            <param name="power">The power.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Pow2(System.Single)">
            <summary>
            Calculates value^2.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Pow3(System.Single)">
            <summary>
            Calculates value^3.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Pow10(System.Single)">
            <summary>
            Calculates value^10.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.PowE(System.Single)">
            <summary>
            Calculates value^e.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Exp(System.Single,System.Double)">
            <summary>
            Calculates expBase^value.
            </summary>
            <param name="value">The value.</param>
            <param name="expBase">The base.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Exp2(System.Single)">
            <summary>
            Calculates 2^value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Exp3(System.Single)">
            <summary>
            Calculates 3^value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Exp10(System.Single)">
            <summary>
            Calculates 10^value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ExpE(System.Single)">
            <summary>
            Calculates e^value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Log(System.Single,System.Double)">
            <summary>
            Calculates log[logBase](value).
            </summary>
            <param name="value">The value.</param>
            <param name="logBase">The base.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Log2(System.Single)">
            <summary>
            Calculates log[2](value).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Log3(System.Single)">
            <summary>
            Calculates log[3](value).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Log10(System.Single)">
            <summary>
            Calculates log[10](value).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.LogE(System.Single)">
            <summary>
            Calculates log[e](value).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sqrt(System.Single)">
            <summary>
            Calculates the square-root of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The square-root.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Root(System.Single,System.Double)">
            <summary>
            Calculates the n-th root of a value.
            </summary>
            <param name="value">The value.</param>
            <param name="n">The root.</param>
            <returns>
            The n-th root.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sin(System.Single)">
            <summary>
            Calculates the Sine of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Cos(System.Single)">
            <summary>
            Calculates the Cosine of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Tan(System.Single)">
            <summary>
            Calculates the Tangent of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Cot(System.Single)">
            <summary>
            Calculates the Cotangent of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Asin(System.Single)">
            <summary>
            Calculates the Arc Sine of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Acos(System.Single)">
            <summary>
            Calculates the Arc Cosine of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Atan(System.Single)">
            <summary>
            Calculates the Arc Tangent of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Acot(System.Single)">
            <summary>
            Calculates the Arc Cotangent of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sinh(System.Single)">
            <summary>
            Calculates the Hyperbolic Sine of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Cosh(System.Single)">
            <summary>
            Calculates the Hyperbolic Cosine of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Tanh(System.Single)">
            <summary>
            Calculates the Hyperbolic Tangent of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Coth(System.Single)">
            <summary>
            Calculates the Hyperbolic Cotangent of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ToDeg(System.Single)">
            <summary>
            Converts a radian value to degrees.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            The result is not clamped to a single full circle value (-359...0...+359).
            Use <see cref="M:RI.Utilities.Numbers.NumberExtensions.CircularClampDeg(System.Single)" /> to clamp to a single full circle value.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ToRad(System.Single)">
            <summary>
            Converts a degree value to radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            The result is not clamped to a single full circle value (-2π...0...+2π).
            Use <see cref="M:RI.Utilities.Numbers.NumberExtensions.CircularClampRad(System.Single)" /> to clamp to a single full circle value.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.CircularClampDeg(System.Single)">
            <summary>
            Clamps a degree value to a single full circle (-359...0...+359).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            Examples: 0 -> 0; 350 -> 350; 360 -> 0; 370 -> 10; etc.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.CircularClampRad(System.Single)">
            <summary>
            Clamps a radian value to a single full circle (-2π...0...+2π).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            Examples: 0 -> 0; 1.5 -> 1.5; 2π -> 0; 3π -> π; etc.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetFractionAsInteger(System.Single)">
            <summary>
            Gets the fractional part of a value as an integer value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            Examples: 12.34 -> 34; 3.416 -> 416; etc.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Product(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the Product from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The product of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ArithmeticMean(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the arithmetic mean or average from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The arithmetic mean or average of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GeometricMean(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the geometric mean from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The geometric mean of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.HarmonicMean(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the harmonic mean from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The harmonic mean of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.SquareSum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the sum of all squared values (first squared, then summed) from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of all squared values of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Rms(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the RMS from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The RMS of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Variance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the variance from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The variance of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sigma(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the sigma or standard deviation from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sigma or standard deviation of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Median(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Gets the median from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The median of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.DivRem(System.Double,System.Double)">
            <summary>
            Gets the remainder of a division.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>
            The remainder of  dividend / divisor.
            </returns>
            <remarks>
            <note type="important">
            This is not the same as simply applying the module operator.
            The remainder is calculated, allowing the operation for floating point values.
            </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AlmostEqual(System.Double,System.Double)">
            <summary>
            Determines whether a value is almost equal to another value.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other value to compare with.</param>
            <returns>
            true if the value is within the default accuracy for equality, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AlmostEqual(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether a value is almost equal to another value.
            </summary>
            <param name="value">The value.</param>
            <param name="other">The other value to compare with.</param>
            <param name="accuracy">The accuracy within the two values are considered equal.</param>
            <returns>
            true if the value is within the specified accuracy for equality, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AlmostZero(System.Double)">
            <summary>
            Determines whether a value is almost zero.
            </summary>
            <param name="value">The value.</param>
            <returns>
            true if the value is within the default accuracy to zero, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.AlmostZero(System.Double,System.Double)">
            <summary>
            Determines whether a value is almost zero.
            </summary>
            <param name="value">The value.</param>
            <param name="accuracy">The accuracy within the value is considered zero.</param>
            <returns>
            true if the value is within the specified accuracy to zero, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Ceiling(System.Double)">
            <summary>
            Gets the smallest integer that is greater than or equal to a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The smallest integer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Floor(System.Double)">
            <summary>
            Gets the largest integer less than or equal to a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The largest integer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Integer(System.Double)">
            <summary>
            Gets the integer part of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The integer part.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Fraction(System.Double)">
            <summary>
            Gets the fraction part of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The fraction part.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.RoundInteger(System.Double)">
            <summary>
            Rounds a value to the nearest integer.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The rounded value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.RoundInteger(System.Double,System.MidpointRounding)">
            <summary>
            Rounds a value to the nearest integer.
            </summary>
            <param name="value">The value.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.RoundDigits(System.Double,System.Int32)">
            <summary>
            Rounds a value to a specified amount of fractional digits.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The number of digits.</param>
            <returns>
            The rounded value.
            </returns>
            <remarks>
            <para>
            <see cref="F:System.MidpointRounding.ToEven"/> is used for <see cref="T:System.MidpointRounding"/>.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.RoundDigits(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds a value to a specified amount of fractional digits.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The number of digits.</param>
            <param name="rounding">The kind of rounding to use.</param>
            <returns>
            The rounded value.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Pow(System.Double,System.Double)">
            <summary>
            Calculates value^power.
            </summary>
            <param name="value">The value.</param>
            <param name="power">The power.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Pow2(System.Double)">
            <summary>
            Calculates value^2.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Pow3(System.Double)">
            <summary>
            Calculates value^3.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Pow10(System.Double)">
            <summary>
            Calculates value^10.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.PowE(System.Double)">
            <summary>
            Calculates value^e.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Exp(System.Double,System.Double)">
            <summary>
            Calculates expBase^value.
            </summary>
            <param name="value">The value.</param>
            <param name="expBase">The base.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Exp2(System.Double)">
            <summary>
            Calculates 2^value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Exp3(System.Double)">
            <summary>
            Calculates 3^value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Exp10(System.Double)">
            <summary>
            Calculates 10^value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ExpE(System.Double)">
            <summary>
            Calculates e^value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Log(System.Double,System.Double)">
            <summary>
            Calculates log[logBase](value).
            </summary>
            <param name="value">The value.</param>
            <param name="logBase">The base.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Log2(System.Double)">
            <summary>
            Calculates log[2](value).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Log3(System.Double)">
            <summary>
            Calculates log[3](value).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Log10(System.Double)">
            <summary>
            Calculates log[10](value).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.LogE(System.Double)">
            <summary>
            Calculates log[e](value).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sqrt(System.Double)">
            <summary>
            Calculates the square-root of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The square-root.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Root(System.Double,System.Double)">
            <summary>
            Calculates the n-th root of a value.
            </summary>
            <param name="value">The value.</param>
            <param name="n">The root.</param>
            <returns>
            The n-th root.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sin(System.Double)">
            <summary>
            Calculates the Sine of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Cos(System.Double)">
            <summary>
            Calculates the Cosine of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Tan(System.Double)">
            <summary>
            Calculates the Tangent of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Cot(System.Double)">
            <summary>
            Calculates the Cotangent of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Asin(System.Double)">
            <summary>
            Calculates the Arc Sine of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Acos(System.Double)">
            <summary>
            Calculates the Arc Cosine of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Atan(System.Double)">
            <summary>
            Calculates the Arc Tangent of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Acot(System.Double)">
            <summary>
            Calculates the Arc Cotangent of a value in radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sinh(System.Double)">
            <summary>
            Calculates the Hyperbolic Sine of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Cosh(System.Double)">
            <summary>
            Calculates the Hyperbolic Cosine of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Tanh(System.Double)">
            <summary>
            Calculates the Hyperbolic Tangent of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Coth(System.Double)">
            <summary>
            Calculates the Hyperbolic Cotangent of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ToDeg(System.Double)">
            <summary>
            Converts a radian value to degrees.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            The result is not clamped to a single full circle value (-359...0...+359).
            Use <see cref="M:RI.Utilities.Numbers.NumberExtensions.CircularClampDeg(System.Double)" /> to clamp to a single full circle value.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ToRad(System.Double)">
            <summary>
            Converts a degree value to radians.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            The result is not clamped to a single full circle value (-2π...0...+2π).
            Use <see cref="M:RI.Utilities.Numbers.NumberExtensions.CircularClampRad(System.Double)" /> to clamp to a single full circle value.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.CircularClampDeg(System.Double)">
            <summary>
            Clamps a degree value to a single full circle (-359...0...+359).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            Examples: 0 -> 0; 350 -> 350; 360 -> 0; 370 -> 10; etc.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.CircularClampRad(System.Double)">
            <summary>
            Clamps a radian value to a single full circle (-2π...0...+2π).
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            Examples: 0 -> 0; 1.5 -> 1.5; 2π -> 0; 3π -> π; etc.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GetFractionAsInteger(System.Double)">
            <summary>
            Gets the fractional part of a value as an integer value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result.
            </returns>
            <remarks>
            <para>
            Examples: 12.34 -> 34; 3.416 -> 416; etc.
            </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Product(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the Product from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The product of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.ArithmeticMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the arithmetic mean or average from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The arithmetic mean or average of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.GeometricMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the geometric mean from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The geometric mean of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.HarmonicMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the harmonic mean from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The harmonic mean of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.SquareSum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the sum of all squared values (first squared, then summed) from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sum of all squared values of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Rms(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the RMS from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The RMS of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the variance from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The variance of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Sigma(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the sigma or standard deviation from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The sigma or standard deviation of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.NumberExtensions.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets the median from a sequence of values.
            </summary>
            <param name="values">The sequence of values.</param>
            <returns>
            The median of the sequence.
            </returns>
            <remarks>
            <para>
            <paramref name="values" /> is enumerated only once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Numbers.RomanNumber">
            <summary>
                Type to convert and/or store roman numbers.
            </summary>
            <remarks>
                <para>
                    You can either use <see cref="T:RI.Utilities.Numbers.RomanNumber" /> to store a roman number by creating instances of it or use its static methods to convert from/to roman numbers.
                </para>
                <para>
                    See <see href="https://en.wikipedia.org/wiki/Roman_numerals"> https://en.wikipedia.org/wiki/Roman_numerals </see> for details about roman numbers.
                </para>
                <para>
                    Only the uppercase letters I (1), V (5), X (10), L (50), C (100), D (500), M (1000) are supported, lowercase letters of those characters are considered invalid (as is any other character).
                </para>
                <para>
                    When converting from roman to decimal, additive and subtractive forms are supported.
                    When converting from decimal to roman, the subtractive form is used for certain special cases (see below).
                </para>
                <para>
                    The following special cases represent numbers in subtractive form (only these are supported): IV (4), IX (9), XL (40), XC (90), CD (400), CM (900).
                </para>
                <para>
                    Both positive and negative numbers are supported as well as zero.
                    For positive values, <see cref="M:RI.Utilities.Numbers.RomanNumber.DecimalToRoman(System.Int32)" /> and <see cref="P:RI.Utilities.Numbers.RomanNumber.RomanValue" /> will never add the plus sign as a prefix but parsed values (<see cref="M:RI.Utilities.Numbers.RomanNumber.Parse(System.String)" />, <see cref="M:RI.Utilities.Numbers.RomanNumber.TryParse(System.String,RI.Utilities.Numbers.RomanNumber@)" />, <see cref="M:RI.Utilities.Numbers.RomanNumber.DecimalToRoman(System.Int32)" />) can have an optional plus sign prefix.
                    For negative values, both roman and decimal representations use a minus sign prefix.
                    An empty string is used to express zero.
                </para>
                <note type="important">
                    Apostrophus and Vinculum are not supported for larger numbers.
                    Therefore, the value 1'000'000'000 would result in one million <c> M </c>s.
                    It is advised that the numbers are clamped to a reasonable range which is suitable for you.
                </note>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
            <![CDATA[
            // convert decimal to roman
            var roman = RomanNumber.DecimalToRoman(123); // Result: "CXXIII"
            
            // convert roman to decimal
            var dec = RomanNumber.RomanToDecimal("CLIV"); // Result: 154
            
            // create two roman numbers
            RomanNumber num1 = 123;
            RomanNumber num2 = "CLIV";
            
            // do some math with roman numbers
            RomanNumber num3 = num1 + num2;
            
            // get explicit values
            var romanValue = num3.RomanValue; // "CCLXXVII"
            var decimalValue = num3.DecimalValue; // 277
            ]]>
            </code>
            </example>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.DecimalToRoman(System.Int32)">
            <summary>
                Converts a decimal number into a roman number.
            </summary>
            <param name="value"> The decimal number. </param>
            <returns>
                The roman number as a string.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Addition(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Adds two <see cref="T:RI.Utilities.Numbers.RomanNumber" />s.
            </summary>
            <param name="x"> The first value. </param>
            <param name="y"> The second value. </param>
            <returns>
                The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Decrement(RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Decrements a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> by 1.
            </summary>
            <param name="x"> The value. </param>
            <returns>
                The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Division(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Divides a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> by another.
            </summary>
            <param name="x"> The value to divide. </param>
            <param name="y"> The value to divide by. </param>
            <returns>
                The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Equality(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Numbers.RomanNumber" />s for equality.
            </summary>
            <param name="x"> The first value. </param>
            <param name="y"> The second value. </param>
            <returns>
                true if both values are equal, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_GreaterThan(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Checks if a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> is greater than another.
            </summary>
            <param name="x"> The first value. </param>
            <param name="y"> The second value. </param>
            <returns>
                true if the first value is greater than the second value, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_GreaterThanOrEqual(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Checks if a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> is greater or equal than another.
            </summary>
            <param name="x"> The first value. </param>
            <param name="y"> The second value. </param>
            <returns>
                true if the first value is greater or equal than the second value, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Implicit(System.String)~RI.Utilities.Numbers.RomanNumber">
            <summary>
                Implicitly converts a string to a <see cref="T:RI.Utilities.Numbers.RomanNumber" />.
            </summary>
            <param name="value"> The string to convert. </param>
            <returns>
                The <see cref="T:RI.Utilities.Numbers.RomanNumber" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
            <exception cref="T:System.FormatException"> <paramref name="value" /> is not a valid roman number. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Implicit(System.Int32)~RI.Utilities.Numbers.RomanNumber">
            <summary>
                Implicitly converts an integer to a <see cref="T:RI.Utilities.Numbers.RomanNumber" />.
            </summary>
            <param name="value"> The integer to convert. </param>
            <returns>
                The <see cref="T:RI.Utilities.Numbers.RomanNumber" />.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Implicit(RI.Utilities.Numbers.RomanNumber)~System.String">
            <summary>
                Implicitly converts a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> to a string.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns>
                The string.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Implicit(RI.Utilities.Numbers.RomanNumber)~System.Int32">
            <summary>
                Implicitly converts a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> to an integer.
            </summary>
            <param name="value"> The value to convert. </param>
            <returns>
                The integer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Increment(RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Increments a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> by 1.
            </summary>
            <param name="x"> The value. </param>
            <returns>
                The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Inequality(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Numbers.RomanNumber" />s for inequality.
            </summary>
            <param name="x"> The first value. </param>
            <param name="y"> The second value. </param>
            <returns>
                false if both values are equal, true otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_LessThan(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Checks if a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> is less than another.
            </summary>
            <param name="x"> The first value. </param>
            <param name="y"> The second value. </param>
            <returns>
                true if the first value is less than the second value, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_LessThanOrEqual(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Checks if a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> is less or equal than another.
            </summary>
            <param name="x"> The first value. </param>
            <param name="y"> The second value. </param>
            <returns>
                true if the first value is less or equal than the second value, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Modulus(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Gets the remainder from a division of a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> by another.
            </summary>
            <param name="x"> The value to divide. </param>
            <param name="y"> The value to divide by. </param>
            <returns>
                The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Multiply(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Multiplies two <see cref="T:RI.Utilities.Numbers.RomanNumber" />s.
            </summary>
            <param name="x"> The first value. </param>
            <param name="y"> The second value. </param>
            <returns>
                The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_Subtraction(RI.Utilities.Numbers.RomanNumber,RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Subtracts a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> from another.
            </summary>
            <param name="x"> The value subtracted from. </param>
            <param name="y"> The value to subtract. </param>
            <returns>
                The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_UnaryNegation(RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Multiplies a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> with -1.
            </summary>
            <param name="x"> The value. </param>
            <returns>
                The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.op_UnaryPlus(RI.Utilities.Numbers.RomanNumber)">
            <summary>
                Multiplies a <see cref="T:RI.Utilities.Numbers.RomanNumber" /> with 1.
            </summary>
            <param name="x"> The value. </param>
            <returns>
                The result.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.Parse(System.String)">
            <summary>
                Parses a string as a roman number.
            </summary>
            <param name="str"> The string to parse. </param>
            <returns>
                The roman number.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"> <paramref name="str" /> is not a valid roman number. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.RomanToDecimal(System.String)">
            <summary>
                Tries to convert a roman number into a decimal number.
            </summary>
            <param name="value"> The roman number as a string. </param>
            <returns>
                The decimal number or null if <paramref name="value" /> is not a vlid roman number.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.TryParse(System.String,RI.Utilities.Numbers.RomanNumber@)">
            <summary>
                Tries to parse a string as a roman number.
            </summary>
            <param name="str"> The string to parse. </param>
            <param name="value"> The parsed roman number. </param>
            <returns>
                true if <paramref name="str" /> was a valid roman number, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Numbers.RomanNumber" />.
            </summary>
            <param name="decimalValue"> The number as a decimal number. </param>
        </member>
        <member name="P:RI.Utilities.Numbers.RomanNumber.DecimalValue">
            <summary>
                Gets the value as a decimal value.
            </summary>
            <value>
                The value as a decimal value.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RomanNumber.RomanValue">
            <summary>
                Gets the value as a roman value.
            </summary>
            <value>
                The value as a roman value.
            </value>
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.ToString">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.System#IComparable#CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.CompareTo(RI.Utilities.Numbers.RomanNumber)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.Equals(RI.Utilities.Numbers.RomanNumber)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.RomanNumber.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Numbers.RunningValues">
            <summary>
                Implements running values.
            </summary>
            <remarks>
                <para>
                    So-called &quot;running values&quot; are values which are calculated based on a history of previous values.
                    The history of previous values has a certain size (or capacity) and all values in that history are used to calculate the running values.
                </para>
                <para>
                    The number of values in the history (<see cref="P:RI.Utilities.Numbers.RunningValues.Count" />) starts at zero.
                    It is increased with each added value, but does not exceed <see cref="P:RI.Utilities.Numbers.RunningValues.Capacity" />.
                    When a new value is added and the history already contains <see cref="P:RI.Utilities.Numbers.RunningValues.Capacity" /> number of values, the oldest value is removed from the history and does no longer contribute to the calculation of the running values.
                </para>
                <para>
                    <see cref="T:RI.Utilities.Numbers.RunningValues" /> is useful in scenarios where performance is critical and a stable algorithmic complexity of approximately O(1) is required, regardless of the size of the history.
                    Use <see cref="T:RI.Utilities.Numbers.StatisticValues" /> if a higher precision or more calculated values are required (but unfortunately with worse performance).
                </para>
                <para>
                    <see cref="T:RI.Utilities.Numbers.RunningValues" /> can be used for discrete or continuous running values.
                    Their usage can be mixed, using <see cref="M:RI.Utilities.Numbers.RunningValues.Add(System.Single)" /> or <see cref="M:RI.Utilities.Numbers.RunningValues.Add(System.Single,System.Single)" /> with a timestep of 1.0f for discrete values or <see cref="M:RI.Utilities.Numbers.RunningValues.Add(System.Single,System.Single)" /> for continuous values.
                    The running values are always calculated using the weighted value, which is the value multiplied with the corresponding timestep.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Constructor with single initial timestep (equal to StatisticValues)
            TODO: GeometricMean?
            TODO: HarmonicMean?
            TODO: Max?
            TODO: Min?
            TODO: Median?
            TODO: Product?
            <example>
                <code language="cs">
            <![CDATA[
            // create running values
            var frameTime  = new RunningValues(1000);  // to calculate the average framerate
            var enemyKills = new RunningValues(1000);  // to calculate the average enemy kills per second
            
            // ...
            
            // update in each frame
            frameTime.Add(Time.deltaTime);
            enemyKills.Add(killCountSinceLastFrame, Time.deltaTime); // use the timestep to get kills per second independent of the framerate
            
            // get averages over the last 1000 frames
            var framerate = 1.0f / frameTime.ArithmeticMean;
            var killsPerSecond = 1.0f / enemyKills.ArithmeticMean;
            
            // reset kill counter
            killCountSinceLastFrame = 0;
            ]]>
            </code>
            </example>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.#ctor(System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Numbers.RunningValues" />.
            </summary>
            <param name="capacity"> The capacity of the history used to calculate the running values. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity" /> is less than 1. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.#ctor(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Numbers.RunningValues" />.
            </summary>
            <param name="initialValues"> The initial values added to the history. </param>
            <remarks>
                <para>
                    The initial values are added with a timestep of 1.0.
                </para>
                <para>
                    The capacity is set to the number of values in <paramref name="initialValues" />.
                    Therefore, the sequence must contain at least one value.
                </para>
                <para>
                    <paramref name="initialValues" /> is enumerated only once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="initialValues" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="initialValues" /> is an empty sequence. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="initialValues" /> contains one or more NaN or infinity value. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.#ctor(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Numbers.RunningValues" />.
            </summary>
            <param name="initialValues"> The initial values added to the history. </param>
            <param name="initialTimesteps"> The timesteps values added to the history. </param>
            <remarks>
                <para>
                    <paramref name="initialValues" /> and <paramref name="initialTimesteps" /> must contain the same number of values.
                </para>
                <para>
                    The capacity is set to the number of values in <paramref name="initialValues" />.
                    Therefore, the sequence must contain at least one value.
                </para>
                <para>
                    <paramref name="initialValues" /> and <paramref name="initialTimesteps" /> are enumerated only once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="initialValues" /> or <paramref name="initialTimesteps" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="initialValues" /> or <paramref name="initialTimesteps" /> is an empty sequence or <paramref name="initialValues" /> and <paramref name="initialTimesteps" /> do not contain the same number of values. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="initialValues" /> or <paramref name="initialTimesteps" /> contains one or more NaN or infinity value. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Numbers.RunningValues" />.
            </summary>
            <param name="capacity"> The capacity of the history used to calculate the running values. </param>
            <param name="initialValues"> The initial values added to the history. </param>
            <remarks>
                <para>
                    The initial values are added with a timestep of 1.0.
                </para>
                <para>
                    <paramref name="initialValues" /> is enumerated only once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity" /> is less than 1. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="initialValues" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="initialValues" /> is an empty sequence. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="initialValues" /> contains one or more NaN or infinity value. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Numbers.RunningValues" />.
            </summary>
            <param name="capacity"> The capacity of the history used to calculate the running values. </param>
            <param name="initialValues"> The initial values added to the history. </param>
            <param name="initialTimesteps"> The timesteps values added to the history. </param>
            <remarks>
                <para>
                    <paramref name="initialValues" /> and <paramref name="initialTimesteps" /> must contain the same number of values.
                </para>
                <para>
                    <paramref name="initialValues" /> and <paramref name="initialTimesteps" /> are enumerated only once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity" /> is less than 1. </exception>
            <exception cref="T:System.ArgumentNullException"> <paramref name="initialValues" /> or <paramref name="initialTimesteps" /> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="initialValues" /> or <paramref name="initialTimesteps" /> is an empty sequence or <paramref name="initialValues" /> and <paramref name="initialTimesteps" /> do not contain the same number of values. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="initialValues" /> or <paramref name="initialTimesteps" /> contains one or more NaN or infinity value. </exception>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.ArithmeticMean">
            <summary>
                Gets the arithmetic mean or average of all values.
            </summary>
            <value>
                The arithmetic mean or average of all values.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.Capacity">
            <summary>
                Gets the capacity of the history.
            </summary>
            <value>
                The capacity of the history.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.Count">
            <summary>
                Gets the number of values currently in the history.
            </summary>
            <value>
                The number of values currently in the history.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.Difference">
            <summary>
                Gets the difference between <see cref="P:RI.Utilities.Numbers.RunningValues.Last" /> and the value added before <see cref="P:RI.Utilities.Numbers.RunningValues.Last" />.
            </summary>
            <value>
                The difference between <see cref="P:RI.Utilities.Numbers.RunningValues.Last" /> and the value added before <see cref="P:RI.Utilities.Numbers.RunningValues.Last" />.
            </value>
            <remarks>
                <para>
                    A positive number means that <see cref="P:RI.Utilities.Numbers.RunningValues.Last" /> is greater than the value added before <see cref="P:RI.Utilities.Numbers.RunningValues.Last" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.Duration">
            <summary>
                Gets the sum of all timesteps in the history.
            </summary>
            <value>
                The sum of all timesteps in the history.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.Last">
            <summary>
                Gets the value which was added last to the history.
            </summary>
            <value>
                The value which was added last to the history.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.Rms">
            <summary>
                Gets the root-mean-square (RMS) of all values in the history.
            </summary>
            <value>
                The root-mean-square (RMS) of all values in the history.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.Sigma">
            <summary>
                Gets the sigma or standard deviation of all values in the history.
            </summary>
            <value>
                The sigma or standard deviation of all values in the history.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.SquareSum">
            <summary>
                Gets the sum of squared values (first squared, then summed) of all values in the history.
            </summary>
            <value>
                The sum of squared values (first squared, then summed) of all values in the history.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.Sum">
            <summary>
                Gets the sum of all values in the history.
            </summary>
            <value>
                The sum of all values in the history.
            </value>
        </member>
        <member name="P:RI.Utilities.Numbers.RunningValues.Variance">
            <summary>
                Gets the variance of all values in the history.
            </summary>
            <value>
                The variance of all values in the history.
            </value>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.Add(System.Single)">
            <summary>
                Adds a new value to the history, using a timestep of 1.0f, and recalculates the values.
            </summary>
            <param name="value"> The value to add. </param>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="value" /> is NaN or infinity. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.Add(System.Single,System.Single)">
            <summary>
                Adds a new value to the history, using a given timestep, and recalculates the values.
            </summary>
            <param name="value"> The value to add. </param>
            <param name="timestep"> The timestep for the value. </param>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="value" /> or <paramref name="timestep" /> is NaN or infinity. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.GetHistory">
            <summary>
                Gets all values currently in the history.
            </summary>
            <returns>
                The sequence of values currently in the history.
                An empty sequence is returned if there are no values in the history.
            </returns>
            <remarks>
                <para>
                    The values are enumerated in the order they were added to the history.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.GetStatistics">
            <summary>
                Gets the statistics for all values in the history, taking into account the timesteps.
            </summary>
            <returns>
                The statistics for all values and timesteps in the history.
            </returns>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.GetTimesteps">
            <summary>
                Gets all timesteps currently in the history.
            </summary>
            <returns>
                The sequence of timesteps currently in the history.
                An empty sequence is returned if there are no timesteps in the history.
            </returns>
            <remarks>
                <para>
                    The timesteps are enumerated in the order they were added to the history.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.Reset">
            <summary>
                Resets all values and clears the history.
            </summary>
            <remarks>
                <para>
                    The capacity of the history is not changed.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.Reset(System.Int32)">
            <summary>
                Resets all values and clears the history.
            </summary>
            <param name="capacity"> The new capacity of the history. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="capacity" /> is less than 1. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.RunningValues.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Numbers.StatisticValues">
            <summary>
                Contains statistic values for a sequence of numbers.
            </summary>
            <remarks>
                <note type="note">
                    For performance sensitive scenarios, consider using <see cref="T:RI.Utilities.Numbers.RunningValues" />.
                </note>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Implement IEquatable and override GetHashCode and Equals
            TODO: SortedTimesteps
        </member>
        <member name="M:RI.Utilities.Numbers.StatisticValues.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Numbers.StatisticValues" />.
            </summary>
            <param name="values"> The sequence of numbers the statistics are calculated from. </param>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated only once.
                </para>
                <para>
                    As no timestep is provided, the timestep is implicitly assumed to be 1.0 for each value.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="values" /> contains one or more NaN or infinity value. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.StatisticValues.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Numbers.StatisticValues" />.
            </summary>
            <param name="values"> The sequence of numbers the statistics are calculated from. </param>
            <param name="fixedTimestep"> The fixed timestep which is used for each value. </param>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated only once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="values" /> contains one or more NaN or infinity value or <paramref name="fixedTimestep" /> is NaN or infinity. </exception>
        </member>
        <member name="M:RI.Utilities.Numbers.StatisticValues.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Numbers.StatisticValues" />.
            </summary>
            <param name="values"> The sequence of numbers the statistics are calculated from. </param>
            <param name="timesteps"> The sequence of timesteps for each value. </param>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated only once.
                </para>
                <para>
                    <paramref name="timesteps" /> is enumerated only once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> or <paramref name="timesteps" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="values" /> or <paramref name="timesteps" /> contains one or more NaN or infinity value. </exception>
            <exception cref="T:System.ArgumentException"> The number of timesteps does not match the number of values. </exception>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.ArithmeticMean">
            <summary>
                The arithmetic mean or average of all values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Count">
            <summary>
                The number of values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Duration">
            <summary>
                The sum of all timesteps.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.GeometricMean">
            <summary>
                The geometric mean of all values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.HarmonicMean">
            <summary>
                The harmonic mean of all values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Max">
            <summary>
                The largest value of all values.
            </summary>
            <remarks>
                <note type="note">
                    This value is <see cref="F:System.Double.NaN" /> after one of the parameterized constructors is used with an empty sequence of numbers.
                </note>
            </remarks>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Median">
            <summary>
                The median of all values.
            </summary>
            <remarks>
                <note type="note">
                    This value is <see cref="F:System.Double.NaN" /> after one of the parameterized constructors is used with a sequence of numbers of less than two numbers.
                </note>
            </remarks>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Min">
            <summary>
                The smallest value of all values.
            </summary>
            <remarks>
                <note type="note">
                    This value is <see cref="F:System.Double.NaN" /> after one of the parameterized constructors is used with an empty sequence of numbers.
                </note>
            </remarks>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Product">
            <summary>
                The product of all values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Rms">
            <summary>
                The root-mean-square (RMS) of all values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Sigma">
            <summary>
                The sigma or standard deviation of all values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.SortedValues">
            <summary>
                All values, sorted by their numeric value.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.SquareSum">
            <summary>
                The sum of all squared values (first squared, then summed).
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Sum">
            <summary>
                The sum of all values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Timesteps">
            <summary>
                The timesteps of each value.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Values">
            <summary>
                All values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.Variance">
            <summary>
                The variance of all values.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.WeightedSortedValues">
            <summary>
                All values, multiplied by their corresponding timestep and then sorted by their numeric value.
            </summary>
        </member>
        <member name="F:RI.Utilities.Numbers.StatisticValues.WeightedValues">
            <summary>
                All values, multiplied by their corresponding timestep.
            </summary>
        </member>
        <member name="M:RI.Utilities.Numbers.StatisticValues.Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Numbers.StatisticValues.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Numbers.NamespaceDoc">
            <summary>
                Contains number and mathematical utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.ObjectModel.ICloneable`1">
            <summary>
                Defines an interface to implement type-safe cloning.
            </summary>
            <typeparam name="T"> The type to clone. </typeparam>
        </member>
        <member name="M:RI.Utilities.ObjectModel.ICloneable`1.Clone">
            <summary>
                Clones the object.
            </summary>
            <returns> The cloned object. </returns>
            <remarks>
                <note type="implement">
                    Whether it is a deep or shallow clone depends on the implementing type and its context.
                </note>
            </remarks>
        </member>
        <member name="T:RI.Utilities.ObjectModel.ICopyable`1">
            <summary>
                Defines an interface to implement copying of an object to another of the same type.
            </summary>
            <typeparam name="T"> The type to copy. </typeparam>
        </member>
        <member name="M:RI.Utilities.ObjectModel.ICopyable`1.CopyTo(`0)">
            <summary>
                Copies the content of the object.
            </summary>
            <param name="other">The other object which gets the values from the current object.</param>
            <remarks>
                <note type="implement">
                    Whether it is a deep or shallow copy depends on the implementing type and its context.
                </note>
            </remarks>
        </member>
        <member name="T:RI.Utilities.ObjectModel.ISynchronizable">
            <summary>
                Defines an interface to implement detection of synchronization/thread-safety.
            </summary>
            <remarks>
                <note type="important">
                    A type which implements <see cref="T:RI.Utilities.ObjectModel.ISynchronizable" /> is not necessarily, by definition, synchronized or thread-safe!
                    Only the value of <see cref="P:RI.Utilities.ObjectModel.ISynchronizable.IsSynchronized" /> defines that!
                </note>
            </remarks>
        </member>
        <member name="P:RI.Utilities.ObjectModel.ISynchronizable.IsSynchronized">
            <summary>
                Gets a value indicating whether access to the implementing object is synchronized (thread safe).
            </summary>
            <value>
                true if the access to the implementing object is synchronized (thread safe), false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.ObjectModel.ISynchronizable.SyncRoot">
            <summary>
                Gets an object that can be used to synchronize access to the implementing object.
            </summary>
            <value>
                An object that can be used to synchronize access to the implementing object.
            </value>
        </member>
        <member name="T:RI.Utilities.ObjectModel.NamespaceDoc">
            <summary>
                Contains new contracts and types for creating object models.
            </summary>
        </member>
        <member name="T:RI.Utilities.Paths.DirectoryPath">
            <summary>
                Describes a path to a directory.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Paths.DirectoryPath" /> uses <see cref="T:RI.Utilities.Paths.PathProperties" /> to extract and store path information.
                    See <see cref="T:RI.Utilities.Paths.PathProperties" /> for more details about the supported types of directory paths.
                </para>
                <para>
                    <see cref="T:RI.Utilities.Paths.DirectoryPath" /> provides more directory path specific functionalities compared to <see cref="T:System.String" /> and offers a more consistent way of working with paths than <see cref="T:System.IO.Path" />.
                    It can be implicitly converted to a <see cref="T:System.String" /> to work seamless with APIs using <see cref="T:System.String" /> for paths.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.Paths.PathProperties" /> for possible format strings for <see cref="M:RI.Utilities.Paths.PathString.ToString(System.String)"/>.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.Paths.FilePath" /> for an example how to use <see cref="T:RI.Utilities.Paths.DirectoryPath" /> and <see cref="T:RI.Utilities.Paths.FilePath" />.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
            <![CDATA[
            // see FilePath for examples
            ]]>
            </code>
            </example>
            TODO: Copy methods
            TODO: Move methods
        </member>
        <member name="F:RI.Utilities.Paths.DirectoryPath.TemporaryExtension">
            <summary>
                The file extension for temporary files used by <see cref="M:RI.Utilities.Paths.DirectoryPath.GetTempFile" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.GetCurrentDirectory">
            <summary>
                Gets the path to the current working directory.
            </summary>
            <returns>
                The path to the current working directory.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.GetTempDirectory">
            <summary>
                Gets the path to the current temporary directory.
            </summary>
            <returns>
                The path to the current temporary directory.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.op_Implicit(System.String)~RI.Utilities.Paths.DirectoryPath">
            <summary>
                Implicit conversion of a <see cref="T:System.String" /> to <see cref="T:RI.Utilities.Paths.DirectoryPath" />.
            </summary>
            <param name="path"> The path to convert to a directory path. </param>
            <returns>
                The directory path.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Paths.DirectoryPath" />.
            </summary>
            <param name="path"> The path. </param>
            <remarks>
                <para>
                    Using this constructor, wildcards and relative paths are allowed and the type of the path is assumed to be of the same type as used on the current system.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="path" /> is not a valid directory path. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.#ctor(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Utilities.Paths.PathType})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Paths.DirectoryPath" />.
            </summary>
            <param name="path"> The path. </param>
            <param name="allowWildcards"> Specifies whether wildcards are allowed or not. </param>
            <param name="allowRelatives"> Specifies whether relative directory names are allowed or not. </param>
            <param name="assumedType"> Optionally specifies the type of the path which is assumed if the type cannot be clearly determined through analysis of <paramref name="path" />. </param>
            <remarks>
                <para>
                    See <see cref="M:RI.Utilities.Paths.PathProperties.FromPath(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Utilities.Paths.PathType})" /> for more details about the parameters, especially <paramref name="assumedType" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="path" /> is not a valid directory path. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.#ctor(RI.Utilities.Paths.PathProperties)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Paths.DirectoryPath" />.
            </summary>
            <param name="path"> The <see cref="T:RI.Utilities.Paths.PathProperties" /> object which describes the path. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
        </member>
        <member name="P:RI.Utilities.Paths.DirectoryPath.DirectoryName">
            <summary>
                Gets the name of the directory.
            </summary>
            <value>
                The name of the directory.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.DirectoryPath.Exists">
            <summary>
                Gets whether the directory exists.
            </summary>
            <value>
                true if the directory exists, false otherwise.
            </value>
            <remarks>
                <note type="note"> <see cref="P:RI.Utilities.Paths.DirectoryPath.Exists" /> does not throw exceptions besides <see cref="T:System.InvalidOperationException" />. For example, if the directory exists but the user does not have access permissions, the directory is not of a compatible path type used on the current system, etc., false is returned. </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
        </member>
        <member name="P:RI.Utilities.Paths.DirectoryPath.IsRealDirectory">
            <summary>
                Gets whether the directory path is a &quot;real&quot; usable directory.
            </summary>
            <value>
                true if the directory path is a real usable directory, false otherwise.
            </value>
            <remarks>
                <para>
                    A real usable directory is a directory which has not wildcards.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.DirectoryPath.Parent">
            <summary>
                Gets the parent directory.
            </summary>
            <value>
                The parent directory or null if this directory is a root or does not have a parent directory.
            </value>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.AppendDirectory(System.Collections.Generic.IEnumerable{RI.Utilities.Paths.DirectoryPath})">
            <summary>
                Creates a new directory path by appending one or more additional directory paths.
            </summary>
            <param name="directories"> A sequence with one or more directory paths to append. </param>
            <returns>
                The new directory path with all appended directories.
            </returns>
            <remarks>
                <para>
                    If <paramref name="directories" /> is an empty sequence, the same instance as this directory path is returned without any changes.
                </para>
                <para>
                    <paramref name="directories" /> is only enumerated once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="directories" /> is null or contains a null value. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="directories" /> contains at least one <see cref="T:RI.Utilities.Paths.DirectoryPath" /> which is rooted. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.AppendDirectory(RI.Utilities.Paths.DirectoryPath[])">
            <summary>
                Creates a new directory path by appending one or more additional directory paths.
            </summary>
            <param name="directories"> An array with one or more directory paths to append. </param>
            <returns>
                The new directory path with all appended directories.
            </returns>
            <remarks>
                <para>
                    If <paramref name="directories" /> is an empty array, the same instance as this directory path is returned without any changes.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="directories" /> is null or contains a null value. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="directories" /> contains at least one <see cref="T:RI.Utilities.Paths.DirectoryPath" /> which is rooted. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.AppendFile(RI.Utilities.Paths.FilePath)">
            <summary>
                Creates a new file path by appending an existing relative file path to this directory.
            </summary>
            <param name="file"> The file path to append. </param>
            <returns>
                The new file path with this directory and the appended file path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="file" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="file" /> is a rooted file path. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.ChangeDirectoryName(System.String)">
            <summary>
                Creates a new directory path with this directories parent directory but another directory name.
            </summary>
            <param name="directoryName"> The new directory name. </param>
            <returns>
                The new directory path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="directoryName" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="directoryName" /> is empty. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="directoryName" /> is not a valid new directory name. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.ChangeParent(RI.Utilities.Paths.DirectoryPath)">
            <summary>
                Creates a new directory path with this directory name but another parent directory.
            </summary>
            <param name="newParent"> The new parent directory. </param>
            <returns>
                The new directory path.
            </returns>
            <remarks>
                <para>
                    If <paramref name="newParent" /> is null, the resulting directory is a relative directory only consisting of this <see cref="P:RI.Utilities.Paths.DirectoryPath.DirectoryName" /> where the whole parent directory part is removed.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.ChangeType(RI.Utilities.Paths.PathType)">
            <inheritdoc cref="M:RI.Utilities.Paths.PathString.ChangeType(RI.Utilities.Paths.PathType)" />
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.Create">
            <summary>
                Creates the directory if it does not exists or leaves an existing directory unchanged.
            </summary>
            <returns>
                true if the directory was newly created, false if the directory already existed.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The directory path is actually an existing file or a part of its parent is not available. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid directory path, the directory path is too long for the current system to be used. </exception>
            <exception cref="T:System.NotSupportedException"> The directory is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.Delete">
            <summary>
                Deletes the directory and all its files and subdirectories.
            </summary>
            <returns>
                true if the directory existed and was deleted, false otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The directory path is actually an existing file, the directory is read-only, the directory is the current working directory, the directory contains files which cannot be deleted, or the directory is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid directory path, the directory path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.GetFiles(System.Boolean,System.Boolean)">
            <summary>
                Gets a list of all files in this directory path.
            </summary>
            <param name="relativePaths"> Specifies whether the list of files should be relative to this directory path or not. </param>
            <param name="recursive"> Specifies whether only immediate files in this directory path should be returned or recursively all files, including files in subdirectories. </param>
            <returns>
                The list of files of this directory path.
                If no files are available, an empty list is returned.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid directory path, the directory path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.IOException"> The directory path is actually an existing file or a part of its parent is not available. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The directory path does not exist. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.GetFiles(System.Boolean,System.Boolean,System.String)">
            <summary>
                Gets a list of all files in this directory path which matches a specified file name pattern.
            </summary>
            <param name="relativePaths"> Specifies whether the list of files should be relative to this directory path or not. </param>
            <param name="recursive"> Specifies whether only immediate files in this directory path should be returned or recursively all files, including files in subdirectories. </param>
            <param name="pattern"> The pattern for the file names (can be null to return all files). </param>
            <returns>
                The list of files of this directory path.
                If no files are available, an empty list is returned.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid directory path, the directory path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.IOException"> The directory path is actually an existing file or a part of its parent is not available. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The directory path does not exist. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.GetSubdirectories(System.Boolean,System.Boolean)">
            <summary>
                Gets a list of all subdirectories in this directory path.
            </summary>
            <param name="relativePaths"> Specifies whether the list of subdirectories should be relative to this directory path or not. </param>
            <param name="recursive"> Specifies whether only immediate subdirectories should be returned or recursively all subdirectories. </param>
            <returns>
                The list of subdirectories of this directory path.
                If no subdirectories are available, an empty list is returned.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid directory path, the directory path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.IOException"> The directory path is actually an existing file or a part of its parent is not available. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The directory path does not exist. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.GetSubdirectories(System.Boolean,System.Boolean,System.String)">
            <summary>
                Gets a list of all subdirectories in this directory path which matches a specified directory name pattern.
            </summary>
            <param name="relativePaths"> Specifies whether the list of subdirectories should be relative to this directory path or not. </param>
            <param name="recursive"> Specifies whether only immediate subdirectories should be returned or recursively all subdirectories. </param>
            <param name="pattern"> The pattern for the directory names (can be null to return all subdirectories). </param>
            <returns>
                The list of subdirectories of this directory path.
                If no subdirectories are available, an empty list is returned.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The directory contains wildcards. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid directory path, the directory path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.IOException"> The directory path is actually an existing file or a part of its parent is not available. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The directory path does not exist. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.GetTempFile">
            <summary>
                Creates a temporary zero-byte file.
            </summary>
            <returns>
                The path to the newly created temporary file.
            </returns>
            <remarks>
                <para>
                    <see cref="M:RI.Utilities.Paths.DirectoryPath.GetTempFile" /> creates a new file name consisting of a <see cref="T:System.Guid" /> and <see cref="F:RI.Utilities.Paths.DirectoryPath.TemporaryExtension" /> and then creates the file using <see cref="M:RI.Utilities.Paths.FilePath.CreateNew" />.
                    If a file with the created <see cref="T:System.Guid" /> (veeeery unlikely...) already exists, it tries another <see cref="T:System.Guid" />, as long as necessary to find an unused <see cref="T:System.Guid" />.
                </para>
            </remarks>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.MakeAbsoluteFrom(RI.Utilities.Paths.DirectoryPath)">
            <summary>
                Creates an absolute directory path out of this directory path relative to a specified root path.
            </summary>
            <param name="root"> The root path. </param>
            <returns>
                The absolute directory path using <paramref name="root" />.
            </returns>
            <remarks>
                <para>
                    If this directory path is already absolute, nothing is done and the same directory path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> is not a rooted path. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.MakeRelativeTo(RI.Utilities.Paths.DirectoryPath)">
            <summary>
                Creates a relative directory path out of this directory path relative to a specified root path.
            </summary>
            <param name="root"> The root path. </param>
            <returns>
                The relative directory path relative to <paramref name="root" />.
            </returns>
            <remarks>
                <para>
                    If this directory path is already relative, nothing is done and the same directory path is returned.
                </para>
                <note type="important">
                    If this directory path and <paramref name="root" /> do not have the same root, the same value as this directory path is returned, still being an absolute path.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> is not a rooted path. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.VerifyRealDirectory">
            <summary>
                Verifies that the directory path is a &quot;real&quot; usable directory.
            </summary>
            <remarks>
                <para>
                    If the directory path is not a real usable directory, <see cref="T:System.InvalidOperationException" /> is thrown.
                </para>
                <para>
                    <see cref="P:RI.Utilities.Paths.DirectoryPath.IsRealDirectory" /> is used to determine whether it is a real usable directory.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> This directory is not a real usable directory. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.ChangeTypeInternal(RI.Utilities.Paths.PathType)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.CloneInternal">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.CompareTo(RI.Utilities.Paths.DirectoryPath)">
            <inheritdoc cref="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathString)" />
        </member>
        <member name="M:RI.Utilities.Paths.DirectoryPath.Equals(RI.Utilities.Paths.DirectoryPath)">
            <inheritdoc cref="M:RI.Utilities.Paths.PathString.Equals(RI.Utilities.Paths.PathString)" />
        </member>
        <member name="T:RI.Utilities.Paths.FilePath">
            <summary>
                Describes a path to a file.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Paths.FilePath" /> uses <see cref="T:RI.Utilities.Paths.PathProperties" /> to extract and store path information.
                    See <see cref="T:RI.Utilities.Paths.PathProperties" /> for more details about the supported types of file paths.
                </para>
                <para>
                    <see cref="T:RI.Utilities.Paths.FilePath" /> provides more file path specific functionalities compared to <see cref="T:System.String" /> and offers a more consistent way of working with paths than <see cref="T:System.IO.Path" />.
                    It can be implicitly converted to a <see cref="T:System.String" /> to work seamless with APIs using <see cref="T:System.String" /> for paths.
                </para>
                <para>
                    See <see cref="T:RI.Utilities.Paths.PathProperties" /> for possible format strings for <see cref="M:RI.Utilities.Paths.PathString.ToString(System.String)"/>.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
            <![CDATA[
            // get a temporary file
            var tempFile = FilePath.GetTempFile();
            
            // write some text
            tempFile.WriteText("some text");
            
            // read some text
            string text = tempFile.ReadText();
            
            // delete temporary file
            tempFile.Delete();
            
            // create some paths
            var gamePath = new FilePath(@"C:\Program Files (x86)\Steam\steamapps\common\MyGame\MyGame.exe");
            var modPath  = new FilePath(@"C:\Program Files (x86)\Steam\steamapps\common\MyGame\data\mods\mods.ini");
            
            // get directories
            var gameDir  = gamePath.Directory;                       // C:\Program Files (x86)\Steam\steamapps\common\MyGame
            var modDir   = modPath.Directory;                        // C:\Program Files (x86)\Steam\steamapps\common\MyGame\data\mods
            var otherDir = gameDir.AppendDirectory("other", "dir");  // C:\Program Files (x86)\Steam\steamapps\common\MyGame\other\dir
            var modRel   = modDir.MakeRelativeTo(otherDir);          // ..\..\other\dir
            ]]>
            </code>
            </example>
            TODO: AppendBytes
            TODO: AppendText
            TODO: OpenTextReader
            TODO: OpenTextWriter
            TODO: OpenBinaryReader
            TODO: OpenBinaryWriter
            TODO: OpenStream
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.GetTempFile">
            <summary>
                Creates a temporary zero-byte file and returns its path.
            </summary>
            <returns>
                The path to the newly created temporary file.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.op_Implicit(System.String)~RI.Utilities.Paths.FilePath">
            <summary>
                Implicit conversion of a <see cref="T:System.String" /> to <see cref="T:RI.Utilities.Paths.FilePath" />.
            </summary>
            <param name="path"> The path to convert to a file path. </param>
            <returns>
                The file path.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Paths.FilePath" />.
            </summary>
            <param name="path"> The path. </param>
            <remarks>
                <para>
                    Using this constructor, wildcards and relative paths are allowed and the type of the path is assumed to be of the same type as used on the current system.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="path" /> is not a valid file path. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.#ctor(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Utilities.Paths.PathType})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Paths.FilePath" />.
            </summary>
            <param name="path"> The path. </param>
            <param name="allowWildcards"> Specifies whether wildcards are allowed or not. </param>
            <param name="allowRelatives"> Specifies whether relative directory names are allowed or not. </param>
            <param name="assumedType"> Optionally specifies the type of the path which is assumed if the type cannot be clearly determined through analysis of <paramref name="path" />. </param>
            <remarks>
                <para>
                    See <see cref="M:RI.Utilities.Paths.PathProperties.FromPath(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Utilities.Paths.PathType})" /> for more details about the parameters, especially <paramref name="assumedType" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="path" /> is not a valid file path. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.#ctor(RI.Utilities.Paths.PathProperties)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Paths.FilePath" />.
            </summary>
            <param name="path"> The <see cref="T:RI.Utilities.Paths.PathProperties" /> object which describes the path. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
        </member>
        <member name="P:RI.Utilities.Paths.FilePath.Directory">
            <summary>
                Gets the directory path of the file.
            </summary>
            <value>
                The directory path of the file or null if the file path does not specify a directory.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.FilePath.Exists">
            <summary>
                Gets whether the file exists.
            </summary>
            <value>
                true if the file exists, false otherwise.
            </value>
            <remarks>
                <note type="note">
                    <see cref="P:RI.Utilities.Paths.FilePath.Exists" /> does not throw exceptions besides <see cref="T:System.InvalidOperationException" />.
                    For example, if the file exists but the user does not have access permissions, the file is not of a compatible path type used on the current system, etc., false is returned.
                </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
        </member>
        <member name="P:RI.Utilities.Paths.FilePath.ExtensionWithDot">
            <summary>
                Gets the extension of the file name (with the dot).
            </summary>
            <value>
                The extension of the file name (with the dot) or null if the file name does not have an extension.
            </value>
            <remarks>
                <para>
                    If the file name ends with a dot, this property has the value of an empty string.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.FilePath.ExtensionWithoutDot">
            <summary>
                Gets the extension of the file name (without the dot).
            </summary>
            <value>
                The extension of the file name (without the dot) or null if the file name does not have an extension.
            </value>
            <remarks>
                <para>
                    If the file name ends with a dot, this property has the value of an empty string.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.FilePath.FileName">
            <summary>
                Gets the file name of the file path.
            </summary>
            <value>
                The file name of the file path, including name and extension.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.FilePath.FileNameWithoutExtension">
            <summary>
                Gets the file name without its extension.
            </summary>
            <value>
                The file name without its extension.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.FilePath.IsRealFile">
            <summary>
                Gets whether the file path is a &quot;real&quot; usable file.
            </summary>
            <value>
                true if the file path is a real usable file, false otherwise.
            </value>
            <remarks>
                <para>
                    A real usable file is a file which has not wildcards.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.FilePath.Size">
            <summary>
                Gets the size of the file in bytes.
            </summary>
            <value>
                The size of the file in bytes or null if the file does not exist or cannot be accessed.
            </value>
            <remarks>
                <note type="note">
                    <see cref="P:RI.Utilities.Paths.FilePath.Size" /> does not throw exceptions besides <see cref="T:System.InvalidOperationException" />.
                    For example, if the file exists but the user does not have access permissions, the file is not of a compatible path type used on the current system, etc., null is returned.
                </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.ChangeDirectory(RI.Utilities.Paths.DirectoryPath)">
            <summary>
                Creates a new file path with this file name but another directory.
            </summary>
            <param name="directory"> The new directory path. </param>
            <returns>
                The new file path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="directory" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.ChangeExtension(System.String)">
            <summary>
                Creates a new file path with this file name and directory but another extension.
            </summary>
            <param name="extension"> The new extension (with or without a leading dot). </param>
            <returns>
                The new file path.
            </returns>
            <remarks>
                <para>
                    If <paramref name="extension" /> is an empty string, the resulting file name will have a dot at its end but no extension.
                    If <paramref name="extension" /> is null, the extension (including dot) will be removed.
                </para>
                <note type="note">
                    All leading dots will be trimmed to a single leading dot when combined with the rest of the file name.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="extension" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> The existing file name (without extension) plus <paramref name="extension" /> do not form a valid new file name. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.ChangeFileName(System.String)">
            <summary>
                Creates a new file path with this directory but another file name (including extension).
            </summary>
            <param name="fileName"> The new file name including its extension. </param>
            <returns>
                The new file path.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileName" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="fileName" /> is empty. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="fileName" /> is not a valid new file name. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.ChangeFileNameWithoutExtension(System.String)">
            <summary>
                Creates a new file path with this directory but another file name (keeping this extension).
            </summary>
            <param name="fileNameWithoutExtension"> The new file name without its extension. </param>
            <returns>
                The new file path.
            </returns>
            <remarks>
                <para>
                    If <paramref name="fileNameWithoutExtension" /> is an empty string, the resulting file name will consist of only the extension (including its dot).
                    If <paramref name="fileNameWithoutExtension" /> is null, the resulting file name will consist of only the extension (without its dot).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="fileNameWithoutExtension" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="fileNameWithoutExtension" /> plus the existing extension do not form a valid new file name. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.ChangeType(RI.Utilities.Paths.PathType)">
            <inheritdoc cref="M:RI.Utilities.Paths.PathString.ChangeType(RI.Utilities.Paths.PathType)" />
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.Copy(RI.Utilities.Paths.FilePath,System.Boolean)">
            <summary>
                Copies the file.
            </summary>
            <param name="destination"> The destination file. </param>
            <param name="overwrite"> Specifies whether an already existing destination file should be overwritten (true) or not (false). </param>
            <returns>
                true if the file was copied, false otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> The source file does not exist. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.Copy(RI.Utilities.Paths.DirectoryPath,System.Boolean)">
            <summary>
                Copies the file to a directory, keeping its file name.
            </summary>
            <param name="destination"> The destination directory. </param>
            <param name="overwrite"> Specifies whether an already existing destination file should be overwritten (true) or not (false). </param>
            <returns>
                true if the file was copied, false otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> The source file does not exist. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.CreateIfNotExist">
            <summary>
                Creates the file if it does not exist with a new file of zero length or keeps an already existing file.
            </summary>
            <returns>
                true if the file was newly created, false if the file already existed.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.CreateNew">
            <summary>
                Creates the file if it does not exist or overwrites an existing file with a new file of zero length.
            </summary>
            <returns>
                true if the file was newly created, false if the file already existed and was reset to zero length.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.Delete">
            <summary>
                Deletes the file.
            </summary>
            <returns>
                true if the file existed and was deleted, false otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.MakeAbsoluteFrom(RI.Utilities.Paths.DirectoryPath)">
            <summary>
                Creates an absolute file path out of this file path relative to a specified root path.
            </summary>
            <param name="root"> The root path. </param>
            <returns>
                The absolute file path using <paramref name="root" />.
            </returns>
            <remarks>
                <para>
                    If this file path is already absolute, nothing is done and the same file path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> is not a rooted path. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.MakeRelativeTo(RI.Utilities.Paths.DirectoryPath)">
            <summary>
                Creates a relative file path out of this file path relative to a specified root path.
            </summary>
            <param name="root"> The root path. </param>
            <returns>
                The relative file path relative to <paramref name="root" />.
            </returns>
            <remarks>
                <para>
                    If this file path is already relative, nothing is done and the same file path is returned.
                </para>
                <note type="important">
                    If this file path and <paramref name="root" /> do not have the same root, the same value as this file path is returned, still being an absolute path.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> is not a rooted path. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.Move(RI.Utilities.Paths.FilePath,System.Boolean)">
            <summary>
                Moves the file.
            </summary>
            <param name="destination"> The destination file. </param>
            <param name="overwrite"> Specifies whether an already existing destination file should be overwritten (true) or not (false). </param>
            <returns>
                true if the file was moved, false otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> The source file does not exist. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.Move(RI.Utilities.Paths.DirectoryPath,System.Boolean)">
            <summary>
                Moves the file to a directory, keeping its file name.
            </summary>
            <param name="destination"> The destination directory. </param>
            <param name="overwrite"> Specifies whether an already existing destination file should be overwritten (true) or not (false). </param>
            <returns>
                true if the file was moved, false otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.FileNotFoundException"> The source file does not exist. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.ReadBytes">
            <summary>
                Reads all binary data from the file.
            </summary>
            <returns>
                All binary data from the file or null if the file does not exist.
            </returns>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.ReadText">
            <summary>
                Reads all text from the file.
            </summary>
            <returns>
                All text from the file or null if the file does not exist.
            </returns>
            <remarks>
                <para>
                    The current systems default encoding (<see cref="P:System.Text.Encoding.Default" />) is used.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.ReadText(System.Text.Encoding)">
            <summary>
                Reads all text from the file.
            </summary>
            <param name="encoding"> The encoding used to read the file. </param>
            <returns>
                All text from the file or null if the file does not exist.
            </returns>
            <remarks>
                <para>
                    The current systems default encoding (<see cref="P:System.Text.Encoding.Default" />) is used if <paramref name="encoding" /> is null.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.VerifyRealFile">
            <summary>
                Verifies that the file path is a &quot;real&quot; usable file.
            </summary>
            <remarks>
                <para>
                    If the file path is not a real usable file, <see cref="T:System.InvalidOperationException" /> is thrown.
                </para>
                <para>
                    <see cref="P:RI.Utilities.Paths.FilePath.IsRealFile" /> is used to determine whether it is a real usable file.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> This directory is not a real usable file. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.WriteBytes(System.Byte[])">
            <summary>
                Writes binary data to the file.
            </summary>
            <param name="data"> The data to write (can be null to write zero bytes). </param>
            <returns>
                true if the file was newly created, false if it already existed and was overwritten with the specified data.
            </returns>
            <remarks>
                <para>
                    The file is created if it does not already exist.
                    If it already exists, the file is overwritten with a new file.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.WriteText(System.String)">
            <summary>
                Writes text to the file.
            </summary>
            <param name="text"> The text to write. </param>
            <returns>
                true if the file was newly created, false if it already existed and was overwritten with the specified text.
            </returns>
            <remarks>
                <para>
                    The current systems default encoding (<see cref="P:System.Text.Encoding.Default" />) is used.
                </para>
                <para>
                    The file is created if it does not already exist.
                    If it already exists, the file is overwritten with a new file.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.WriteText(System.String,System.Text.Encoding)">
            <summary>
                Writes text to the file.
            </summary>
            <param name="text"> The text to write (can be null to write an empty string). </param>
            <param name="encoding"> The encoding used to write the file. </param>
            <returns>
                true if the file was newly created, false if it already existed and was overwritten with the specified text.
            </returns>
            <remarks>
                <para>
                    The current systems default encoding (<see cref="P:System.Text.Encoding.Default" />) is used if <paramref name="encoding" /> is null.
                </para>
                <para>
                    The file is created if it does not already exist.
                    If it already exists, the file is overwritten with a new file.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The file contains wildcards. </exception>
            <exception cref="T:System.IO.IOException"> The file is in use. </exception>
            <exception cref="T:System.UnauthorizedAccessException"> The user does not have the required permissions, the file is read-only, or the file is an executable which is in use. </exception>
            <exception cref="T:System.IO.PathTooLongException"> Although being a valid file path, the file path is too long for the current system to be used. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"> The files directory does not exist or is not available. </exception>
            <exception cref="T:System.NotSupportedException"> The file is not of a compatible path type used on the current system. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.ChangeTypeInternal(RI.Utilities.Paths.PathType)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.CloneInternal">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.CompareTo(RI.Utilities.Paths.FilePath)">
            <inheritdoc cref="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathString)" />
        </member>
        <member name="M:RI.Utilities.Paths.FilePath.Equals(RI.Utilities.Paths.FilePath)">
            <inheritdoc cref="M:RI.Utilities.Paths.PathString.Equals(RI.Utilities.Paths.PathString)" />
        </member>
        <member name="T:RI.Utilities.Paths.PathError">
            <summary>
                Specifies the error in an invalid path.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.None">
            <summary>
                The path is valid.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.Empty">
            <summary>
                The path is empty or null.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.WildcardsNotAllowed">
            <summary>
                The path contains wildcards although they are not allowed.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.InvalidCharacter">
            <summary>
                The path contains invalid characters.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.InvalidDirectorySeparator">
            <summary>
                The path contains an invalid directory separator (e.g. a forward slash in a Windows path).
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.RepeatedDirectorySeparator">
            <summary>
                The path contains two directory separators next to each other with no name in between.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.AmbiguousType">
            <summary>
                The type of the path is ambiguous as it cannot be clearly determined.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.WrongType">
            <summary>
                The type of the path is not of the expected type.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.EmptyName">
            <summary>
                The path contains parts with empty names (e.g. only whitespace between two directory separators).
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.RelativesNotAllowed">
            <summary>
                The path contains relative parts although they are not allowed.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathError.RelativeGoesBeyondRoot">
            <summary>
                The path contains relative parts which reference higher up than the root of the path (e.g. c:\data\..\..\dir).
            </summary>
        </member>
        <member name="T:RI.Utilities.Paths.PathProperties">
            <summary>
                Describes a path and its properties.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Paths.PathProperties" /> analyzes a path and contains, besides the path itself, several properties which describe the characteristics of the path.
                    For invalid paths, an error description is provided (<see cref="P:RI.Utilities.Paths.PathProperties.Error" />).
                </para>
                <para>
                    <see cref="T:RI.Utilities.Paths.PathProperties" /> supports Windows, Unix, and UNC style paths.
                </para>
                <para>
                    <see cref="M:RI.Utilities.Paths.PathProperties.ToString(System.String)"/> supports the following format strings; <c>o</c>, <c>O</c>, <c>g</c>, <c>G</c>, null or empty string: The original path (<see cref="P:RI.Utilities.Paths.PathProperties.PathOriginal"/>) / <c>n</c>, <c>N</c>: The normalized path (<see cref="P:RI.Utilities.Paths.PathProperties.PathNormalized"/>) / <c>r</c>, <c>R</c>: The resolved path (<see cref="P:RI.Utilities.Paths.PathProperties.PathResolved"/>).
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.FileExtensionSeparator">
            <summary>
                The separator character between a file name and its extension.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.RelativeSame">
            <summary>
                The string which can be used as a relative directory name to indicate the same level or current directory.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.RelativeUp">
            <summary>
                The string which can be used as a relative directory name to point one level upwards.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.UncDirectorySeparator">
            <summary>
                The directory separator used in UNC style paths.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.UnixDirectorySeparator">
            <summary>
                The directory separator used in Unix style paths.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.WildcardMore">
            <summary>
                The wildcard character which is a placeholder for zero, one, or more characters.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.WildcardOne">
            <summary>
                The wildcard character which is a placeholder for exactly one characters.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.WindowsDirectorySeparator">
            <summary>
                The directory separator used in Windows style paths.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.WindowsDriveSeparator">
            <summary>
                The separator character between the drive and the path in a rooted Windows style path.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathProperties.InvalidPathCharacters">
            <summary>
                All invalid path characters.
            </summary>
            <remarks>
                <para>
                    These characters are invalid for both directory and file paths.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.FromPath(System.String)">
            <summary>
                Analyzes a path and returns the results as an instance of <see cref="T:RI.Utilities.Paths.PathProperties" />.
            </summary>
            <param name="path"> The path to analyze. </param>
            <returns>
                The instance of <see cref="T:RI.Utilities.Paths.PathProperties" /> which describes the path.
            </returns>
            <remarks>
                <note type="note">
                    Invalid paths will return a valid <see cref="T:RI.Utilities.Paths.PathProperties" /> instance with the <see cref="P:RI.Utilities.Paths.PathProperties.Error" /> property set accordingly.
                </note>
                <para>
                    Using this method, wildcards and relative paths are allowed and the type of the path is assumed to be of the same type as used on the current system.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.FromPath(System.String,System.Boolean,System.Boolean,System.Nullable{RI.Utilities.Paths.PathType})">
            <summary>
                Analyzes a path and returns the results as an instance of <see cref="T:RI.Utilities.Paths.PathProperties" />.
            </summary>
            <param name="path"> The path to analyze. </param>
            <param name="allowWildcards"> Specifies whether wildcards are allowed or not. </param>
            <param name="allowRelatives"> Specifies whether relative directory names are allowed or not. </param>
            <param name="assumedType"> Optionally specifies the type of the path which is assumed if the type cannot be clearly determined through analysis of <paramref name="path" />. </param>
            <returns>
                The instance of <see cref="T:RI.Utilities.Paths.PathProperties" /> which describes the path.
            </returns>
            <remarks>
                <note type="note">
                    Invalid paths will return a valid <see cref="T:RI.Utilities.Paths.PathProperties" /> instance with the <see cref="P:RI.Utilities.Paths.PathProperties.Error" /> property set accordingly.
                </note>
                <para>
                    If <paramref name="assumedType" /> is null and the path cannot be unambiguously determined from <paramref name="path" />, the path is considered invalid and <see cref="P:RI.Utilities.Paths.PathProperties.Error" /> is set to <see cref="F:RI.Utilities.Paths.PathError.AmbiguousType" />.
                    If <paramref name="assumedType" /> is not null and the path type determined through analysis of <paramref name="path" /> does not match with <paramref name="assumedType" />, the path is considered invalid and <see cref="P:RI.Utilities.Paths.PathProperties.Error" /> is set to <see cref="F:RI.Utilities.Paths.PathError.WrongType" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="path" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="assumedType" /> is <see cref="F:RI.Utilities.Paths.PathType.Invalid" />. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.GetSystemType">
            <summary>
                Gets the <see cref="T:RI.Utilities.Paths.PathType" /> which is used by the current system.
            </summary>
            <returns>
                The <see cref="T:RI.Utilities.Paths.PathType" /> which is used by the current system or null if the type cannot be determined.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.MakeAbsolute(RI.Utilities.Paths.PathProperties,RI.Utilities.Paths.PathProperties)">
            <summary>
                Makes an absolute path out of a path relative to a rooted path.
            </summary>
            <param name="root"> The rooted path. </param>
            <param name="path"> The path relative to <paramref name="root" />. </param>
            <returns>
                The instance of <see cref="T:RI.Utilities.Paths.PathProperties" /> which describes the absolute path.
            </returns>
            <remarks>
                <para>
                    If <paramref name="path" /> is already absolute, nothing is done and the same path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> or <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> or <paramref name="path" /> is an invalid path, <paramref name="root" /> is not a rooted path, or <paramref name="root" /> and <paramref name="path" /> are not of the same type. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.MakeRelative(RI.Utilities.Paths.PathProperties,RI.Utilities.Paths.PathProperties)">
            <summary>
                Makes a relative path out of a rooted path compared to another rooted path.
            </summary>
            <param name="root"> The rooted path. </param>
            <param name="path"> The path to be made relative compared to <paramref name="root" />. </param>
            <returns>
                The instance of <see cref="T:RI.Utilities.Paths.PathProperties" /> which describes the relative path.
            </returns>
            <remarks>
                <para>
                    If <paramref name="path" /> is already relative, nothing is done and the same path is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="root" /> or <paramref name="path" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.InvalidPathArgumentException"> <paramref name="root" /> or <paramref name="path" /> is an invalid path, <paramref name="root" /> is not a rooted path, or <paramref name="root" /> and <paramref name="path" /> are not of the same type. </exception>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.Error">
            <summary>
                Gets the error of the path.
            </summary>
            <value>
                The error of the path.
                <see cref="F:RI.Utilities.Paths.PathError.None" /> if the path is valid.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.HasRelatives">
            <summary>
                Gets whether the path contains relative directory names.
            </summary>
            <value>
                true if the path contains relative directory names, false otherwise
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.HasWildcards">
            <summary>
                Gets whether the path contains wildcards.
            </summary>
            <value>
                true if the path contains wildcards, false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.IsRoot">
            <summary>
                Gets whether the path is a root.
            </summary>
            <value>
                true if the path is a root, false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.IsRooted">
            <summary>
                Gets whether the path is rooted or absolute respectively.
            </summary>
            <value>
                true if the path is rooted, false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.IsValid">
            <summary>
                Gets whether the path is valid.
            </summary>
            <value>
                true if the path is valid, false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.Name">
            <summary>
                Gets the name of the path.
            </summary>
            <value>
                The name of the path.
            </value>
            <remarks>
                <para>
                    The name of a path is the last element in the path, e.g. the file name of a file path or the directory name of a directory path.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.Parent">
            <summary>
                Gets the parent of the path.
            </summary>
            <value>
                The parent of the path or null if the path is a root or does not have a parent.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.PartsNormalized">
            <summary>
                Gets the array with all normalized (but still unresolved) parts of the path.
            </summary>
            <value>
                The array with all normalized (but still unresolved) parts of the path.
            </value>
            <remarks>
                <para>
                    Each part of the path is either the root or a directory.
                </para>
                <para>
                    Normalization includes removal of unnecessary leading or trailing directory separators.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.PartsResolved">
            <summary>
                Gets the array with all normalized and resolved parts of the path.
            </summary>
            <value>
                The array with all normalized and resolved parts of the path.
            </value>
            <remarks>
                <para>
                    Each part of the path is either the root or a directory.
                </para>
                <para>
                    Resolving includes normalization and resolving of relative directory names.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.PathNormalized">
            <summary>
                Gets the normalized path.
            </summary>
            <value>
                The normalized path.
            </value>
            <remarks>
                <para>
                    Normalization includes removal of unnecessary leading or trailing directory separators.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.PathOriginal">
            <summary>
                Gets the original path.
            </summary>
            <value>
                The original path.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.PathResolved">
            <summary>
                Gets the resolved path.
            </summary>
            <value>
                The resolved path.
            </value>
            <remarks>
                <para>
                    Resolving includes normalization and resolving of relative directory names.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.Root">
            <summary>
                Gets the root of the path.
            </summary>
            <value>
                The root of the path or null if the path has no root or is not rooted respectively.
            </value>
        </member>
        <member name="P:RI.Utilities.Paths.PathProperties.Type">
            <summary>
                Gets the type of the path.
            </summary>
            <value>
                The type of the path.
            </value>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.ChangeType(RI.Utilities.Paths.PathType)">
            <summary>
                Creates a copy of this path using a different path type.
            </summary>
            <param name="type"> The path type to use for the copy. </param>
            <returns>
                The copy of this path with the specified path type.
            </returns>
            <exception cref="T:System.ArgumentException"> <paramref name="type" /> is <see cref="F:RI.Utilities.Paths.PathType.Invalid" />. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.IsCompatibleWith(RI.Utilities.Paths.PathString)">
            <summary>
                Determines whether this path is compatible with another path.
            </summary>
            <param name="other"> The other path. </param>
            <returns>
                true if the paths are compatible, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.IsCompatibleWith(RI.Utilities.Paths.PathProperties)">
            <summary>
                Determines whether this path is compatible with another path.
            </summary>
            <param name="other"> The other path. </param>
            <returns>
                true if the paths are compatible, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.IsCompatibleWith(RI.Utilities.Paths.PathType)">
            <summary>
                Determines whether this path is compatible with a specifed path type.
            </summary>
            <param name="type"> The path type to check compatibility with. </param>
            <returns>
                true if the path is compatible, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.IsCompatibleWith">
            <summary>
                Determines whether this path is compatible with the current system.
            </summary>
            <returns>
                true if the path is compatible, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.ToString">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.ToString(System.String)">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.CompareTo(RI.Utilities.Paths.PathProperties)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathProperties.Equals(RI.Utilities.Paths.PathProperties)">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Paths.PathString">
            <summary>
                Base class for specialized path objects (<see cref="T:RI.Utilities.Paths.FilePath" />, <see cref="T:RI.Utilities.Paths.DirectoryPath" />).
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.Compare(RI.Utilities.Paths.PathString,RI.Utilities.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.Equals(RI.Utilities.Paths.PathString,RI.Utilities.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Paths.PathString" />s for equality.
            </summary>
            <param name="x"> The first <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <returns> The equality of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Utilities.Paths.PathString.Equals(RI.Utilities.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.op_Equality(RI.Utilities.Paths.PathString,RI.Utilities.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Paths.PathString" />s for equality.
            </summary>
            <param name="x"> The first <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <returns> The equality of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Utilities.Paths.PathString.Equals(RI.Utilities.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.op_GreaterThan(RI.Utilities.Paths.PathString,RI.Utilities.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.op_GreaterThanOrEqual(RI.Utilities.Paths.PathString,RI.Utilities.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.op_Implicit(RI.Utilities.Paths.PathString)~System.String">
            <summary>
                Implicit conversion of a <see cref="T:RI.Utilities.Paths.PathString" /> to <see cref="T:System.String" />.
            </summary>
            <param name="path"> The path to convert to a string. </param>
            <returns>
                The string.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.op_Inequality(RI.Utilities.Paths.PathString,RI.Utilities.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Paths.PathString" />s for equality.
            </summary>
            <param name="x"> The first <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <returns> The equality of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Utilities.Paths.PathString.Equals(RI.Utilities.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.op_LessThan(RI.Utilities.Paths.PathString,RI.Utilities.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.op_LessThanOrEqual(RI.Utilities.Paths.PathString,RI.Utilities.Paths.PathString)">
            <summary>
                Compares two <see cref="T:RI.Utilities.Paths.PathString" />s for order.
            </summary>
            <param name="x"> The first <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <param name="y"> The second <see cref="T:RI.Utilities.Paths.PathString" />. </param>
            <returns> The order of <paramref name="y" /> compared to <paramref name="x" />. </returns>
            <remarks>
                See <see cref="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathString)" /> for more details.
            </remarks>
        </member>
        <member name="P:RI.Utilities.Paths.PathString.HasRelatives">
            <inheritdoc cref="P:RI.Utilities.Paths.PathProperties.HasRelatives" />
        </member>
        <member name="P:RI.Utilities.Paths.PathString.HasWildcards">
            <inheritdoc cref="P:RI.Utilities.Paths.PathProperties.HasWildcards" />
        </member>
        <member name="P:RI.Utilities.Paths.PathString.IsRoot">
            <inheritdoc cref="P:RI.Utilities.Paths.PathProperties.IsRoot" />
        </member>
        <member name="P:RI.Utilities.Paths.PathString.IsRooted">
            <inheritdoc cref="P:RI.Utilities.Paths.PathProperties.IsRooted" />
        </member>
        <member name="P:RI.Utilities.Paths.PathString.PathNormalized">
            <inheritdoc cref="P:RI.Utilities.Paths.PathProperties.PathNormalized" />
        </member>
        <member name="P:RI.Utilities.Paths.PathString.PathOriginal">
            <inheritdoc cref="P:RI.Utilities.Paths.PathProperties.PathOriginal" />
        </member>
        <member name="P:RI.Utilities.Paths.PathString.PathResolved">
            <inheritdoc cref="P:RI.Utilities.Paths.PathProperties.PathResolved" />
        </member>
        <member name="P:RI.Utilities.Paths.PathString.Root">
            <inheritdoc cref="P:RI.Utilities.Paths.PathProperties.Root" />
        </member>
        <member name="P:RI.Utilities.Paths.PathString.Type">
            <inheritdoc cref="P:RI.Utilities.Paths.PathProperties.Type" />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.ChangeType(RI.Utilities.Paths.PathType)">
            <summary>
                Creates a copy of this directory path using a different path type.
            </summary>
            <param name="type"> The directory path type to use for the copy. </param>
            <returns>
                The copy of this directory path with the specified path type.
            </returns>
            <exception cref="T:System.ArgumentException"> <paramref name="type" /> is <see cref="F:RI.Utilities.Paths.PathType.Invalid" />. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathProperties)">
            <inheritdoc cref="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathString)" />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.Equals(RI.Utilities.Paths.PathProperties)">
            <inheritdoc cref="M:RI.Utilities.Paths.PathString.Equals(RI.Utilities.Paths.PathString)" />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.GetPathProperties">
            <summary>
                Gets the properties of the path represented by this <see cref="T:RI.Utilities.Paths.PathString" />.
            </summary>
            <returns>
                The properties of the path represented by this <see cref="T:RI.Utilities.Paths.PathString" />
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.IsCompatibleWith(RI.Utilities.Paths.PathString)">
            <summary>
                Determines whether this path is compatible with another path.
            </summary>
            <param name="other"> The other path. </param>
            <returns>
                true if the paths are compatible, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.IsCompatibleWith(RI.Utilities.Paths.PathProperties)">
            <summary>
                Determines whether this path is compatible with another path.
            </summary>
            <param name="other"> The other path. </param>
            <returns>
                true if the paths are compatible, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="other" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.IsCompatibleWith(RI.Utilities.Paths.PathType)">
            <summary>
                Determines whether this path is compatible with a specifed path type.
            </summary>
            <param name="type"> The path type to check compatibility with. </param>
            <returns>
                true if the path is compatible, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.IsCompatibleWith">
            <summary>
                Determines whether this path is compatible with the current system.
            </summary>
            <returns>
                true if the path is compatible, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Paths.PathString.ChangeTypeInternal(RI.Utilities.Paths.PathType)">
            <inheritdoc cref="M:RI.Utilities.Paths.PathString.ChangeType(RI.Utilities.Paths.PathType)" />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.CloneInternal">
            <inheritdoc cref="M:RI.Utilities.ObjectModel.ICloneable`1.Clone" />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.ToString">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.ToString(System.String)">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.RI#Utilities#ObjectModel#ICloneable{RI#Utilities#Paths#PathString}#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.CompareTo(RI.Utilities.Paths.PathString)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Paths.PathString.Equals(RI.Utilities.Paths.PathString)">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Paths.PathType">
            <summary>
                Specifies the type of a path.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathType.Invalid">
            <summary>
                The path is not a valid path.
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathType.Windows">
            <summary>
                The path is a Windows-style path (e.g. d:\data\file.ext).
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathType.Unix">
            <summary>
                The path is a UNIX style path (e.g. /dev/null).
            </summary>
        </member>
        <member name="F:RI.Utilities.Paths.PathType.Unc">
            <summary>
                The path is a UNC style path (e.g. \\server\share).
            </summary>
        </member>
        <member name="T:RI.Utilities.Paths.NamespaceDoc">
            <summary>
                Contains new types for working with file and directory paths.
            </summary>
        </member>
        <member name="T:RI.Utilities.Randomizing.RandomExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Random" /> type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.FillStream(System.Random,System.IO.Stream,System.Int32)">
            <summary>
                Fills a <see cref="T:System.IO.Stream" /> with random bytes.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="stream"> The <see cref="T:System.IO.Stream" /> to fill. </param>
            <param name="length"> The amount of bytes to fill in the <see cref="T:System.IO.Stream" /> at its current position. </param>
            <returns>
                The number of written bytes to the <see cref="T:System.IO.Stream" />.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> or <paramref name="stream" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="stream" /> is not writeable. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextBoolean(System.Random)">
            <summary>
                Returns random true or false.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <returns>
                true or false.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextByte(System.Random)">
            <summary>
                Gets a random byte value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <returns>
                A random byte value between 0 (inclusive) and 255 (inclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextByte(System.Random,System.Byte)">
            <summary>
                Gets a random byte value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="max"> The allowed maximum value (inclusive). </param>
            <returns>
                A random byte value between 0 (inclusive) and <paramref name="max" /> (inclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextByte(System.Random,System.Byte,System.Byte)">
            <summary>
                Gets a random byte value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum value (inclusive). </param>
            <param name="max"> The allowed maximum value (inclusive). </param>
            <returns>
                A random byte value between <paramref name="min" /> (inclusive) and <paramref name="max" /> (inclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextBytes(System.Random,System.Byte[],System.Int32)">
            <summary>
                Fills a byte array with random values.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="buffer"> The byte array to fill. </param>
            <param name="offset"> The offset in the byte array at which the random fill starts. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="offset" /> is less than zero or outside the length of the array. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextBytes(System.Random,System.Byte[],System.Int32,System.Int32)">
            <summary>
                Fills a byte array with random values.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="buffer"> The byte array to fill. </param>
            <param name="offset"> The offset in the byte array at which the random fill starts. </param>
            <param name="count"> The number of bytes to fill with random values, beginning at <paramref name="offset" />. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="offset" /> or <paramref name="count" /> is less than zero or the range specified by <paramref name="offset" /> and <paramref name="count" /> is outside the length of the array. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
                Gets a byte array of a specified length filled with random bytes.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="length"> The number of randomized bytes in the array. </param>
            <returns>
                The byte array which contains the specified number of randomized bytes.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextChance(System.Random,System.Double)">
            <summary>
                Returns random true or false depending on a specified chance.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="chance"> The chance to return true, between 0.0 (never) and 1.0 (always). </param>
            <returns>
                true or false based on the specified chance.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.NotFiniteNumberException"> <paramref name="chance" /> is either "NaN"/"Not-a-Number" or infinity (positive or negative). </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextDateTime(System.Random)">
            <summary>
                Gets a random date and time value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <returns>
                A random date and time value between 0001-01-01 00:00:00 (inclusive) and 9999-12-31 23:59:59 (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
                Gets a random date and time value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum date and time (inclusive). </param>
            <param name="max"> The allowed maximum date and time (exclusive). </param>
            <returns>
                A random date and time value between <paramref name="min" /> (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextDouble(System.Random,System.Double)">
            <summary>
                Gets a random double precision floating point value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="max"> The allowed maximum value (exclusive). </param>
            <returns>
                A random double precision floating point value between 0.0 (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>
                Gets a random double precision floating point value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum value (inclusive). </param>
            <param name="max"> The allowed maximum value (exclusive). </param>
            <returns>
                A random double precision floating point value between <paramref name="min" /> (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.NotFiniteNumberException"> <paramref name="min" /> or <paramref name="max" /> is either "NaN"/"Not-a-Number" or infinity (positive or negative). </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextFloat(System.Random,System.Single)">
            <summary>
                Gets a random single precision floating point value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="max"> The allowed maximum value (exclusive). </param>
            <returns>
                A random single precision floating point value between 0.0 (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextFloat(System.Random,System.Single,System.Single)">
            <summary>
                Gets a random single precision floating point value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum value (inclusive). </param>
            <param name="max"> The allowed maximum value (exclusive). </param>
            <returns>
                A random single precision floating point value between <paramref name="min" /> (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.NotFiniteNumberException"> <paramref name="min" /> or <paramref name="max" /> is either "NaN"/"Not-a-Number" or infinity (positive or negative). </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextFloat(System.Random)">
            <summary>
                Gets a random single precision floating point value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <returns>
                A random single precision floating point value between 0.0 (inclusive) and 1.0 (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextGaussian(System.Random,System.Double,System.Double)">
            <summary>
                Gets a normally distributed random number.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="mu"> The distributions mean. </param>
            <param name="sigma"> The standard deviation of the distribution. </param>
            <returns>
                A normally distributed random double precision floating point value.
            </returns>
            <remarks>
                <para>
                    See <see href="https://en.wikipedia.org/wiki/Box-Muller_transform"> https://en.wikipedia.org/wiki/Box-Muller_transform </see> for details about the used algorithm.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.NotFiniteNumberException"> <paramref name="mu" /> or <paramref name="sigma" /> is either "NaN"/"Not-a-Number" or infinity (positive or negative). </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextLoremIpsum(System.Random,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Generates a random sentence of readable text.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="words"> The number of words in the sentence. </param>
            <param name="startWithLoremIpsum"> Indicates whether the sentence should start with &quot;lorem ipsum dolor sit amet&quot;. </param>
            <param name="startWithCapital"> Indicates whether the first letter of the sentence should be a capital letter. </param>
            <param name="endWithPeriod"> Indicates whether the sentence should end with a period. </param>
            <returns>
                The string with the amount of specified words.
            </returns>
            <remarks>
                <para>
                    The returned string is a text in a pseudo-language which has no real meaning but appears to be &quot;real&quot; (somewhat resembling latin).
                    For example: Sed cursus ante dapibus diam.
                    See <see href="https://en.wikipedia.org/wiki/Lorem_ipsum"> https://en.wikipedia.org/wiki/Lorem_ipsum </see> for details about &quot;Lorem ipsum&quot;.
                </para>
                <para>
                    The first call of <see cref="M:RI.Utilities.Randomizing.RandomExtensions.NextLoremIpsum(System.Random,System.Int32,System.Boolean,System.Boolean,System.Boolean)" /> takes longer time as subsequent calls because the list of available words is prepared during the first call.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="words" /> is less than zero or <paramref name="startWithLoremIpsum" /> is true and <paramref name="words" /> is less than five. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextTimeSpan(System.Random)">
            <summary>
                Gets a random time span value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <returns>
                A random time span value between 0 (inclusive) and approx. 10'675'199 days (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextTimeSpan(System.Random,System.TimeSpan,System.TimeSpan)">
            <summary>
                Gets a random time span value.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum time span (inclusive). </param>
            <param name="max"> The allowed maximum time span (exclusive). </param>
            <returns>
                A random time span value between <paramref name="min" /> (inclusive) and <paramref name="max" /> (exclusive).
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.NextTriangular(System.Random,System.Double,System.Double,System.Double)">
            <summary>
                Gets a triangular distributed random number.
            </summary>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="min"> The allowed minimum value. </param>
            <param name="max"> The allowed maximum value. </param>
            <param name="mode"> The most frequent value. </param>
            <returns>
                A triangular distributed random double precision floating point value.
            </returns>
            <remarks>
                See <see href="https://en.wikipedia.org/wiki/Triangular_distribution"> https://en.wikipedia.org/wiki/Triangular_distribution </see> for details about the used algorithm.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> is null. </exception>
            <exception cref="T:System.NotFiniteNumberException"> <paramref name="min" />, <paramref name="max" />, or <paramref name="mode" /> is either "NaN"/"Not-a-Number" or infinity (positive or negative). </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0})">
            <summary>
                Shuffles all items of a list randomly.
            </summary>
            <typeparam name="T"> The type of items in <paramref name="list" />. </typeparam>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="list"> The list to be shuffled. </param>
            <returns>
                The number of shuffled items.
                Zero if the list contains no items.
            </returns>
            <remarks>
                <para>
                    Shuffling of items is done in-place, so during shuffling some items might appear twice in the list.
                </para>
                <para>
                    This is a O(n) operation where n is the number of items in <paramref name="list" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> or <paramref name="list" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Shuffles all items of a list, starting at a specified index, randomly.
            </summary>
            <typeparam name="T"> The type of items in <paramref name="list" />. </typeparam>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="list"> The list to be shuffled. </param>
            <param name="index"> The index at which the shuffling starts. </param>
            <returns>
                The number of shuffled items.
                Zero if <paramref name="index" /> points to the end of the list (or is the same as the number of items in the list respectively).
            </returns>
            <remarks>
                <para>
                    Shuffling of items is done in-place, so during shuffling some items might appear twice in the list.
                </para>
                <para>
                    This is a O(n) operation where n is the number of items in <paramref name="list" /> minus <paramref name="index" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> or <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is less than zero or specifies an index outside the size of the list. </exception>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomExtensions.Shuffle``1(System.Random,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
                Shuffles items of a list in a specified range randomly.
            </summary>
            <typeparam name="T"> The type of items in <paramref name="list" />. </typeparam>
            <param name="randomizer"> The randomizer to use. </param>
            <param name="list"> The list to be shuffled. </param>
            <param name="index"> The index at which the shuffling starts. </param>
            <param name="count"> The number of items to shuffle, starting at <paramref name="index" />. </param>
            <returns>
                The number of shuffled items.
                Zero if <paramref name="count" /> is zero.
            </returns>
            <remarks>
                <para>
                    Shuffling of items is done in-place, so during shuffling some items might appear twice in the list.
                </para>
                <para>
                    This is a O(n) operation where n is <paramref name="count" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="randomizer" /> or <paramref name="list" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> or <paramref name="count" /> is less than zero or specifies a range outside the size of the list. </exception>
        </member>
        <member name="T:RI.Utilities.Randomizing.RandomStream">
            <summary>
                Implements a stream which reads random bytes.
            </summary>
            <value>
                <see cref="T:RI.Utilities.Randomizing.RandomStream" /> is only readable and cannot be written or seeked.
            </value>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Randomizing.RandomStream" />.
            </summary>
            <remarks>
                <para>
                    A new default randomizer is used.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.#ctor(System.Random)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Randomizing.RandomStream" />.
            </summary>
            <param name="randomizer"> The used randomizer. Can be null to use a new default randomizer. </param>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Randomizing.RandomStream" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Randomizing.RandomStream.Randomizer">
            <summary>
                Gets the used randomizer.
            </summary>
            <value>
                The used randomizer.
            </value>
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.ThrowNotSeekable">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.ThrowNotTimeoutable">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.ThrowNotWriteable">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Randomizing.RandomStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Randomizing.RandomStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Randomizing.RandomStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Randomizing.RandomStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Randomizing.RandomStream.Length">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Randomizing.RandomStream.Position">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Randomizing.RandomStream.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Randomizing.RandomStream.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Randomizing.RandomStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Randomizing.NamespaceDoc">
            <summary>
                Contains randomizing utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.Reflection.AssemblyExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Reflection.Assembly" /> type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
                Gets the assembly version of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The assembly version of the assembly or null if the version could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyVersionAttribute" /> is used to determine the assembly version of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetCompany(System.Reflection.Assembly)">
            <summary>
                Gets the company of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The company of the assembly or null if the company could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> is used to determine the company of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetCopyright(System.Reflection.Assembly)">
            <summary>
                Gets the copyright of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The copyright of the assembly or null if the copyright could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> is used to determine the copyright of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetDescription(System.Reflection.Assembly)">
            <summary>
                Gets the description of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The description of the assembly or null if the description could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> is used to determine the description of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetEmbeddedFileStream(System.Reflection.Assembly,System.String)">
            <summary>
                Gets the stream of an embedded file.
            </summary>
            <param name="assembly"> The assembly. </param>
            <param name="file"> The name of the embedded resource or the file which is embedded in the assembly respectively. </param>
            <returns>
                The stream to access the embedded file or null if the embedded file was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> or <paramref name="file" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="file" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
                Gets the file version of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The file version of the assembly or null if the version could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> is used to determine the file version of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetGuid(System.Reflection.Assembly,System.Boolean,System.Boolean)">
            <summary>
                Gets a GUID associated with an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <param name="ignoreGuidAttribute"> Specifies whether <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> is ignored for determining the GUID of the assembly. </param>
            <param name="ignoreVersion"> Specifies whether the assemblies version should be ignored for determining the GUID of the assembly. </param>
            <returns>
                The GUID of the assembly.
            </returns>
            <remarks>
                <para>
                    If <paramref name="ignoreGuidAttribute" /> is false and the assembly has a <see cref="T:System.Runtime.InteropServices.GuidAttribute" />, the GUID from that attribute is returned.
                </para>
                <para>
                    If <paramref name="ignoreGuidAttribute" /> is true or <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> is not defined, the following is used to calculate a GUID:
                    <see cref="P:System.Reflection.AssemblyName.Name" /> when <paramref name="ignoreVersion" /> is true, <see cref="P:System.Reflection.AssemblyName.FullName" /> otherwise.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> <paramref name="assembly" /> does not contain any information to build a GUID. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetInformationalVersion(System.Reflection.Assembly)">
            <summary>
                Gets the informational version of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The informational version of the assembly or null if the version could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> is used to determine the informational version of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetProduct(System.Reflection.Assembly)">
            <summary>
                Gets the product name of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The product name of the assembly or null if the product name could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyProductAttribute" /> is used to determine the product name of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetTitle(System.Reflection.Assembly)">
            <summary>
                Gets the title of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The title of the assembly or null if the title could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyTitleAttribute" /> is used to determine the title of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.AssemblyExtensions.GetTrademark(System.Reflection.Assembly)">
            <summary>
                Gets the trademark of an assembly.
            </summary>
            <param name="assembly"> The assembly. </param>
            <returns>
                The trademark of the assembly or null if the trademark could not be determined.
            </returns>
            <remarks>
                <para>
                    The <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> is used to determine the trademark of an assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="assembly" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Reflection.DelegateExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Delegate" /> type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Reflection.DelegateExtensions.GetFullMethodName(System.Delegate)">
            <summary>
                Gets the full name of a delegates method.
            </summary>
            <param name="del"> The delegate. </param>
            <returns>
                The full name of the delegated method.
            </returns>
            <remarks>
                <para>
                    The full name of a delegates method includes the namespace, type, and member, but not the assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="del" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.DelegateExtensions.GetFullName(System.Delegate)">
            <summary>
                Gets the full name of a delegates target and method.
            </summary>
            <param name="del"> The delegate. </param>
            <returns>
                The full name of the delegates target and method.
            </returns>
            <remarks>
                <para>
                    The full name of a delegates target and method consists of the target name, including namespace and type but not the assembly, followed by a &quot;@&quot;, followed by the method name. including namespace, type, and method but not the assembly.
                    For static methods, only the method name, without &quot;@&quot; or a target name, is returned.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="del" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.DelegateExtensions.GetFullTargetName(System.Delegate)">
            <summary>
                Gets the full name of a delegates target.
            </summary>
            <param name="del"> The delegate. </param>
            <returns>
                The full name of the delegated target or null if no target is specified (e.g. for static methods).
            </returns>
            <remarks>
                <para>
                    The full name of a delegates target includes the namespace, type, and member, but not the assembly.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="del" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.DelegateExtensions.IsStatic(System.Delegate)">
            <summary>
                Checks whether a delegate has a static target.
            </summary>
            <param name="del"> The delegate. </param>
            <returns>
                true if the delegate is using a static method and has no target, fale otherwise.
            </returns>
        </member>
        <member name="T:RI.Utilities.Reflection.DelegateUtility">
            <summary>
                Provides a utility for delegate types.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Reflection.DelegateUtility.CreateFromFullMethodName(System.Type,System.String)">
            <summary>
                Creates a delegate of a specified type from the given full method name.
            </summary>
            <param name="delegateType"> The type of the delegate to create. </param>
            <param name="fullMethodName"> The full method name. </param>
            <returns>
                The created delegate.
            </returns>
            <remarks>
                <para>
                    <see cref="M:RI.Utilities.Reflection.DelegateUtility.CreateFromFullMethodName(System.Type,System.String)" /> can be used to create a delegate pointing to a static method as returned by <see cref="M:RI.Utilities.Reflection.DelegateExtensions.GetFullMethodName(System.Delegate)" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="delegateType" /> or <paramref name="fullMethodName" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="fullMethodName" /> is an empty string. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="fullMethodName" /> is an invalid full method name. </exception>
            <exception cref="T:System.TypeLoadException"> The type and/or method specified by <paramref name="fullMethodName" /> cannot be resolved. </exception>
        </member>
        <member name="T:RI.Utilities.Reflection.MethodCallDispatcher">
            <summary>
                Provides a utility which allows dynamic dispatching of method calls based on a parameters type.
            </summary>
            <remarks>
                <para>
                    Method call dispatching is the dynamic forwarding of a method call based on the name of methods (including overloads) and the type of the first method parameter.
                </para>
                <para>
                    A <see cref="T:RI.Utilities.Reflection.MethodCallDispatcher" /> can be created either for an object or a type.
                    If an object is used, the method calls are forwarded to the instance methods of that object.
                    If a type is used, the method calls are forwarded to the static methods of the type.
                </para>
                <para>
                    First, an instance of <see cref="T:RI.Utilities.Reflection.MethodCallDispatcher" /> is created using <see cref="M:RI.Utilities.Reflection.MethodCallDispatcher.FromTarget(System.Object,System.String)" /> or <see cref="M:RI.Utilities.Reflection.MethodCallDispatcher.FromType(System.Type,System.String)" />.
                    Afterwards, calls to the methods or the overloads respectively, as specified by the methods name, can be dispatched.
                    This is done by checking which method overload (if any) has a first parameter which matches the dispatched parameters type.
                    That method is then called.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Add support for multiple parameters (requires utility to find best matching types based on type enumerables)
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.FromTarget(System.Object,System.String)">
            <summary>
                Creates a method call dispatcher for a specified object.
            </summary>
            <param name="target"> The object. </param>
            <param name="methodName"> The name of the methods the calls are dispatched to. </param>
            <returns>
                A new instance of <see cref="T:RI.Utilities.Reflection.MethodCallDispatcher" />.
            </returns>
            <remarks>
                <para>
                    Only instance methods are considered for dispatching when using an object instead of a type.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="target" /> or <paramref name="methodName" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="methodName" /> is an empty string. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.FromType(System.Type,System.String)">
            <summary>
                Creates a method call dispatcher for a specified type.
            </summary>
            <param name="type"> The type. </param>
            <param name="methodName"> The name of the methods the calls are dispatched to. </param>
            <returns>
                A new instance of <see cref="T:RI.Utilities.Reflection.MethodCallDispatcher" />.
            </returns>
            <remarks>
                <para>
                    Only static methods are considered for dispatching when using a type instead of an object.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> or <paramref name="methodName" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="methodName" /> is an empty string. </exception>
        </member>
        <member name="P:RI.Utilities.Reflection.MethodCallDispatcher.MethodName">
            <summary>
                Gets the name of the methods the calls are dispatched to.
            </summary>
            <value>
                The name of the methods the calls are dispatched to.
            </value>
        </member>
        <member name="P:RI.Utilities.Reflection.MethodCallDispatcher.Target">
            <summary>
                Gets the object to which the method calls are dispatched.
            </summary>
            <value>
                The object to which the method calls are dispatched or null if the calls are dispatched to a type instead of an object.
            </value>
        </member>
        <member name="P:RI.Utilities.Reflection.MethodCallDispatcher.Type">
            <summary>
                Gets the type to which the method calls are dispatched.
            </summary>
            <value>
                The type to which the method calls are dispatched.
            </value>
            <remarks>
                <para>
                    <see cref="P:RI.Utilities.Reflection.MethodCallDispatcher.Type" /> always returns a type, even if the method calls are dispatched to an object.
                    In such cases, <see cref="P:RI.Utilities.Reflection.MethodCallDispatcher.Type" /> returns the type of <see cref="P:RI.Utilities.Reflection.MethodCallDispatcher.Target" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.CanDispatchParameter(System.Object)">
            <summary>
                Checks whether a method call can be dispatched based on the parameter object.
            </summary>
            <param name="parameter"> The parameter object. </param>
            <returns>
                true if the type of <paramref name="parameter" /> can be dispatched, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="parameter" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.CanDispatchType(System.Type)">
            <summary>
                Checks whether a method call can be dispatched based on the parameter type.
            </summary>
            <param name="type"> The parameter type. </param>
            <returns>
                true if <paramref name="type" /> can be dispatched, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.Dispatch(System.Object)">
            <summary>
                Dispatches a method call.
            </summary>
            <param name="parameter"> The parameter of the dispatched method call. </param>
            <returns>
                The return value of the called method.
            </returns>
            <remarks>
                <para>
                    <paramref name="parameter" /> is forwarded to the first parameter of the method.
                    Additional parameters are not resolved and get their types default value.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="parameter" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.Dispatch(System.Object,RI.Utilities.ComponentModel.IDependencyResolver)">
            <summary>
                Dispatches a method call.
            </summary>
            <param name="parameter"> The parameter of the dispatched method call. </param>
            <param name="parameterResolver"> The dependency resolver used to resolve additional parameters after the first. </param>
            <returns>
                The return value of the called method.
            </returns>
            <remarks>
                <para>
                    <paramref name="parameter" /> is forwarded to the first parameter of the method.
                    Additional parameters are resolved using <paramref name="parameterResolver" /> (first using the parameters type, then, if unsuccessful, using the parameters name).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="parameter" /> or <paramref name="parameterResolver" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.Dispatch(System.Object,System.Func{System.String,System.Type,System.Object})">
            <summary>
                Dispatches a method call.
            </summary>
            <param name="parameter"> The parameter of the dispatched method call. </param>
            <param name="parameterResolver"> The function used to resolve additional parameters after the first. </param>
            <returns>
                The return value of the called method.
            </returns>
            <remarks>
                <para>
                    <paramref name="parameter" /> is forwarded to the first parameter of the method.
                    Additional parameters are resolved using <paramref name="parameterResolver" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="parameter" /> or <paramref name="parameterResolver" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.Dispatch(System.Object,System.Object@)">
            <summary>
                Dispatches a method call.
            </summary>
            <param name="parameter"> The parameter of the dispatched method call. </param>
            <param name="returnValue"> Receives the return value of the called method. </param>
            <returns>
                true if the method call could be dispatched, false otherwise.
            </returns>
            <remarks>
                <para>
                    <paramref name="parameter" /> is forwarded to the first parameter of the method.
                    Additional parameters are not resolved and get their types default value.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="parameter" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.Dispatch(System.Object,System.Object@,RI.Utilities.ComponentModel.IDependencyResolver)">
            <summary>
                Dispatches a method call.
            </summary>
            <param name="parameter"> The parameter of the dispatched method call. </param>
            <param name="returnValue"> Receives the return value of the called method. </param>
            <param name="parameterResolver"> The dependency resolver used to resolve additional parameters after the first. </param>
            <returns>
                true if the method call could be dispatched, false otherwise.
            </returns>
            <remarks>
                <para>
                    <paramref name="parameter" /> is forwarded to the first parameter of the method.
                    Additional parameters are resolved using <paramref name="parameterResolver" /> (first using the parameters type, then, if unsuccessful, using the parameters name).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="parameter" /> or <paramref name="parameterResolver" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.MethodCallDispatcher.Dispatch(System.Object,System.Object@,System.Func{System.String,System.Type,System.Object})">
            <summary>
                Dispatches a method call.
            </summary>
            <param name="parameter"> The parameter of the dispatched method call. </param>
            <param name="returnValue"> Receives the return value of the called method. </param>
            <param name="parameterResolver"> The function used to resolve additional parameters after the first. </param>
            <returns>
                true if the method call could be dispatched, false otherwise.
            </returns>
            <remarks>
                <para>
                    <paramref name="parameter" /> is forwarded to the first parameter of the method.
                    Additional parameters are resolved using <paramref name="parameterResolver" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="parameter" /> or <paramref name="parameterResolver" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Reflection.TypeExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Type" /> type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Reflection.TypeExtensions.GetBestMatchingType(System.Type,System.Type@,System.Int32@,System.Type[])">
            <summary>
                Determines the best matching type from a list of candidates.
            </summary>
            <param name="type"> The type for which the best matching type from <paramref name="types" /> is to be determined. </param>
            <param name="matchingType"> The type from <paramref name="types" /> which matches <paramref name="type" /> best. null if no matching type is found. </param>
            <param name="inheritanceDepth"> The depth of inheritance from <paramref name="type" /> to <paramref name="matchingType" />. -1 if no matching type is found. </param>
            <param name="types"> The list of candidates. </param>
            <returns>
                true if a matching type was found, false otherwise.
            </returns>
            <remarks>
                <para>
                    This method determines the best match for <paramref name="type" /> from <paramref name="types" />.
                    The best match is the one which has the lowest inheritance depth (<paramref name="inheritanceDepth" />) by appearing in the inheritance list of <paramref name="type" />.
                    Or in other words, the type which is closest to <paramref name="type" /> in the inheritance list of <paramref name="type" /> is choosen.
                </para>
                <para>
                    <paramref name="inheritanceDepth" /> is zero if <paramref name="type" /> and <paramref name="matchingType" /> are the same (which is, for example, if <paramref name="type" /> also appears in <paramref name="types" />).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.TypeExtensions.GetDefaultValue(System.Type)">
            <summary>
                Gets the default value of a type.
            </summary>
            <param name="type"> The type. </param>
            <returns>
                The default value of the type.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.TypeExtensions.GetInheritance(System.Type,System.Boolean)">
            <summary>
                Gets all types the specified type inherits from.
            </summary>
            <param name="type"> The type of which the inheritance list should be returned. </param>
            <param name="includeSelf"> Specifies whether <paramref name="type" /> is also included in the returned inheritance list. </param>
            <returns>
                The list with all types <paramref name="type" /> inherits from.
                The list is empty if the type is <see cref="T:System.Object" /> and <paramref name="includeSelf" /> is false.
                The list starts with the root type of the inheritance, which is always <see cref="T:System.Object" />.
            </returns>
            <remarks>
                <note type="note">
                    The returned inheritance list does only contain base classes but not interfaces.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.TypeExtensions.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Determines whether a type is assignable to a generic type.
            </summary>
            <param name="type">The type to check whether it can be assigned to a generic type.</param>
            <param name="genericType">The generic type.</param>
            <returns>true if <paramref name="type"/> can be assigned to <paramref name="genericType"/>, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> or <paramref name="genericType"/> is null. </exception>
            <exception cref="T:System.ArgumentException"> <paramref name="genericType"/> is not a generic type. </exception>
        </member>
        <member name="M:RI.Utilities.Reflection.TypeExtensions.IsNullable(System.Type)">
            <summary>
                Gets whether a type is a nullable type.
            </summary>
            <param name="type"> The type. </param>
            <returns>
                true if the type is nullable, using <see cref="T:System.Nullable`1" />, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="type" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Reflection.TypeUtility">
            <summary>
                Provides a utility for types.
            </summary>
            <threadsafety static="false" instance="false" />
            TODO: Create ObjectSynchronizer
        </member>
        <member name="M:RI.Utilities.Reflection.TypeUtility.FindTypeInAppDomain(System.String,System.Func{System.String,System.Type,System.Boolean})">
            <summary>
                Tries to find the type in all assemblies of the current application domain.
            </summary>
            <param name="typeToFind"> The name of the type to find. </param>
            <param name="predicate"> The optional predicate to detect the desired type or null if the default detection should be used. </param>
            <returns>
                The found type or null if the type was not found.
            </returns>
            <remarks>
                <para>
                    The default detection, if <paramref name="predicate" /> is null, is to compare <see cref="P:System.Reflection.MemberInfo.Name" /> case-sensitive with <paramref name="typeToFind" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="typeToFind" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="typeToFind" /> is an empty string. </exception>
        </member>
        <member name="T:RI.Utilities.Reflection.NamespaceDoc">
            <summary>
                Contains reflection utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.Streams.BinaryStream">
            <summary>
                Implements a stream which wraps either a <see cref="T:System.IO.BinaryReader" /> or a <see cref="T:System.IO.BinaryWriter" />.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Streams.BinaryStream" /> is used when a <see cref="T:System.IO.BinaryReader" /> or <see cref="T:System.IO.BinaryWriter" /> needs to be used as a stream.
                </para>
                <para>
                    A <see cref="T:RI.Utilities.Streams.BinaryStream" /> can either support reading (using a <see cref="T:System.IO.BinaryReader" />) or writing (using a <see cref="T:System.IO.BinaryWriter" />) but not both at the same time.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Create pendant: TextStream (wrapping a StreamReader or StreamWriter using a specified Encoding)
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.#ctor(System.IO.BinaryReader,System.Boolean)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.BinaryStream" />.
            </summary>
            <param name="reader"> The <see cref="T:System.IO.BinaryReader" /> to use. </param>
            <param name="doNotOwnReader"> Specifies whether the wrapped reader should be closed when this stream is closed (false) or kept open (true). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.#ctor(System.IO.BinaryReader)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.BinaryStream" />.
            </summary>
            <param name="reader"> The <see cref="T:System.IO.BinaryReader" /> to use. </param>
            <remarks>
                <para>
                    The wrapped reader is closed if this stream is closed.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.#ctor(System.IO.BinaryWriter,System.Boolean)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.BinaryStream" />.
            </summary>
            <param name="writer"> The <see cref="T:System.IO.BinaryWriter" /> to use. </param>
            <param name="doNotOwnWriter"> Specifies whether the wrapped writer should be closed when this stream is closed (false) or kept open (true). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.#ctor(System.IO.BinaryWriter)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.BinaryStream" />.
            </summary>
            <param name="writer"> The <see cref="T:System.IO.BinaryWriter" /> to use. </param>
            <remarks>
                <para>
                    The wrapped writer is closed if this stream is closed.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.#ctor(System.IO.BinaryReader,System.IO.BinaryWriter,System.Boolean)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.BinaryStream" />.
            </summary>
            <param name="reader"> The <see cref="T:System.IO.BinaryReader" /> to use. </param>
            <param name="writer"> The <see cref="T:System.IO.BinaryWriter" /> to use. </param>
            <param name="doNotOwnWrapped"> Specifies whether the wrapped reader and writer should be closed when this stream is closed (false) or kept open (true). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.#ctor(System.IO.BinaryReader,System.IO.BinaryWriter)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.BinaryStream" />.
            </summary>
            <param name="reader"> The <see cref="T:System.IO.BinaryReader" /> to use. </param>
            <param name="writer"> The <see cref="T:System.IO.BinaryWriter" /> to use. </param>
            <remarks>
                <para>
                    The wrapped reader and writer is closed if this stream is closed.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Streams.BinaryStream" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.Reader">
            <summary>
                Gets the used <see cref="T:System.IO.BinaryReader" />, if any.
            </summary>
            <value>
                The used <see cref="T:System.IO.BinaryReader" /> or null if no <see cref="T:System.IO.BinaryReader" /> is used.
            </value>
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.Writer">
            <summary>
                Gets the used <see cref="T:System.IO.BinaryWriter" />, if any.
            </summary>
            <value>
                The used <see cref="T:System.IO.BinaryWriter" /> or null if no <see cref="T:System.IO.BinaryWriter" /> is used.
            </value>
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.Length">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.Position">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.BinaryStream.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.Close">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.WriteByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.BinaryStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Streams.LoopbackStream">
            <summary>
                Implements a stream where write operations are written to a queue and read operations read from that queue.
            </summary>
            <remarks>
                <para>
                    Bytes written using <see cref="M:RI.Utilities.Streams.LoopbackStream.Write(System.Byte[],System.Int32,System.Int32)" /> or <see cref="M:RI.Utilities.Streams.LoopbackStream.WriteByte(System.Byte)" /> are written to a queue.
                    When bytes are read using <see cref="M:RI.Utilities.Streams.LoopbackStream.Read(System.Byte[],System.Int32,System.Int32)" /> or <see cref="M:RI.Utilities.Streams.LoopbackStream.ReadByte" />, the bytes are read from that queue.
                    The queue is using first-in first-out (FIFO), meaning that bytes written first are read first.
                </para>
                <para>
                    <see cref="T:RI.Utilities.Streams.LoopbackStream" /> is thread-safe. One thread can write to the strem while another thread can read from the stream at the same time.
                    However, only one read and only one write operation can be performed at the same time.
                    Calling a read or write operation while another is already in progress, the call blocks.
                </para>
                <para>
                    Timeouts are supported.
                    When a <see cref="P:RI.Utilities.Streams.LoopbackStream.ReadTimeout" /> greater than zero is used, read operations will wait for the specified amount of time if the queue is empty.
                    <see cref="P:RI.Utilities.Streams.LoopbackStream.WriteTimeout" /> can be used but is ignored by <see cref="T:RI.Utilities.Streams.LoopbackStream" />.
                </para>
            </remarks>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.LoopbackStream" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Streams.LoopbackStream" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.IsDisposed">
            <summary>
                Gets whether the stream is closed/disposed.
            </summary>
            <value>
                true if the stream is closed/disposed, false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.IsDisposing">
            <summary>
                Gets whether the stream is currently being closed/disposed.
            </summary>
            <value>
                true if the stream is currently being closed/disposed or is already closed/disposed, false otherwise.
            </value>
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.Clear">
            <summary>
                Clears the queue.
            </summary>
            <exception cref="T:System.ObjectDisposedException"> This instance is closed/disposed. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.ToArray">
            <summary>
                Copies the current content of the queue to an array.
            </summary>
            <returns>
                The array with the current content of the queue.
                If the queue is empty, an empty array is returned.
            </returns>
            <remarks>
                <para>
                    The content of the queue is copied, the queue itself is not changed.
                </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException"> This instance is closed/disposed. </exception>
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.Length">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.Position">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.Close">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.WriteByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.LoopbackStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.LoopbackStream.SyncRoot">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Streams.ReadOnlyStream">
            <summary>
                Implements a stream which wraps another stream and only allows read operations on that stream.
            </summary>
            <threadsafety static="false" instance="false" />
            TODO: Create pendant: WriteOnlyStream
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.#ctor(System.IO.Stream)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.ReadOnlyStream" />.
            </summary>
            <param name="stream"> The stream to wrap. </param>
            <remarks>
                <para>
                    The wrapped stream is closed if this stream is closed.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.ReadOnlyStream" />.
            </summary>
            <param name="stream"> The stream to wrap. </param>
            <param name="doNotOwnStream"> Specifies whether the wrapped stream should be closed when this stream is closed (false) or kept open (true). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Streams.ReadOnlyStream" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Streams.ReadOnlyStream.BaseStream">
            <summary>
                Gets the wrapped stream.
            </summary>
            <value>
                The wrapped stream.
            </value>
        </member>
        <member name="P:RI.Utilities.Streams.ReadOnlyStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.ReadOnlyStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.ReadOnlyStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.ReadOnlyStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.ReadOnlyStream.Length">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.ReadOnlyStream.Position">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.ReadOnlyStream.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.ReadOnlyStream.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.Close">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.EndRead(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.EndWrite(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.WriteByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.ReadOnlyStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Streams.StreamExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.IO.Stream" /> type.
            </summary>
        </member>
        <member name="F:RI.Utilities.Streams.StreamExtensions.DefaultBufferSize">
            <summary>
                The default buffer size used for reading and writing.
            </summary>
            <remarks>
                <para>
                    The default buffer size is 4096 bytes.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Read(System.IO.Stream,System.IO.Stream)">
            <summary>
                Reads from one stream into another.
            </summary>
            <param name="source"> The source stream. </param>
            <param name="target"> The target stream. </param>
            <returns>
                The number of bytes read.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> or <paramref name="target" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="source" /> is a stream which cannot be read. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="target" /> is a stream which cannot be written. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Read(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
                Reads from one stream into another.
            </summary>
            <param name="source"> The source stream. </param>
            <param name="target"> The target stream. </param>
            <param name="length"> The number of bytes to read or -1 to read all bytes. </param>
            <returns>
                The number of bytes read.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> or <paramref name="target" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="source" /> is a stream which cannot be read. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="target" /> is a stream which cannot be written. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Read(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
                Reads from one stream into another.
            </summary>
            <param name="source"> The source stream. </param>
            <param name="target"> The target stream. </param>
            <param name="length"> The number of bytes to read or -1 to read all bytes. </param>
            <param name="bufferSize"> The buffer size used for reading or -1 to use the default buffer size. </param>
            <returns>
                The number of bytes read.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> or <paramref name="target" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero or <paramref name="bufferSize" /> is less than or equal to zero. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="source" /> is a stream which cannot be read. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="target" /> is a stream which cannot be written. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Read(System.IO.Stream,System.Byte[])">
            <summary>
                Reads a byte array from a stream.
            </summary>
            <param name="source"> The stream. </param>
            <param name="data"> The byte array. </param>
            <returns>
                The number of bytes read into the byte array, starting at index zero.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.NotSupportedException"> <paramref name="source" /> does not support reading. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Read(System.IO.Stream)">
            <summary>
                Reads a stream into a byte array.
            </summary>
            <param name="source"> The stream. </param>
            <returns>
                The byte array containing all bytes of the stream.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="source" /> is a stream which cannot be read. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Read(System.IO.Stream,System.Int32)">
            <summary>
                Reads a stream into a byte array.
            </summary>
            <param name="source"> The stream. </param>
            <param name="length"> The number of bytes to read or -1 to read all bytes. </param>
            <returns>
                The byte array containing all bytes of the stream.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="source" /> is a stream which cannot be read. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Read(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
                Reads a stream into a byte array.
            </summary>
            <param name="source"> The stream. </param>
            <param name="length"> The number of bytes to read or -1 to read all bytes. </param>
            <param name="bufferSize"> The buffer size used for reading or -1 to use the default buffer size. </param>
            <returns>
                The byte array containing all bytes of the stream.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="source" /> is a stream which cannot be read. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero or <paramref name="bufferSize" /> is less than or equal to zero. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.TruncateAtEnd(System.IO.Stream,System.Int32)">
            <summary>
                Removes a specified amount of bytes from the end of a stream.
            </summary>
            <param name="stream"> The stream. </param>
            <param name="length"> The number of bytes to remove. </param>
            <remarks>
                <para>
                    The streams position remains unchanged, except in cases the position is within the removed range where the position will be set to the end of the stream.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero or more than the length of <paramref name="stream" />. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="stream" /> is a stream which cannot be read. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="stream" /> is a stream which cannot be written. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotSeekableStreamArgumentException"> <paramref name="stream" /> is a stream which cannot be seeked. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.TruncateAtStart(System.IO.Stream,System.Int32)">
            <summary>
                Removes a specified amount of bytes from the start of a stream.
            </summary>
            <param name="stream"> The stream. </param>
            <param name="length"> The number of bytes to remove. </param>
            <remarks>
                <para>
                    The streams position remains unchanged, except in cases the position is within the removed range where the position will be set to the start of the stream.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero or more than the length of <paramref name="stream" />. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="stream" /> is a stream which cannot be read. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="stream" /> is a stream which cannot be written. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotSeekableStreamArgumentException"> <paramref name="stream" /> is a stream which cannot be seeked. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Write(System.IO.Stream,System.Byte[])">
            <summary>
                Writes a byte array to a stream.
            </summary>
            <param name="target"> The stream. </param>
            <param name="data"> The byte array. </param>
            <returns>
                The number of bytes written.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="target" /> or <paramref name="data" /> is null. </exception>
            <exception cref="T:System.NotSupportedException"> <paramref name="target" /> does not support writing. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Write(System.IO.Stream,System.IO.Stream)">
            <summary>
                Writes from one stream into another.
            </summary>
            <param name="source"> The source stream. </param>
            <param name="target"> The target stream. </param>
            <returns>
                The number of bytes written.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> or <paramref name="target" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="source" /> is a stream which cannot be read. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="target" /> is a stream which cannot be written. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Write(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
                Writes from one stream into another.
            </summary>
            <param name="source"> The source stream. </param>
            <param name="target"> The target stream. </param>
            <param name="length"> The number of bytes to read or -1 to read all bytes. </param>
            <returns>
                The number of bytes written.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> or <paramref name="target" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="source" /> is a stream which cannot be read. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="target" /> is a stream which cannot be written. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.StreamExtensions.Write(System.IO.Stream,System.IO.Stream,System.Int32,System.Int32)">
            <summary>
                Writes from one stream into another.
            </summary>
            <param name="source"> The source stream. </param>
            <param name="target"> The target stream. </param>
            <param name="length"> The number of bytes to read or -1 to read all bytes. </param>
            <param name="bufferSize"> The buffer size used for reading or -1 to use the default buffer size. </param>
            <returns>
                The number of bytes written.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="source" /> or <paramref name="target" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="length" /> is less than zero or <paramref name="bufferSize" /> is less than or equal to zero. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotReadableStreamArgumentException"> <paramref name="source" /> is a stream which cannot be read. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotWriteableStreamArgumentException"> <paramref name="target" /> is a stream which cannot be written. </exception>
        </member>
        <member name="T:RI.Utilities.Streams.SynchronizedStream">
            <summary>
                Implements a stream which wraps another stream and synchronizes access to it using a synchronization object.
            </summary>
            <remarks>
                <value>
                    <see cref="T:RI.Utilities.Streams.SynchronizedStream" /> can be used to synchronize access to a stream from multiple threads.
                </value>
                <note type="important">
                    Only the access to <see cref="T:System.IO.Stream" /> members are synchronized.
                    Repeated access (e.g. a <see cref="M:RI.Utilities.Streams.SynchronizedStream.Seek(System.Int64,System.IO.SeekOrigin)" /> followed by a <see cref="M:RI.Utilities.Streams.SynchronizedStream.Write(System.Byte[],System.Int32,System.Int32)" />), which rely on to be of atomic nature, must be synchronized on a higher level, by the users of <see cref="T:RI.Utilities.Streams.SynchronizedStream" />, using <see cref="P:RI.Utilities.Streams.SynchronizedStream.SyncRoot" />.
                </note>
            </remarks>
            <threadsafety static="true" instance="true" />
            TODO: Add constructor with doNotOwn parameter
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.#ctor(System.IO.Stream)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.SynchronizedStream" />.
            </summary>
            <param name="stream"> The stream to wrap. </param>
            <remarks>
                <para>
                    A new, dedicated synchronization object is created and used.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.#ctor(System.IO.Stream,System.Object)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.SynchronizedStream" />.
            </summary>
            <param name="stream"> The stream to wrap. </param>
            <param name="syncRoot"> The synchronization object to use. Can be null to create a new, dedicated synchronization object. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Streams.SynchronizedStream" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.BaseStream">
            <summary>
                Gets the wrapped stream.
            </summary>
            <value>
                The wrapped stream.
            </value>
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.Length">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.Position">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.Close">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.EndRead(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.EndWrite(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.WriteByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.SynchronizedStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.RI#Utilities#ObjectModel#ISynchronizable#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.SynchronizedStream.SyncRoot">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Streams.UncloseableStream">
            <summary>
                Implements a stream which wraps another stream and prevents the wrapped stream from being closed.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Streams.UncloseableStream" /> can be helpful in situations where you pass a stream to an object or method which, after it has done its job, closes the stream and you need the stream still open afterwards.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.#ctor(System.IO.Stream)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Streams.UncloseableStream" />.
            </summary>
            <param name="stream"> The stream to wrap. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="stream" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Streams.UncloseableStream" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.BaseStream">
            <summary>
                Gets the wrapped stream.
            </summary>
            <value>
                The wrapped stream.
            </value>
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.CloseIntercepted">
            <summary>
                Gets whether a close or dispose attempt has been intercepted by this <see cref="T:RI.Utilities.Streams.UncloseableStream" /> instance.
            </summary>
            <value>
                true if a close or dispose attempt has been intercepted by this <see cref="T:RI.Utilities.Streams.UncloseableStream" /> instance, false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.Length">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.Position">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Streams.UncloseableStream.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.Close">
            <summary>
                Intercepts any closing attempts to the wrapped stream.
            </summary>
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.EndRead(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.EndWrite(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.WriteByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Streams.UncloseableStream.Dispose(System.Boolean)">
            <summary>
                Intercepts any disposing attempts to the wrapped stream.
            </summary>
            <param name="disposing"> true to release both managed and unmanaged resources, false to release only unmanaged resources. </param>
        </member>
        <member name="T:RI.Utilities.Streams.NamespaceDoc">
            <summary>
                Contains new stream implementations and stream utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.Text.AlphanumComparer">
            <summary>
                Implements a comparer which uses natural alphanumeric string sorting.
            </summary>
            <remarks>
                <para>
                    Natural alphanumeric sorting is a more sophisticated string sorting algorithm which respects the natural way humans look at strings, especially if they contain numbers.
                </para>
                <para>
                    The following list of strings is used as an example: Test100xyz, Test200abc, Test99abc.
                    Traditional sorting would sort this list as shown, putting Test99abc at the end (because the first four characters are the same and then 9 is greater than 2).
                    With natural alphanumeric sorting, the list is sorted as: Test99abc, Test100xyz, Test200abc (because the algorithm builds chunks and compares those instead of character-by-character).
                </para>
                <para>
                    Because this kind of sorting depends on the used culture, the used culture must be specified.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.CurrentCulture">
            <summary>
                Creates a natural alphanumeric comparer for the current thread culture (case matters; strings are not trimmed before comparison; only pure numbers).
            </summary>
            <returns>
                The comparer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.CurrentCultureIgnoreCase">
            <summary>
                Creates a natural alphanumeric comparer for the current thread culture (case is ignored; strings are not trimmed before comparison; only pure numbers).
            </summary>
            <returns>
                The comparer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.InvariantCulture">
            <summary>
                Creates a natural alphanumeric comparer for the invariant culture (case matters; strings are not trimmed before comparison; only pure numbers).
            </summary>
            <returns>
                The comparer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.InvariantCultureIgnoreCase">
            <summary>
                Creates a natural alphanumeric comparer for the invariant culture (case is ignored; strings are not trimmed before comparison; only pure numbers).
            </summary>
            <returns>
                The comparer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.TrimmedCurrentCulture">
            <summary>
                Creates a natural alphanumeric comparer for the current thread culture (case matters; strings are trimmed before comparison; only pure numbers).
            </summary>
            <returns>
                The comparer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.TrimmedCurrentCultureIgnoreCase">
            <summary>
                Creates a natural alphanumeric comparer for the current thread culture (case is ignored; strings are trimmed before comparison; only pure numbers).
            </summary>
            <returns>
                The comparer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.TrimmedInvariantCulture">
            <summary>
                Creates a natural alphanumeric comparer for the invariant culture (case matters; strings are trimmed before comparison; only pure numbers).
            </summary>
            <returns>
                The comparer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.TrimmedInvariantCultureIgnoreCase">
            <summary>
                Creates a natural alphanumeric comparer for the invariant culture (case is ignored; strings are trimmed before comparison; only pure numbers).
            </summary>
            <returns>
                The comparer.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.#ctor(System.Globalization.CultureInfo,RI.Utilities.Text.AlphanumComparerFlags)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Text.AlphanumComparer" />.
            </summary>
            <param name="culture"> The used culture. </param>
            <param name="options"> The used comparison options. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="culture" /> is null. </exception>
        </member>
        <member name="P:RI.Utilities.Text.AlphanumComparer.Culture">
            <summary>
                Gets the used culture.
            </summary>
            <value>
                The used culture.
            </value>
        </member>
        <member name="P:RI.Utilities.Text.AlphanumComparer.IgnoreCase">
            <summary>
                Gets whether comparison is performed case-insensitive.
            </summary>
            <value>
                true if the case is ignored, false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.Text.AlphanumComparer.Options">
            <summary>
                Gets the used comparison options.
            </summary>
            <value>
                The used comparison options.
            </value>
        </member>
        <member name="P:RI.Utilities.Text.AlphanumComparer.Trimmed">
            <summary>
                Gets whether comparison is performed trimmed.
            </summary>
            <value>
                true if the values are trimmed of whitespaces before being compared.
            </value>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.System#ICloneable#Clone">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <inheritdoc />
            <exception cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="x" /> or <paramref name="y" /> is not null and not of type <see cref="T:System.String" />. </exception>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.Compare(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <inheritdoc />
            <exception cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="x" /> or <paramref name="y" /> is not null and not of type <see cref="T:System.String" />. </exception>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <inheritdoc />
            <exception cref="T:RI.Utilities.Exceptions.InvalidTypeArgumentException"> <paramref name="obj" /> is not null and not of type <see cref="T:System.String" />. </exception>
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.Equals(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.AlphanumComparer.GetHashCode(System.String)">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Text.AlphanumComparerFlags">
            <summary>
                Specifies options for string comparison using <see cref="T:RI.Utilities.Text.AlphanumComparer" />
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.AlphanumComparerFlags.IgnoreCase">
            <summary>
                The case of strings and their compared chunks is ignored.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.AlphanumComparerFlags.Trimmed">
            <summary>
                Strings and their compared chunks are trimmed of any whitespace before being compared.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.AlphanumComparerFlags.NumberDecimalSeparator">
            <summary>
                Recognizes the culture-specific decimal separator as part of a number.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.AlphanumComparerFlags.PositiveSign">
            <summary>
                Recognizes the culture-specific positive sign as part of a number.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.AlphanumComparerFlags.NegativeSign">
            <summary>
                Recognizes the culture-specific negative sign as part of a number.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.AlphanumComparerFlags.NumberGroupSeparator">
            <summary>
                Recognizes the culture-specific number group separator as part of a number.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.AlphanumComparerFlags.PureNumbers">
            <summary>
                Only recognizes pure numbers (that is: digits without any of these: decimal separator, positive sign, negative sign, or number group separator).
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.AlphanumComparerFlags.SignedNumbers">
            <summary>
                Recognizes positive or negative integers (that is: digits with optional positive sign or negative sign but without any of these: decimal separator, number group separator).
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.AlphanumComparerFlags.DecimalNumbers">
            <summary>
                Recognizes positive or negative decimals (that is: digits with optional positive sign, negative and/or decimal separator sign but without number group separator).
            </summary>
        </member>
        <member name="T:RI.Utilities.Text.CommandLine">
            <summary>
                Used to parse and/or build command line strings including executable, parameters, and/or literals.
            </summary>
            <remarks>
                <para>
                    A command line consists of the following: <c> [executable] [parameter 1 [parameter 2] ... [parameter n]] [literal 1 [literal 2] ... [literal n]]. </c>
                </para>
                <para>
                    Example 1: <c> myprogram.exe -name1=value1 literal1 literal2 </c>
                </para>
                <para>
                    Example 2: <c> &quot;d:\my folder\my program.exe&quot; -name1=&quot;Some value with whitespace and \&quot;quotes\&quot;&quot; SomeLiteral &quot;Another literal&quot; </c>
                </para>
                <para>
                    A command line can have:
                    Zero or one executable.
                    Zero, one, or multiple parameters.
                    Zero, one, or multiple literals.
                </para>
                <para>
                    If an executable is used, it is always at the beginning of the command line.
                    An executable supports whitespaces when wrapped in quotes.
                </para>
                <para>
                    Parameters are always name/value pairs which start with a minus sign and which separates the name and the value with an equal sign.
                    A parameter name and value supports whitespaces and quotes when wrapped in quotes, where the quotes need to be escaped.
                    Note that parameters can also consist of only the name, e.g. <c> -name </c>, without the equal sign or any value.
                </para>
                <para>
                    Literals are just a list of strings (e.g. a list of files).
                    A literal supports whitespaces and quotes when wrapped in quotes, where the quotes need to be escaped.
                </para>
                <para>
                    When parsing command lines, the order of parameters and literals does not matter, they can be mixed as needed.
                </para>
            </remarks>
            <threadsafety static="false" instance="false" />
            TODO: Implement IEquatable
            TODO: Implement IComparable
            TODO: Implement IFormattable
            TODO: Make serializable
        </member>
        <member name="F:RI.Utilities.Text.CommandLine.DefaultParameterNameComparer">
            <summary>
                The default string comparer used to distinguish parameter names.
            </summary>
            <remarks>
                <para>
                    The default comparer is <see cref="P:System.StringComparer.InvariantCultureIgnoreCase" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.FromCurrentProcess">
            <summary>
                Parses the command line of the current process.
            </summary>
            <returns>
                The <see cref="T:RI.Utilities.Text.CommandLine" /> created by parsing the command line of the current process.
            </returns>
            <remarks>
                <para>
                    <see cref="F:RI.Utilities.Text.CommandLine.DefaultParameterNameComparer" /> is used to distinguish parameter names.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.FromCurrentProcess(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                Parses the command line of the current process.
            </summary>
            <param name="parameterNameComparer"> A string comparer used to distinguish parameter names (can be null to use <see cref="F:RI.Utilities.Text.CommandLine.DefaultParameterNameComparer" />). </param>
            <returns>
                The <see cref="T:RI.Utilities.Text.CommandLine" /> created by parsing the command line of the current process.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.Parse(System.String,System.Boolean)">
            <summary>
                Parses a command line string and returns a <see cref="T:RI.Utilities.Text.CommandLine" /> object for it.
            </summary>
            <param name="commandLine"> The command line string to parse. </param>
            <param name="startsWithExecutable"> Indicates whether the command line string starts with an executable. </param>
            <returns>
                The <see cref="T:RI.Utilities.Text.CommandLine" /> created by parsing the command line string.
            </returns>
            <remarks>
                <para>
                    No deep error checking is performed on the parsed command line string so any string can be parsed and is considered a valid command line.
                    Invalid command lines will result in strange content of the <see cref="T:RI.Utilities.Text.CommandLine" />.
                </para>
                <para>
                    Because an executable cannot be distinguished from a literal, it must be specified whether the command line string starts with an executable.
                    For example, on Windows, a full process command line (e.g. as retrieved using <see cref="P:System.Environment.CommandLine" />) usually starts with the executable of the process.
                </para>
                <para>
                    <see cref="F:RI.Utilities.Text.CommandLine.DefaultParameterNameComparer" /> is used to distinguish parameter names.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="commandLine" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.Parse(System.String,System.Boolean,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                Parses a command line string and returns a <see cref="T:RI.Utilities.Text.CommandLine" /> object for it.
            </summary>
            <param name="commandLine"> The command line string to parse. </param>
            <param name="startsWithExecutable"> Indicates whether the command line string starts with an executable. </param>
            <param name="parameterNameComparer"> A string comparer used to distinguish parameter names (can be null to use <see cref="F:RI.Utilities.Text.CommandLine.DefaultParameterNameComparer" />). </param>
            <returns>
                The <see cref="T:RI.Utilities.Text.CommandLine" /> created by parsing the command line string.
            </returns>
            <remarks>
                <para>
                    No deep error checking is performed on the parsed command line string so any string can be parsed and is considered a valid command line.
                    Invalid command lines will result in strange content of the <see cref="T:RI.Utilities.Text.CommandLine" />.
                </para>
                <para>
                    Because an executable cannot be distinguished from a literal, it must be specified whether the command line string starts with an executable.
                    For example, on Windows, a full process command line (e.g. as retrieved using <see cref="P:System.Environment.CommandLine" />) usually starts with the executable of the process.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="commandLine" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Text.CommandLine" />.
            </summary>
            <remarks>
                <para>
                    <see cref="T:System.StringComparer" />.<see cref="P:System.StringComparer.InvariantCultureIgnoreCase" /> is used to distinguish parameter names.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Text.CommandLine" />.
            </summary>
            <param name="parameterNameComparer"> A string comparer used to distinguish parameter names or null if the default string comparer should be used (see <see cref="M:RI.Utilities.Text.CommandLine.#ctor" />). </param>
        </member>
        <member name="P:RI.Utilities.Text.CommandLine.Executable">
            <summary>
                Gets or sets the executable of the command line.
            </summary>
            <value>
                The executable of the command line.
            </value>
        </member>
        <member name="P:RI.Utilities.Text.CommandLine.Literals">
            <summary>
                Gets the list of literals of the command line.
            </summary>
            <value>
                The list of literals of the command line.
            </value>
        </member>
        <member name="P:RI.Utilities.Text.CommandLine.ParameterNameComparer">
            <summary>
                Gets the used string comparer used to distinguish parameter names.
            </summary>
            <value>
                The used string comparer used to distinguish parameter names.
            </value>
        </member>
        <member name="P:RI.Utilities.Text.CommandLine.Parameters">
            <summary>
                Gets the dictionary of parameters of the command line.
            </summary>
            <value>
                The dictionary of parameters of the command line.
            </value>
            <remarks>
                The dictionary keys are the parameter names.
                The dictionary values are lists of parameter values for the associated parameter name.
                Therefore, a parameter name can have multiple parameter values.
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.Build">
            <summary>
                Builds the command line string corresponding to the data of this command line.
            </summary>
            <returns>
                The built command line string.
            </returns>
            <remarks>
                <para>
                    If this command line is &quot;empty&quot; (means: contains no executable, parameters, or literals), the resulting command line string is an empty string of zero length.
                </para>
                <para>
                    If an executable is used, it is placed at the beginning of the command line string.
                    The executable is wrapped in quotes if it contains any whitespaces.
                    If the executable is null, a string of zero length, or contains only whitespaces, the executable is omited.
                </para>
                <para>
                    Parameters are always added after the executable, before the literals.
                    Parameter names and values are wrapped in quotes if they are of zero length, contain any whitespaces, or contain quotes.
                    Parameter values which are null are omited.
                    If a parameter has no associated values (means: the corresponding list of values in the dictionary contains no values or only null), a single parameter of the corresponding name but without a value is created.
                </para>
                <para>
                    Literals are always added after the parameters.
                    Literals are wrapped in quotes if they are of zero length, contain any whitespaces, or contain quotes.
                    Literals which are null are omited.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.ToString">
            <summary>
                Converts this instance of <see cref="T:RI.Utilities.Text.CommandLine" /> into a string.
            </summary>
            <returns>
                The string representation of this <see cref="T:RI.Utilities.Text.CommandLine" /> (same as returned by <see cref="M:RI.Utilities.Text.CommandLine.Build" />).
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.Clone">
            <summary>
                Creates a clone of this command line.
            </summary>
            <returns>
                The clone of this command line.
            </returns>
            <remarks>
                <para>
                    The clone will be a full clone of the executable (if available) and all parameters and literals.
                    The resulting clones parameter dictionary and literal list are new instances.
                </para>
                <para>
                    The <see cref="P:RI.Utilities.Text.CommandLine.ParameterNameComparer" /> of the cloned command line is also cloned if it implements <see cref="T:RI.Utilities.ObjectModel.ICloneable`1" /> or <see cref="T:System.ICloneable" />.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.CommandLine.System#ICloneable#Clone">
            <inheritdoc cref="M:RI.Utilities.Text.CommandLine.Clone" />
        </member>
        <member name="T:RI.Utilities.Text.IndentedTextWriter">
            <summary>
                A <see cref="T:System.IO.TextWriter" /> which encapsulates another <see cref="T:System.IO.TextWriter" /> so that it can be used with auto-indentation.
            </summary>
            <remarks>
                <para>
                    Auto-indentation means that each line written to the encapsulated <see cref="T:System.IO.TextWriter" /> starts with a defined indentation.
                </para>
                <note type="important">
                    <see cref="T:RI.Utilities.Text.IndentedTextWriter" /> only works reliable with new line strings of LF or CRLF (see <see cref="P:System.IO.TextWriter.NewLine" />).
                </note>
            </remarks>
            <threadsafety static="false" instance="false" />
            <example>
                <code language="cs">
             <![CDATA[
             // create a string builder to write into
             var sb = new StringBuilder();
             using(var sw = new StringWriter(sb))
             {
            		// create the indented text writer
            		using(var itw = new IndentedTextWriter(sb))
            		{
            			// lets use tabs for indentation
            			itw.IndentString = "\t";
             
            			// write some lines
            			itw.WriteLine("Line 1");
            			itw.IndentLevel++;
            			itw.WriteLine("Line 2");
            			itw.IndentLevel++;
            			itw.WriteLine("Line 3");
            			itw.IndentLevel--;
            			itw.WriteLine("Line 4");
            			itw.IndentLevel = 0;
            			itw.WriteLine("Line 5");
            		}
             }
             
             // get final string
             var text = sb.ToString();
             
             // result:
             // Line 1
             //     Line 2
             //         Line 3
             //     Line4
             // Line 5
             ]]>
             </code>
            </example>
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Text.IndentedTextWriter" />.
            </summary>
            <param name="writer"> The <see cref="T:System.IO.TextWriter" /> to encapsulate. </param>
            <param name="doNotOwnWriter"> Specifies whether the encapsulated <see cref="T:System.IO.TextWriter" /> is closed when this <see cref="T:RI.Utilities.Text.IndentedTextWriter" /> is closed (false) or not (true). </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Text.IndentedTextWriter" />.
            </summary>
            <param name="writer"> The <see cref="T:System.IO.TextWriter" /> to encapsulate. </param>
            <remarks>
                <para>
                    The encapsulated <see cref="T:System.IO.TextWriter" /> is closed when this <see cref="T:RI.Utilities.Text.IndentedTextWriter" /> is closed.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="writer" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Text.IndentedTextWriter" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Text.IndentedTextWriter.BaseWriter">
            <summary>
                Gets the <see cref="T:System.IO.TextWriter" /> which is encapsulated by this <see cref="T:RI.Utilities.Text.IndentedTextWriter" />.
            </summary>
            <value>
                The <see cref="T:System.IO.TextWriter" /> which is encapsulated by this <see cref="T:RI.Utilities.Text.IndentedTextWriter" />.
            </value>
        </member>
        <member name="P:RI.Utilities.Text.IndentedTextWriter.IndentEmptyLines">
            <summary>
                Gets or sets whether empty lines are indented or not.
            </summary>
            <value>
                true if empty lines are to be indented, false if not.
            </value>
            <remarks>
                <para>
                    Empty lines are either strings of zero length or which only contain whitespaces.
                </para>
                <para>
                    The default value is false.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Text.IndentedTextWriter.IndentLevel">
            <summary>
                Gets or sets the current indentation level.
            </summary>
            <value>
                The current indentation level.
            </value>
            <remarks>
                <para>
                    If a value less than zero is set as indentation level, zero is used instead.
                </para>
                <para>
                    The default value is zero.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Text.IndentedTextWriter.IndentString">
            <summary>
                Gets or sets the indentation string.
            </summary>
            <value>
                The indentation string.
            </value>
            <remarks>
                <para>
                    The indentation string is added to the start of each line x times, where x is <see cref="P:RI.Utilities.Text.IndentedTextWriter.IndentLevel" />.
                </para>
                <para>
                    If null is set as indentation string, <see cref="F:System.String.Empty" /> is used instead.
                </para>
                <para>
                    The default value is a single space character.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Text.IndentedTextWriter.Encoding">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Text.IndentedTextWriter.FormatProvider">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Text.IndentedTextWriter.NewLine">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Close">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Flush">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Write(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.WriteLine(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:RI.Utilities.Text.IndentedTextWriter.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Text.StringEscapeOptions">
            <summary>
                Describes options used for escaping/unescaping strings.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.Alert">
            <summary>
                <c> \a </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.Backspace">
            <summary>
                <c> \b </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.Formfeed">
            <summary>
                <c> \f </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.Newline">
            <summary>
                <c> \n </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.CarriageReturn">
            <summary>
                <c> \r </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.HorizontalTab">
            <summary>
                <c> \t </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.VerticalTap">
            <summary>
                <c> \v </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.Backslash">
            <summary>
                <c> \\ </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.SingleQuote">
            <summary>
                <c> \' </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.DoubleQuote">
            <summary>
                <c> \&quot; </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.QuestionMark">
            <summary>
                <c> \? </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.None">
            <summary>
                None.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.Default">
            <summary>
                All except <c> \? </c>.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.NonPrintable">
            <summary>
                All except <c> \? </c> and <c> ' </c> and <c> " </c>.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.All">
            <summary>
                All.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.Quote">
            <summary>
                <c> \' </c> and <c> \&quot; </c>
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.StringEscapeOptions.LineFeed">
            <summary>
                <c> \r </c> and <c> \n </c>
            </summary>
        </member>
        <member name="T:RI.Utilities.Text.StringExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.String" /> type.
            </summary>
            <remarks>
                <para>
                    Note that some of the functionality provided by this class is rather specialized and intended to be used for certain string parsing/processing purposes.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                Determines whether a specified string occurs in a string.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The string to find in the string. </param>
            <param name="comparisonType"> The string comparison used to find the string. </param>
            <returns>
                true if <paramref name="value" /> is an empty string or it occurs at least once in the string, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="value" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ContainsWhitespace(System.String)">
            <summary>
                Determines whether a specified string contains any whitespace characters.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                true if the string contains any whistespace characters, false otherwise.
                If the string has a length of zero, false is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.DoubleOccurrence(System.String,System.Char)">
            <summary>
                Doubles each occurence of a specified character in a string.
            </summary>
            <param name="str"> The string. </param>
            <param name="chr"> The character of which each occurence is doubled. </param>
            <returns>
                The resulting string with each specified character occurence doubled.
            </returns>
            <remarks>
                <para>
                    Doubling occurrences is done on a per-character basis and case-sensitive.
                </para>
                <para>
                    For example, when doubling the occurence for 'A', the string "" results in "", "A" in "AA", "AA" in "AAAA", "ABC" in "AABC", etc.
                </para>
                <para>
                    This is the same as using <see cref="M:RI.Utilities.Text.StringExtensions.ModifyOccurrence(System.String,System.Char,System.Double,System.Int32)" /> with a factor of 2.0 and offset of 0.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.EndsWithCount(System.String,System.Char,System.StringComparison)">
            <summary>
                Counts how many times a string ends with a specified character.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The character to count when occuring at the end of the string. </param>
            <param name="comparisonType"> The string comparison used to find the character. </param>
            <returns>
                The number of times the specified character appears in succession at the end of the string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.EndsWithCount(System.String,System.String,System.StringComparison)">
            <summary>
                Counts how many times a string ends with a specified string.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The string to count when occuring at the end of the string. </param>
            <param name="comparisonType"> The string comparison used to find the string. </param>
            <returns>
                The number of times the specified string appears in succession at the end of the string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="value" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="value" /> is a string with zero length. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Escape(System.String,RI.Utilities.Text.StringEscapeOptions)">
            <summary>
                Converts a string into another string where certain special characters are converted to escape sequences.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The conversion options. </param>
            <returns>
                The resulting string with special characters converted to escape sequences.
            </returns>
            <remarks>
                <para>
                    An escape sequence always starts with \ followed by a single character specifying the escape sequence, e.g. \n for new-line.
                </para>
                <para>
                    The following special characters are escaped: \a, \b, \f, \n, \r, \t, \v, \, ', ".
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.HalveOccurrence(System.String,System.Char)">
            <summary>
                Halves each occurence of a specified character in a string.
            </summary>
            <param name="str"> The string. </param>
            <param name="chr"> The character of which each occurence is halved. </param>
            <returns>
                The resulting string with each specified character occurrence halved.
            </returns>
            <remarks>
                <para>
                    Halving occurrences is done on a per-character basis and case-sensitive.
                </para>
                <para>
                    For example, when halving the occurence for 'A', the string "" results in "", "A" in "", "AA" results in "A", "AAA" in "A", "AAAA" in "AA", "ABC" in "BC", etc.
                </para>
                <para>
                    This is the same as using <see cref="M:RI.Utilities.Text.StringExtensions.ModifyOccurrence(System.String,System.Char,System.Double,System.Int32)" /> with a factor of 0.5 and offset of 0.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.IsEmpty(System.String)">
            <summary>
                Determines whether a string is empty.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                true if the string is empty, false otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered empty if has a length of zero.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.IsEmptyOrWhitespace(System.String)">
            <summary>
                Determines whether a string is empty or consists only of whitespace.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                true if the string is empty or consists only of whitespaces, false otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered empty if has a length of zero.
                </para>
                <para>
                    A string is considered consisting only of whitespaces if it is not empty and only has whitespace characters.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.IsNull(System.String)">
            <summary>
                Determines whether a string is null.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                true if the string is null, false otherwise.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
                Determines whether a string is null or empty.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                true if the string is null or empty, false otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered empty if has a length of zero.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.IsNullOrEmptyOrWhitespace(System.String)">
            <summary>
                Determines whether a string is null, empty, or consists only of whitespace.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                true if the string is null, empty, or consists only of whitespaces, false otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered empty if has a length of zero.
                </para>
                <para>
                    A string is considered consisting only of whitespaces if it is not empty and only has whitespace characters.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.IsNullOrWhitespace(System.String)">
            <summary>
                Determines whether a string is null or consists only of whitespaces.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                true if the string is null or consists only of whitespaces, false otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered consisting only of whitespaces if it is not empty and only has whitespace characters.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.IsWhitespace(System.String)">
            <summary>
                Determines whether a string consists only of whitespaces.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                true if the string consists only of whitespaces, false otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered consisting only of whitespaces if it is not empty and only has whitespace characters.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Joins a sequence of strings together into one string without a separator between each string element.
            </summary>
            <param name="values"> The sequence of strings to join together </param>
            <returns>
                The resulting string with each string element concatenated to the next.
                The resulting string has a length of zero if the sequence contains no string elements or only string elements of zero length.
            </returns>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
                Joins a sequence of strings together into one string with a specified separator character between each string element.
            </summary>
            <param name="values"> The sequence of strings to join together </param>
            <param name="separator"> The used separator character. </param>
            <returns>
                The resulting string with each string element concatenated to the next, separated by the specified separator character.
                The resulting string has a length of zero if the sequence contains no string elements or only string elements of zero length.
            </returns>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Joins a sequence of strings together into one string with a specified separator string between each string element.
            </summary>
            <param name="values"> The sequence of strings to join together </param>
            <param name="separator"> The used separator string. Can be null or <see cref="T:System.String" />.<see cref="F:System.String.Empty" /> if no separator should be used. </param>
            <returns>
                The resulting string with each string element concatenated to the next, separated by the specified separator string.
                The resulting string has a length of zero if the sequence contains no string elements or only string elements of zero length.
            </returns>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Keep(System.String,System.Predicate{System.Char})">
            <summary>
                Keeps only characters of a string based on a predicate.
            </summary>
            <param name="str"> The string. </param>
            <param name="predicate"> The predicate used to test each character of the string. </param>
            <returns>
                The string where each character is preserved based on the predicate.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="predicate" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.MaxLength(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Gets the maximum length of multiple strings.
            </summary>
            <param name="values"> The sequence of strings to get the maximum length from. </param>
            <returns>
                The length of the string with the maximum length or zero if <paramref name="values"/> is empty.
            </returns>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.MinLength(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
                Gets the minimum length of multiple strings.
            </summary>
            <param name="values"> The sequence of strings to get the minimum length from. </param>
            <param name="ignoreZeroLength"> Specifies whether string with zero length do not count. </param>
            <returns>
                The length of the string with the minimum length or zero if <paramref name="values"/> is empty.
            </returns>
            <remarks>
                <para>
                    <paramref name="values" /> is enumerated exactly once.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="values" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ModifyOccurrence(System.String,System.Char,System.Double,System.Int32)">
            <summary>
                Modifies each occurence of a specified character in a string by a specified factor and/or offset.
            </summary>
            <param name="str"> The string. </param>
            <param name="chr"> The character of which each occurence is modified. </param>
            <param name="factor"> The factor used by which each occurence is modified. </param>
            <param name="offset"> The offset used by which each occurence is modified. </param>
            <returns>
                The resulting string with each specified character occurence modified.
            </returns>
            <remarks>
                <para>
                    Modifying occurrences is done on a per-character basis and case-sensitive.
                </para>
                <para>
                    Example with <paramref name="factor" /> of 3.0 and <paramref name="offset" /> of 0 for the character 'A': "" -> "", "A" -> "AAA", "AA" -> "AAAAAA", "AAA" -> "AAAAAAAAA", "ABC" -> "AAABC", etc.
                    Example with <paramref name="factor" /> of 0.0 and <paramref name="offset" /> of 1 for the character 'A': "" -> "", "A" -> "AA", "AA" -> "AAA", "AAAA" -> "AAAAA",  "ABC" -> "AABC", etc.
                </para>
                <para>
                    If <paramref name="factor" /> and <paramref name="offset" /> are both used (<paramref name="factor" /> not 1.0 and <paramref name="offset" /> not 0), the resulting character count is ((original count * <paramref name="factor" />) + <paramref name="offset" />).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotFiniteArgumentException"> <paramref name="factor" /> is "NaN"/"Not-a-Number" or infinity (either positive or negative). </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.NormalizeLineBreaks(System.String)">
            <summary>
                Normalizes all line breaks in a string.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The string with all its line breaks normalized.
            </returns>
            <remarks>
                <para>
                    Normalizing line breaks means that all <c> CRLF </c> and <c> LF </c> are replaced with the value of <see cref="P:System.Environment.NewLine" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.RemoveLineBreaks(System.String)">
            <summary>
                Removes all line breaks in a string.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The string with all its line breaks removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Repeat(System.Char,System.Int32)">
            <summary>
                Repeats a character a specified number of times without a separator between each character.
            </summary>
            <param name="chr"> The character. </param>
            <param name="count"> The number of times the character is repeated. </param>
            <returns>
                The resulting string with the repeated character.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified character.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Repeat(System.Char,System.Int32,System.Char)">
            <summary>
                Repeats a character a specified number of times with a specified separator between each character.
            </summary>
            <param name="chr"> The character. </param>
            <param name="count"> The number of times the character is repeated. </param>
            <param name="separator"> The used separator. </param>
            <returns>
                The resulting string with the repeated character.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified character.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Repeat(System.Char,System.Int32,System.String)">
            <summary>
                Repeats a character a specified number of times with a specified separator between each character.
            </summary>
            <param name="chr"> The character. </param>
            <param name="count"> The number of times the character is repeated. </param>
            <param name="separator"> The used separator. Can be null or <see cref="T:System.String" />.<see cref="F:System.String.Empty" /> if no separator should be used. </param>
            <returns>
                The resulting string with the repeated character.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified character.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
                Repeats a string a specified number of times without a separator between each string.
            </summary>
            <param name="str"> The string. </param>
            <param name="count"> The number of times the string is repeated. </param>
            <returns>
                The resulting string with the repeated string.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Repeat(System.String,System.Int32,System.Char)">
            <summary>
                Repeats a string a specified number of times with a specified separator between each string.
            </summary>
            <param name="str"> The string. </param>
            <param name="count"> The number of times the string is repeated. </param>
            <param name="separator"> The used separator. </param>
            <returns>
                The resulting string with the repeated string.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Repeat(System.String,System.Int32,System.String)">
            <summary>
                Repeats a string a specified number of times with a specified separator between each string.
            </summary>
            <param name="str"> The string. </param>
            <param name="count"> The number of times the string is repeated. </param>
            <param name="separator"> The used separator. Can be null or <see cref="T:System.String" />.<see cref="F:System.String.Empty" /> if no separator should be used. </param>
            <returns>
                The resulting string with the repeated string.
                If <paramref name="count" /> is zero, the resulting string has a length of zero.
                If <paramref name="count" /> is one, the resulting string consists only of the specified string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="count" /> is less than zero. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ReplaceSingleStart(System.String,System.String,System.String,System.StringComparison)">
            <summary>
                Searchs a specified token in a string and replaces its occurence with a specified replacement, but only if the last character in the string, before a found token begins, is not the same as the first character of the specified token.
            </summary>
            <param name="str"> The string. </param>
            <param name="token"> The token to find and replace. </param>
            <param name="replacement"> The replacement for each found token. </param>
            <param name="comparisonType"> The string comparison used to find the token. </param>
            <returns>
                The resulting string where each token is replaced by the replacement.
            </returns>
            <remarks>
                <para>
                    The replacement only happens if the character before a found token is not the same as the first character of the token.
                    For example, when using "|x" as token and "X" as replacement, the string "ab|xcd" becomes "abXcd" but the string "ab||xcd" remains unchanged.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" />, <paramref name="token" />, or <paramref name="replacement" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Split(System.String,System.StringSplitOptions,System.Char[])">
            <summary>
                Splits a string into pieces at each of the specified characters, excluding the characters from the resulting pieces.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The splitting options. </param>
            <param name="separator"> Zero, one, or more characters at which the string is split. </param>
            <returns>
                The array of string pieces.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Split(System.String,System.String[])">
            <summary>
                Splits a string into pieces at each of the specified strings, excluding the strings from the resulting pieces.
            </summary>
            <param name="str"> The string. </param>
            <param name="separator"> Zero, one, or more strings at which the string is split. </param>
            <returns>
                The array of string pieces.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Split(System.String,System.StringSplitOptions,System.String[])">
            <summary>
                Splits a string into pieces at each of the specified strings, excluding the strings from the resulting pieces.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The splitting options. </param>
            <param name="separator"> Zero, one, or more strings at which the string is split. </param>
            <returns>
                The array of string pieces.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.SplitLines(System.String)">
            <summary>
                Splits a string into an array of strings at each line break.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The array of strings containing each line of the original string as a separate element.
            </returns>
            <remarks>
                <para>
                    Both CRLF and LF or \r\n and \n respectively are considered line breaks.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.SplitLines(System.String,System.StringSplitOptions)">
            <summary>
                Splits a string into an array of strings at each line break.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The splitting options. </param>
            <returns>
                The array of strings containing each line of the original string as a separate element.
            </returns>
            <remarks>
                <para>
                    Both CRLF and LF or \r\n and \n respectively are considered line breaks.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.SplitWhere(System.String,RI.Utilities.Text.StringSplitPredicate)">
            <summary>
                Splits a string into pieces at positions determined by a specified predicate function.
            </summary>
            <param name="str"> The string. </param>
            <param name="predicate"> The function which determines at which positions a string is splitted. </param>
            <returns>
                The array of string pieces.
                If the specified predicate function never indicates a split position (never returns true), the array has only one element, equal to <paramref name="str" />.
            </returns>
            <remarks>
                <para>
                    For more details about how to use the predicate function, see <see cref="T:RI.Utilities.Text.StringSplitPredicate" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="predicate" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.SplitWhere(System.String,System.StringSplitOptions,RI.Utilities.Text.StringSplitPredicate)">
            <summary>
                Splits a string into pieces at positions determined by a specified predicate function.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The splitting options. </param>
            <param name="predicate"> The function which determines at which positions a string is splitted. </param>
            <returns>
                The array of string pieces.
                If the specified predicate function never indicates a split position (never returns true), the array has only one element, equal to <paramref name="str" />.
            </returns>
            <remarks>
                <para>
                    For more details about how to use the predicate function, see <see cref="T:RI.Utilities.Text.StringSplitPredicate" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="predicate" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.SplitWords(System.String)">
            <summary>
                Splits a string into pieces before each upper case character and on whitespaces.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The array of string pieces.
                If the string does not contain any upper case characters except its first character, the array has only one element, equal to <paramref name="str" />.
            </returns>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.StartsWithCount(System.String,System.Char,System.StringComparison)">
            <summary>
                Counts how many times a string starts with a specified character.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The character to count when occuring at the start of the string. </param>
            <param name="comparisonType"> The string comparison used to find the character. </param>
            <returns>
                The number of times the specified character appears in succession at the start of the string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.StartsWithCount(System.String,System.String,System.StringComparison)">
            <summary>
                Counts how many times a string starts with a specified string.
            </summary>
            <param name="str"> The string. </param>
            <param name="value"> The string to count when occuring at the start of the string. </param>
            <param name="comparisonType"> The string comparison used to find the string. </param>
            <returns>
                The number of times the specified string appears in succession at the start of the string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="value" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.EmptyStringArgumentException"> <paramref name="value" /> is a string with zero length. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToBoolean(System.String)">
            <summary>
                Attempts to convert a string into a boolean.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The boolean value represented by the string (true or false) if the string can be converted into a boolean, null otherwise.
            </returns>
            <remarks>
                <para>
                    The following strings will return true: &quot;true&quot;, &quot;yes&quot;, &quot;1&quot;, &quot;on&quot;.
                </para>
                <para>
                    The following strings will return false: &quot;false&quot;, &quot;no&quot;, &quot;0&quot;, &quot;off&quot;.
                </para>
                <para>
                    Any other string will return null.
                </para>
                <para>
                    The conversion is case-insensitive. Whitespace is not ignored and must be trimmed before if necessary (e.g. using <see cref="M:System.String.Trim" />).
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToByte(System.String)">
            <summary>
                Attempts to convert a string into an unsigned byte value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned byte value represented by the string if the string can be converted into an unsigned byte, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into an unsigned byte value.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The unsigned byte value represented by the string if the string can be converted into an unsigned byte, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToByteInvariant(System.String)">
            <summary>
                Attempts to convert a string into an unsigned byte value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned byte value represented by the string if the string can be converted into an unsigned byte, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDateTimeFromSortable(System.String)">
            <summary>
                Attempts to convert a string into a date and time.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The date and time represented by the string if the string is a date and time as produced by <see cref="M:RI.Utilities.Dates.DateTimeExtensions.ToSortableString(System.DateTime)" />, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDateTimeFromSortable(System.String,System.Char)">
            <summary>
                Attempts to convert a string into a date and time.
            </summary>
            <param name="str"> The string. </param>
            <param name="separator"> The expected separator between each unit of the date and time. </param>
            <returns>
                The date and time represented by the string if the string is a date and time as produced by <see cref="M:RI.Utilities.Dates.DateTimeExtensions.ToSortableString(System.DateTime,System.Char)" />, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDateTimeFromSortable(System.String,System.String)">
            <summary>
                Attempts to convert a string into a date and time.
            </summary>
            <param name="str"> The string. </param>
            <param name="separator"> The expected separator between each unit of the date and time. </param>
            <returns>
                The date and time represented by the string if the string is a date and time as produced by <see cref="M:RI.Utilities.Dates.DateTimeExtensions.ToSortableString(System.DateTime,System.String)" />, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDateTimeFromIso8601(System.String)">
            <summary>
                Attempts to convert a string into a date and time from an ISO8601 round-trip compatible string.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The date and time represented by the string if the string is a date and time in the ISO8601 format, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDateTimeOffsetFromIso8601(System.String)">
            <summary>
                Attempts to convert a string into a date and time from an ISO8601 round-trip compatible string.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The date and time represented by the string if the string is a date and time in the ISO8601 format, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDecimal(System.String)">
            <summary>
                Attempts to convert a string into a decimal floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The decimal floating point value represented by the string if the string can be converted into a decimal floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDecimal(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into a decimal floating point value.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The decimal floating point value represented by the string if the string can be converted into a decimal floating point, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDecimalInvariant(System.String)">
            <summary>
                Attempts to convert a string into a decimal floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The decimal floating point value represented by the string if the string can be converted into a decimal floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDouble(System.String)">
            <summary>
                Attempts to convert a string into double precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The double precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into double precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The double precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToDoubleInvariant(System.String)">
            <summary>
                Attempts to convert a string into double precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The double precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToEmptyIfNullOrEmpty(System.String)">
            <summary>
                Returns an empty string if a string is null or empty.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                <see cref="F:System.String.Empty" /> if the string is null or empty, the original string otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered empty if has a length of zero.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToEmptyIfNullOrEmptyOrWhitespace(System.String)">
            <summary>
                Returns an empty string if a string is null, empty, or consists only of whitespaces.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                <see cref="F:System.String.Empty" /> if the string is null, empty, or consists only of whitespaces, the original string otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered empty if has a length of zero.
                </para>
                <para>
                    A string is considered consisting only of whitespaces if it is not empty and only has whitespace characters.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToEnum(System.String,System.Type)">
            <summary>
                Attempts to convert a string into a specified enumeration type.
            </summary>
            <param name="str"> The string. </param>
            <param name="enumType"> The enumeration type. </param>
            <returns>
                The enumeration value represented by the string if the string can be converted into the specified enumeration type, null otherwise.
            </returns>
            <remarks>
                <note type="note">
                    This method is considered very slow.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> or <paramref name="enumType" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException"> <paramref name="enumType" /> is not an enumeration type. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToEnum``1(System.String)">
            <summary>
                Attempts to convert a string into a specified enumeration type.
            </summary>
            <typeparam name="T"> The enumeration type. </typeparam>
            <param name="str"> The string. </param>
            <returns>
                The enumeration value represented by the string if the string can be converted into the specified enumeration type, null otherwise.
            </returns>
            <remarks>
                <note type="note">
                    This method is considered very slow.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
            <exception cref="T:RI.Utilities.Exceptions.NotAnEnumerationArgumentException"> <typeparamref name="T" /> is not an enumeration type. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToFloat(System.String)">
            <summary>
                Attempts to convert a string into single precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The single precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToFloat(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into single precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The single precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToFloatInvariant(System.String)">
            <summary>
                Attempts to convert a string into single precision floating point value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The single precision floating point value represented by the string if the string can be converted into a floating point, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToGuid(System.String)">
            <summary>
                Attempts to convert a string into a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The <see cref="T:System.Guid" /> value represented by the string if the string can be converted into a <see cref="T:System.Guid" />, null otherwise.
            </returns>
            <remarks>
                <note type="note">
                    This method is considered very slow.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToInt16(System.String)">
            <summary>
                Attempts to convert a string into a signed short.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed short value represented by the string if the string can be converted into a signed short, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into a signed short.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The signed short value represented by the string if the string can be converted into a signed short, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToInt16Invariant(System.String)">
            <summary>
                Attempts to convert a string into a signed short.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed short value represented by the string if the string can be converted into a signed short, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToInt32(System.String)">
            <summary>
                Attempts to convert a string into a signed int.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed int value represented by the string if the string can be converted into a signed int, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into a signed int.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The signed int value represented by the string if the string can be converted into a signed int, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToInt32Invariant(System.String)">
            <summary>
                Attempts to convert a string into a signed int.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed int value represented by the string if the string can be converted into a signed int, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToInt64(System.String)">
            <summary>
                Attempts to convert a string into a signed long.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed long value represented by the string if the string can be converted into a signed long, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into a signed long.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The signed long value represented by the string if the string can be converted into a signed long, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToInt64Invariant(System.String)">
            <summary>
                Attempts to convert a string into a signed long.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed long value represented by the string if the string can be converted into a signed long, null otherwise.
            </returns>
            <remarks>
                <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToNullIfNullOrEmpty(System.String)">
            <summary>
                Returns null if a string is null or empty.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                null if the string is null or empty, the original string otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered empty if has a length of zero.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToNullIfNullOrEmptyOrWhitespace(System.String)">
            <summary>
                Returns null if a string is null, empty, or consists only of whitespaces.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                null if the string is null, empty, or consists only of whitespaces, the original string otherwise.
            </returns>
            <remarks>
                <para>
                    A string is considered empty if has a length of zero.
                </para>
                <para>
                    A string is considered consisting only of whitespaces if it is not empty and only has whitespace characters.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToSByte(System.String)">
            <summary>
                Attempts to convert a string into a signed byte value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed byte value represented by the string if the string can be converted into a signed byte, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToSByte(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into a signed byte value.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The signed byte value represented by the string if the string can be converted into a signed byte, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToSByteInvariant(System.String)">
            <summary>
                Attempts to convert a string into a signed byte value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The signed byte value represented by the string if the string can be converted into a signed byte, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToSecureString(System.String)">
            <summary>
                Converts a string into a secure string.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The secure string.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToTechnical(System.String)">
            <summary>
                Transforms a string into a &quot;technical string&quot;.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The technical string.
            </returns>
            <remarks>
                <para>
                    See <see cref="M:RI.Utilities.Text.StringExtensions.ToTechnical(System.String,RI.Utilities.Text.TechnicalStringOptions,System.Nullable{System.Char})" /> for more details.
                </para>
                <para>
                    <see cref="F:RI.Utilities.Text.TechnicalStringOptions.None" /> is used for options.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToTechnical(System.String,RI.Utilities.Text.TechnicalStringOptions)">
            <summary>
                Transforms a string into a &quot;technical string&quot;.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The technical string options. </param>
            <returns>
                The technical string.
            </returns>
            <remarks>
                <para>
                    See <see cref="M:RI.Utilities.Text.StringExtensions.ToTechnical(System.String,RI.Utilities.Text.TechnicalStringOptions,System.Nullable{System.Char})" /> for more details.
                </para>
                <para>
                    Whitespace is preserved and not replaced with a replacement character if <paramref name="options" /> specifies <see cref="F:RI.Utilities.Text.TechnicalStringOptions.AllowWhitespaces" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToTechnical(System.String,RI.Utilities.Text.TechnicalStringOptions,System.Nullable{System.Char})">
            <summary>
                Transforms a string into a &quot;technical string&quot;.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The technical string options. </param>
            <param name="whitespaceReplacement"> The replacement character for whitespaces or null if the whitespace is to be preserved. </param>
            <returns>
                The technical string.
            </returns>
            <remarks>
                <para>
                    The transformation of a string into a technical string is done by removing characters which can not be used for technical purposes.
                </para>
                <para>
                    A technical string is a string which can be used for technical purposes such as file names, IDs, etc. and therefore consists only of certain characters.
                    By default, if <paramref name="options" /> is <see cref="F:RI.Utilities.Text.TechnicalStringOptions.None" />, only letters and digits will be preserved.
                    <paramref name="options" /> can specify additional characters which will be preserved.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToTimeSpanFromSortable(System.String)">
            <summary>
                Attempts to convert a string into a time span.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The time span represented by the string if the string is a time span as produced by <see cref="M:RI.Utilities.Dates.TimeSpanExtensions.ToSortableString(System.TimeSpan)" />, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToTimeSpanFromSortable(System.String,System.Char)">
            <summary>
                Attempts to convert a string into a time span.
            </summary>
            <param name="str"> The string. </param>
            <param name="separator"> The expected separator between each unit of the time span. </param>
            <returns>
                The time span represented by the string if the string is a time span as produced by <see cref="M:RI.Utilities.Dates.TimeSpanExtensions.ToSortableString(System.TimeSpan,System.Char)" />, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToTimeSpanFromSortable(System.String,System.String)">
            <summary>
                Attempts to convert a string into a time span.
            </summary>
            <param name="str"> The string. </param>
            <param name="separator"> The expected separator between each unit of the time span. </param>
            <returns>
                The time span represented by the string if the string is a time span as produced by <see cref="M:RI.Utilities.Dates.TimeSpanExtensions.ToSortableString(System.TimeSpan,System.String)" />, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToUInt16(System.String)">
            <summary>
                Attempts to convert a string into an unsigned short.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned short value represented by the string if the string can be converted into an unsigned short, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToUInt16(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into an unsigned short.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The unsigned short value represented by the string if the string can be converted into an unsigned short, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToUInt16Invariant(System.String)">
            <summary>
                Attempts to convert a string into an unsigned short.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned short value represented by the string if the string can be converted into an unsigned short, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToUInt32(System.String)">
            <summary>
                Attempts to convert a string into an unsigned int.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned int value represented by the string if the string can be converted into an unsigned int, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToUInt32(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into an unsigned int.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The unsigned int value represented by the string if the string can be converted into an unsigned int, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToUInt32Invariant(System.String)">
            <summary>
                Attempts to convert a string into an unsigned int.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned int value represented by the string if the string can be converted into an unsigned int, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToUInt64(System.String)">
            <summary>
                Attempts to convert a string into an unsigned long.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned long value represented by the string if the string can be converted into an unsigned long, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToUInt64(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
                Attempts to convert a string into an unsigned long.
            </summary>
            <param name="str"> The string. </param>
            <param name="style"> The number styles which are to be expected in the string. </param>
            <param name="provider"> An object that supplies culture-specific formatting information for parsing the string. Can be null to use the current threads culture. </param>
            <returns>
                The unsigned long value represented by the string if the string can be converted into an unsigned long, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToUInt64Invariant(System.String)">
            <summary>
                Attempts to convert a string into an unsigned long.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The unsigned long value represented by the string if the string can be converted into an unsigned long, null otherwise.
            </returns>
            <remarks>
                <para>
                    <see cref="T:System.Globalization.NumberStyles" />.<see cref="F:System.Globalization.NumberStyles.Any" /> and <see cref="T:System.Globalization.CultureInfo" />.<see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> are used for parsing.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToRomanNumber(System.String)">
            <summary>
                Attempts to convert a string into a roman number.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The roman number represented by the string if the string represents a valid roman number, null otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.ToVersion(System.String)">
            <summary>
                Attempts to convert a string into a <see cref="T:System.Version" /> value.
            </summary>
            <param name="str"> The string. </param>
            <returns>
                The <see cref="T:System.Version" /> value represented by the string if the string can be converted into a <see cref="T:System.Version" />, null otherwise.
            </returns>
            <remarks>
                <note type="note">
                    This method is considered very slow.
                </note>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.StringExtensions.Unescape(System.String,RI.Utilities.Text.StringEscapeOptions)">
            <summary>
                Converts a string into another string where escape sequences are converted back to certain special characters.
            </summary>
            <param name="str"> The string. </param>
            <param name="options"> The conversion options. </param>
            <returns>
                The resulting string with escape sequences converted back to special characters.
            </returns>
            <remarks>
                <para>
                    An escape sequence always starts with \ followed by a single character specifying the escape sequence, e.g. \n for new-line.
                </para>
                <para>
                    The following special characters are un-escaped: \a, \b, \f, \n, \r, \t, \v, \, ', ".
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="str" /> is null. </exception>
        </member>
        <member name="T:RI.Utilities.Text.StringSplitPredicate">
            <summary>
                Defines a delegate which can be used with the <see cref="T:RI.Utilities.Text.StringExtensions" />.<see cref="M:RI.Utilities.Text.StringExtensions.SplitWhere(System.String,System.StringSplitOptions,RI.Utilities.Text.StringSplitPredicate)" /> and <see cref="T:RI.Utilities.Text.StringExtensions" />.<see cref="M:RI.Utilities.Text.StringExtensions.SplitWhere(System.String,RI.Utilities.Text.StringSplitPredicate)" /> method to implement custom splitting of strings by testing between each character of the string whether it is a split position.
            </summary>
            <param name="str"> The whole string which is being splitted. </param>
            <param name="currentToken"> The current token, which is the string starting at the last split position up to and including the index specified by <paramref name="previous" />. </param>
            <param name="previous"> The index of the previous character. </param>
            <param name="next"> The index of the next character. </param>
            <returns>
                true if a split position between <paramref name="previous" /> and <paramref name="next" /> has been found.
            </returns>
            <remarks>
                <para>
                    Split testing always happens between characters so that when a split position is found (the return value of <see cref="T:RI.Utilities.Text.StringSplitPredicate" /> is true), the character at the index <paramref name="previous" /> goes into the previous token while the character at the index <paramref name="next" /> goes into the next token.
                </para>
                <para>
                    <see cref="T:RI.Utilities.Text.StringSplitPredicate" /> is called before the first character, between each following character, and after the last character of a string to test whether to split the string at that position.
                    Therefore, before the first character, <paramref name="previous" /> is -1 and <paramref name="next" /> is 0, after the first character <paramref name="previous" /> is 0 and <paramref name="next" /> is 1, and so forth, and after the last character <paramref name="previous" /> is n-1 and <paramref name="next" /> is n where n is the length of the string.
                </para>
            </remarks>
        </member>
        <member name="T:RI.Utilities.Text.TechnicalStringOptions">
            <summary>
                Describes the options for <see cref="M:RI.Utilities.Text.StringExtensions.ToTechnical(System.String,RI.Utilities.Text.TechnicalStringOptions)" /> and <see cref="M:RI.Utilities.Text.StringExtensions.ToTechnical(System.String,RI.Utilities.Text.TechnicalStringOptions,System.Nullable{System.Char})" />
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.TechnicalStringOptions.None">
            <summary>
                No additional characters are allowed, only letters and digits.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.TechnicalStringOptions.AllowWhitespaces">
            <summary>
                Whitespaces are allowed.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.TechnicalStringOptions.AllowUnderscores">
            <summary>
                Underscores (<c> _ </c>) are allowed.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.TechnicalStringOptions.AllowMinus">
            <summary>
                Minus (<c> - </c>) are allowed.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.TechnicalStringOptions.AllowPeriods">
            <summary>
                Periods (<c> . </c>) are allowed.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.TechnicalStringOptions.FileCompatible">
            <summary>
                Allows everything which can be used for file and directory names and paths. Combination of <see cref="F:RI.Utilities.Text.TechnicalStringOptions.AllowWhitespaces" />, <see cref="F:RI.Utilities.Text.TechnicalStringOptions.AllowUnderscores" />, <see cref="F:RI.Utilities.Text.TechnicalStringOptions.AllowMinus" />, <see cref="F:RI.Utilities.Text.TechnicalStringOptions.AllowPeriods" />.
            </summary>
        </member>
        <member name="F:RI.Utilities.Text.TechnicalStringOptions.FileCompatibleNoWhitespaces">
            <summary>
                Allows everything which can be used for file and directory names and paths, except whitespaces. Combination of <see cref="F:RI.Utilities.Text.TechnicalStringOptions.AllowUnderscores" />, <see cref="F:RI.Utilities.Text.TechnicalStringOptions.AllowMinus" />, <see cref="F:RI.Utilities.Text.TechnicalStringOptions.AllowPeriods" />.
            </summary>
        </member>
        <member name="T:RI.Utilities.Text.TextReaderExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.IO.TextReader" /> type.
            </summary>
        </member>
        <member name="M:RI.Utilities.Text.TextReaderExtensions.Read(System.IO.TextReader,System.Char[])">
            <summary>
                Reads characters into an array.
            </summary>
            <param name="reader"> The reader. </param>
            <param name="data"> The array. </param>
            <returns>
                The number of characters read.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.TextReaderExtensions.ReadBlock(System.IO.TextReader,System.Char[])">
            <summary>
                Reads characters into an array.
            </summary>
            <param name="reader"> The reader. </param>
            <param name="data"> The array. </param>
            <returns>
                The number of characters read.
            </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="reader" /> or <paramref name="data" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Text.TextReaderExtensions.ReadLines(System.IO.TextReader)">
            <summary>
                Reads all available lines into an array.
            </summary>
            <param name="reader"> The reader. </param>
            <returns>
                The array of lines read to the end of the reader or null if the end of the reader was reached without reading any line.
            </returns>
        </member>
        <member name="T:RI.Utilities.Text.NamespaceDoc">
            <summary>
                Contains utilities and extensions for working with text data and I/O.
            </summary>
        </member>
        <member name="T:RI.Utilities.Threading.HeavyThread">
            <summary>
                Implements a heavy-weight thread which encapsulates thread setup and execution and also captures exceptions.
            </summary>
            <remarks>
                <para>
                    <see cref="T:RI.Utilities.Threading.HeavyThread" /> is usually used for long-running and/or dedicated threads where a higher control and encapsulation of the threads execution is required, e.g. compared to <see cref="T:System.Threading.ThreadPool" />.
                </para>
                <para>
                    See <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> and <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> for a description of the thread execution sequence.
                </para>
                <note type="important">
                    Some virtual methods are called from within locks to <see cref="P:RI.Utilities.Threading.HeavyThread.SyncRoot" />.
                    Be careful in inheriting classes when calling outside code from those methods (e.g. through events, callbacks, or other virtual methods) to not produce deadlocks!
                </note>
            </remarks>
            <threadsafety static="true" instance="true" />
            TODO: OnStopped
            TODO: HeavyThreadAwaiter (incl. option for thread configuration callback)
        </member>
        <member name="F:RI.Utilities.Threading.HeavyThread.DefaultThreadTimeout">
            <summary>
                The default thread timeout.
            </summary>
            <remarks>
                <para>
                    The default value is 10000.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Threading.HeavyThread" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.Finalize">
            <summary>
                Garbage collects this instance of <see cref="T:RI.Utilities.Threading.HeavyThread" />.
            </summary>
        </member>
        <member name="P:RI.Utilities.Threading.HeavyThread.HasStoppedGracefully">
            <summary>
                Gets whether the thread has gracefully stopped without exception.
            </summary>
            <value>
                true if the thread stopped gracefully and had no exception, false if the thread was forcibly terminated (due to timeout) and/or had an exception, or null if the thread was not started or is still running.
            </value>
            <remarks>
                <para>
                    The value of <see cref="P:RI.Utilities.Threading.HeavyThread.HasStoppedGracefully" /> is reset to null by <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> and set by <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Threading.HeavyThread.IsRunning">
            <summary>
                Gets whether the thread is running.
            </summary>
            <value>
                true if the thread is running, false otherwise.
            </value>
        </member>
        <member name="P:RI.Utilities.Threading.HeavyThread.ThreadException">
            <summary>
                Gets the exception of the thread.
            </summary>
            <value>
                The exception of the thread or null if no exception occurred, the thread was not started, or the thread is still running.
            </value>
            <remarks>
                <para>
                    The value of <see cref="P:RI.Utilities.Threading.HeavyThread.ThreadException" /> is reset to null by <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> and set during the execution of the thread if an exception occurs.
                </para>
                <para>
                    <see cref="P:RI.Utilities.Threading.HeavyThread.ThreadException" /> is set for any unhandled exception which occurs in the thread (<see cref="M:RI.Utilities.Threading.HeavyThread.OnBegin" />, <see cref="M:RI.Utilities.Threading.HeavyThread.OnRun" />, <see cref="M:RI.Utilities.Threading.HeavyThread.OnEnd" />), except for <see cref="T:System.Threading.ThreadAbortException" />s.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Threading.HeavyThread.Timeout">
            <summary>
                Gets or sets the timeout of the thread in milliseconds used for start and stop.
            </summary>
            <value>
                The timeout of the thread in milliseconds used for start and stop.
            </value>
            <remarks>
                <para>
                    This timeout is used during <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> while waiting for <see cref="M:RI.Utilities.Threading.HeavyThread.OnBegin" /> to return and during <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> while waiting for <see cref="M:RI.Utilities.Threading.HeavyThread.OnStopping" /> to take effect (signaling <see cref="M:RI.Utilities.Threading.HeavyThread.OnRun" /> to return).
                </para>
                <para>
                    The default value is <see cref="F:RI.Utilities.Threading.HeavyThread.DefaultThreadTimeout" />.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="value" /> is less than zero. </exception>
        </member>
        <member name="P:RI.Utilities.Threading.HeavyThread.StopEvent">
            <summary>
                Gets the event which is signaled when the thread is requested to stop.
            </summary>
            <value>
                The event which is signaled when the thread is requested to stop or null if the thread is not running.
            </value>
            <remarks>
                <para>
                    <see cref="P:RI.Utilities.Threading.HeavyThread.StopEvent" /> is reset by <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> and set by <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Threading.HeavyThread.StopRequested">
            <summary>
                Gets whether the thread has been requested to stop.
            </summary>
            <value>
                true if the thread has been requested to stop, false otherwise or if the thread is not running.
            </value>
            <remarks>
                <para>
                    The value of <see cref="P:RI.Utilities.Threading.HeavyThread.StopRequested" /> is reset to false by <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> and set to true by <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" />.
                </para>
            </remarks>
        </member>
        <member name="P:RI.Utilities.Threading.HeavyThread.Thread">
            <summary>
                Gets the actual thread instance used to run the thread.
            </summary>
            <value>
                The actual thread instance used to run the thread or null if the thread is not running.
            </value>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.CheckForException">
            <summary>
                Checks whether the thread had an exception and throws a <see cref="T:RI.Utilities.Threading.HeavyThreadException" /> if so.
            </summary>
            <exception cref="T:RI.Utilities.Threading.HeavyThreadException"> The thread had an exception. </exception>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.IsInThread">
            <summary>
                Determines whether the caller of this function is executed inside the thread or not.
            </summary>
            <returns>
                true if the caller of this function is executed inside this thread, false otherwise or if the thread is not running.
            </returns>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.Start">
            <summary>
                Starts the thread.
            </summary>
            <remarks>
                <para>
                    The start sequence goes as follows:
                </para>
                <list type="number">
                    <item>
                        <para>
                            <see cref="P:RI.Utilities.Threading.HeavyThread.Thread" /> is created and initialized.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Utilities.Threading.HeavyThread.OnStarting" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="P:RI.Utilities.Threading.HeavyThread.Thread" /> actually starts executing.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> is waiting until <see cref="M:RI.Utilities.Threading.HeavyThread.OnBegin" /> finishes inside <see cref="P:RI.Utilities.Threading.HeavyThread.Thread" /> or the timeout specified by <see cref="P:RI.Utilities.Threading.HeavyThread.Timeout" /> occurs.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Utilities.Threading.HeavyThread.OnStarted(System.Boolean)" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> returns while <see cref="M:RI.Utilities.Threading.HeavyThread.OnRun" /> is executed inside <see cref="P:RI.Utilities.Threading.HeavyThread.Thread" />.
                        </para>
                    </item>
                </list>
                <note type="note">
                    If <see cref="M:RI.Utilities.Threading.HeavyThread.OnRun" /> returns before <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> was called, the thread sleeps and <see cref="M:RI.Utilities.Threading.HeavyThread.OnEnd" /> is not executed until <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> is called.
                </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> The thread is already running. </exception>
            <exception cref="T:System.TimeoutException"> The thread failed to return from <see cref="M:RI.Utilities.Threading.HeavyThread.OnBegin" /> within <see cref="P:RI.Utilities.Threading.HeavyThread.Timeout" />. </exception>
            <exception cref="T:RI.Utilities.Threading.HeavyThreadException"> An exception occurred inside the thread during execution of <see cref="M:RI.Utilities.Threading.HeavyThread.OnBegin" />. </exception>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.Stop">
            <summary>
                Stops the thread and frees all resources.
            </summary>
            <remarks>
                <para>
                    The stop sequence goes as follows:
                </para>
                <list type="number">
                    <item>
                        <para>
                            <see cref="M:RI.Utilities.Threading.HeavyThread.OnStopping" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="P:RI.Utilities.Threading.HeavyThread.StopRequested" /> is set to true.
                            <see cref="P:RI.Utilities.Threading.HeavyThread.StopEvent" /> is signaled.
                            All stop tasks, added by <see cref="M:RI.Utilities.Threading.HeavyThread.AddStopTask(System.Threading.Tasks.TaskCompletionSource{System.Object})" />, are completed.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> waits until <see cref="P:RI.Utilities.Threading.HeavyThread.Thread" /> ended (<see cref="M:RI.Utilities.Threading.HeavyThread.OnRun" /> and <see cref="M:RI.Utilities.Threading.HeavyThread.OnEnd" /> finished executing inside <see cref="P:RI.Utilities.Threading.HeavyThread.Thread" />) or the timeout specified by <see cref="P:RI.Utilities.Threading.HeavyThread.Timeout" /> occurs.
                        </para>
                    </item>
                    <item>
                        <para>
                            If <see cref="P:RI.Utilities.Threading.HeavyThread.Thread" /> did not end on its own so a timeout occurred (see step above), the thread is terminated using <see cref="M:System.Threading.Thread.Abort" />.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Utilities.Threading.HeavyThread.OnStopped" /> is called.
                        </para>
                    </item>
                    <item>
                        <para>
                            <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> returns.
                        </para>
                    </item>
                </list>
                <note type="important">
                    The thread cannot be stopped from inside itself (e.g. you cannot call <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> from <see cref="M:RI.Utilities.Threading.HeavyThread.OnBegin" />, <see cref="M:RI.Utilities.Threading.HeavyThread.OnRun" />, or <see cref="M:RI.Utilities.Threading.HeavyThread.OnEnd" />).
                    This means that the eventual stop has to be controlled by the owner of <see cref="T:RI.Utilities.Threading.HeavyThread" />.
                    This ensures symmetry of start/stop (only who can start <see cref="T:RI.Utilities.Threading.HeavyThread" /> can also stop it).
                </note>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> This function was called from inside the thread. </exception>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.AddStopTask(System.Threading.Tasks.TaskCompletionSource{System.Object})">
            <summary>
                Adds a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> to this thread which is completed when the thread is requested to stop.
            </summary>
            <param name="tcs"> The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> to add. </param>
            <remarks>
                <para>
                    A task can be added multiple times but will only be completed once.
                </para>
                <para>
                    All added tasks will be completed using <see cref="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)" /> by <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" />.
                    Therefore, no tasks added after <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> was called will be completed.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tcs" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.RemoveStopTask(System.Threading.Tasks.TaskCompletionSource{System.Object})">
            <summary>
                Removes a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> which was previously added using <see cref="M:RI.Utilities.Threading.HeavyThread.AddStopTask(System.Threading.Tasks.TaskCompletionSource{System.Object})" />.
            </summary>
            <param name="tcs"> The <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> to remove. </param>
            <remarks>
                <para>
                    Removing a task which was not previously added has no effect.
                </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"> <paramref name="tcs" /> is null. </exception>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.VerifyNotFromThread(System.String)">
            <summary>
                Ensures that the caller of this function is not executed inside the thread.
            </summary>
            <param name="operation"> The name of the performed operation. </param>
            <exception cref="T:System.InvalidOperationException"> The caller of this function is executed inside this thread. </exception>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.VerifyNotRunning">
            <summary>
                Throws an <see cref="T:System.InvalidOperationException" /> if the thread is running.
            </summary>
            <exception cref="T:System.InvalidOperationException"> The thread is running. </exception>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.VerifyRunning">
            <summary>
                Throws an <see cref="T:System.InvalidOperationException" /> if the thread is not running.
            </summary>
            <exception cref="T:System.InvalidOperationException"> The thread is not running. </exception>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.Dispose(System.Boolean)">
            <summary>
                Stops the thread and frees all resources.
            </summary>
            <param name="disposing"> true if called from <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> or <see cref="M:System.IDisposable.Dispose" />, false if called from the destructor. </param>
            <remarks>
                <para>
                    See <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> for a description of the sequence when stopping/disposing the thread.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"> This function was called from the thread. </exception>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.OnBegin">
            <summary>
                Called when the thread begins execution.
            </summary>
            <remarks>
                <note type="important">
                    This method is intended for on-thread preparation of the threads operation.
                    Do not execute the actual operation of the thread inside <see cref="M:RI.Utilities.Threading.HeavyThread.OnBegin" />.
                    See <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> and <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> for more details.
                </note>
                <note type="note">
                    This method is called from the thread.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.OnEnd">
            <summary>
                Called when the thread ends execution.
            </summary>
            <remarks>
                <para>
                    This method is intended for on-thread cleanup of the threads operation.
                    The thread ends as soon as <see cref="M:RI.Utilities.Threading.HeavyThread.OnEnd" /> returns.
                    See <see cref="M:RI.Utilities.Threading.HeavyThread.Start" /> and <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" /> for more details.
                </para>
                <note type="note">
                    This method is called from the thread.
                </note>
                <note type="important">
                    Under very rare circumstances, this method is called twice.
                    Therefore, overrides of this method must be designed accordingly.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.OnException(System.Exception,System.Boolean)">
            <summary>
                Called when an exception occurred inside the thread.
            </summary>
            <param name="exception"> The exception. </param>
            <param name="canContinue"> Indicates whether the thread is able to continue or not after the exception was handled by <see cref="M:RI.Utilities.Threading.HeavyThread.OnException(System.Exception,System.Boolean)" />. </param>
            <remarks>
                <note type="note">
                    This method is called from the thread.
                </note>
                <para>
                    <paramref name="canContinue" /> is only true if you call <see cref="M:RI.Utilities.Threading.HeavyThread.OnException(System.Exception,System.Boolean)" /> yourself with <paramref name="canContinue" /> set to true.
                    It is false for any unhandled exception which is thrown inside the thread.
                </para>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.OnRun">
            <summary>
                Called when the thread is running and supposed to perform its operations.
            </summary>
            <remarks>
                <note type="note">
                    This method is called from the thread.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.OnStarted(System.Boolean)">
            <summary>
                Called after the thread was started.
            </summary>
            <param name="withLock"> Indicates whether the method is called inside a lock to <see cref="P:RI.Utilities.Threading.HeavyThread.SyncRoot" />. </param>
            <remarks>
                <para>
                    After the thread was started, this method is called twice:
                    Once inside a lock to <see cref="P:RI.Utilities.Threading.HeavyThread.SyncRoot" /> (<paramref name="withLock" /> is true) and then once outside (<paramref name="withLock" /> is false).
                </para>
                <note type="note">
                    This method is called by <see cref="M:RI.Utilities.Threading.HeavyThread.Start" />.
                </note>
                <note type="important">
                    This method is called inside a lock to <see cref="P:RI.Utilities.Threading.HeavyThread.SyncRoot" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.OnStarting">
            <summary>
                Called before the thread is started.
            </summary>
            <remarks>
                <para>
                    This method is intended for configuring the thread (priority, culture, etc.) before the actual thread is started.
                </para>
                <note type="note">
                    This method is called by <see cref="M:RI.Utilities.Threading.HeavyThread.Start" />.
                </note>
                <note type="important">
                    This method is called inside a lock to <see cref="P:RI.Utilities.Threading.HeavyThread.SyncRoot" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.OnStopped">
            <summary>
                Called after the thread has been stopped and its resources considered freed.
            </summary>
            <remarks>
                <note type="note">
                    This method is called by <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" />.
                </note>
                <note type="important">
                    This method is called inside a lock to <see cref="P:RI.Utilities.Threading.HeavyThread.SyncRoot" />.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.OnStopping">
            <summary>
                Called to stop the thread.
            </summary>
            <remarks>
                <para>
                    This method is intended to signalize the thread to cease its operation and return from <see cref="M:RI.Utilities.Threading.HeavyThread.OnRun" />.
                </para>
                <note type="note">
                    This method is called by <see cref="M:RI.Utilities.Threading.HeavyThread.Stop" />.
                </note>
                <note type="important">
                    This method is called inside a lock to <see cref="P:RI.Utilities.Threading.HeavyThread.SyncRoot" />.
                </note>
                <note type="important">
                    If the thread does not end on its own (that is: return from <see cref="M:RI.Utilities.Threading.HeavyThread.OnRun" />) after <see cref="M:RI.Utilities.Threading.HeavyThread.OnStopping" /> was called, plus the time specified by <see cref="P:RI.Utilities.Threading.HeavyThread.Timeout" />, the thread is terminated.
                </note>
            </remarks>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThread.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Threading.HeavyThread.RI#Utilities#ObjectModel#ISynchronizable#IsSynchronized">
            <inheritdoc />
        </member>
        <member name="P:RI.Utilities.Threading.HeavyThread.SyncRoot">
            <inheritdoc />
        </member>
        <member name="T:RI.Utilities.Threading.HeavyThreadException">
            <summary>
                The <see cref="T:RI.Utilities.Threading.HeavyThreadException" /> is thrown when the thread of a <see cref="T:RI.Utilities.Threading.HeavyThread" /> had an exception.
            </summary>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThreadException.#ctor">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Threading.HeavyThreadException" />.
            </summary>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThreadException.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Threading.HeavyThreadException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThreadException.#ctor(System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Threading.HeavyThreadException" />.
            </summary>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThreadException.#ctor(System.String,System.Exception)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Threading.HeavyThreadException" />.
            </summary>
            <param name="message"> The message which describes the exception. </param>
            <param name="innerException"> The exception which triggered this exception. </param>
        </member>
        <member name="M:RI.Utilities.Threading.HeavyThreadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
                Creates a new instance of <see cref="T:RI.Utilities.Threading.HeavyThreadException" />.
            </summary>
            <param name="info"> The serialization data. </param>
            <param name="context"> The type of the source of the serialization data. </param>
        </member>
        <member name="T:RI.Utilities.Threading.NamespaceDoc">
            <summary>
                Contains new thread abstractions and thread utilities and extensions.
            </summary>
        </member>
        <member name="T:RI.Utilities.Xml.XDocumentExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Xml.Linq.XDocument" /> type.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Xml.XDocumentExtensions.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
                Converts a <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.Xml.XmlDocument" />.
            </summary>
            <param name="xDocument"> The <see cref="T:System.Xml.Linq.XDocument" /> to convert. </param>
            <returns> The converted <see cref="T:System.Xml.XmlDocument" />. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="xDocument" /> is null. </exception>
            TODO: Add overload with ReadOptions
        </member>
        <member name="T:RI.Utilities.Xml.XmlDocumentExtensions">
            <summary>
                Provides utility/extension methods for the <see cref="T:System.Xml.XmlDocument" /> type.
            </summary>
            <threadsafety static="false" instance="false" />
        </member>
        <member name="M:RI.Utilities.Xml.XmlDocumentExtensions.ToXDocument(System.Xml.XmlDocument)">
            <summary>
                Converts a <see cref="T:System.Xml.XmlDocument" /> to a <see cref="T:System.Xml.Linq.XDocument" />.
            </summary>
            <param name="xmlDocument"> The <see cref="T:System.Xml.XmlDocument" /> to convert. </param>
            <returns> The converted <see cref="T:System.Xml.Linq.XDocument" />. </returns>
            <exception cref="T:System.ArgumentNullException"> <paramref name="xmlDocument" /> is null. </exception>
            TODO: Add overload with LoadOptions
        </member>
        <member name="T:RI.Utilities.Xml.NamespaceDoc">
            <summary>
                Contains utilities and extensions for working with XML data and I/O.
            </summary>
        </member>
    </members>
</doc>
